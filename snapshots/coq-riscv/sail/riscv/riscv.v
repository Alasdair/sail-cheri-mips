(*Generated by Sail from riscv.*)
Require Import Sail2_instr_kinds.
Require Import Sail2_values.
Require Import Sail2_string.
Require Import Sail2_operators_mwords.
Require Import Sail2_prompt_monad.
Require Import Sail2_prompt.
Require Import Sail2_state.
Require Import riscv_types.
Require Import riscv_extras.
Import ListNotations.
Open Scope string.
Open Scope bool.
Section Content.

Definition eq_unit (g__22 : unit) (g__23 : unit)  : bool := true.



Definition neq_range {n : Z} {m : Z} {o : Z} {p : Z} '(existT _ x _ : {rangevar : Z & ArithFact (n <=
  rangevar /\
  rangevar <= m)}) '(existT _ y _ : {rangevar : Z & ArithFact (o <= rangevar /\ rangevar <= p)}) 
: bool :=
   negb (eq_range (build_ex x) (build_ex y)).

Definition neq_int (x : Z) (y : Z)  : bool := negb (Z.eqb x y).

Definition neq_bool (x : bool) (y : bool)  : bool := negb (Bool.eqb x y).

Axiom eq_real : forall  (_ : real) (_ : real) , bool.

Axiom lteq_real : forall  (_ : real) (_ : real) , bool.

Axiom lt_real : forall  (_ : real) (_ : real) , bool.

Axiom gteq_real : forall  (_ : real) (_ : real) , bool.

Axiom gt_real : forall  (_ : real) (_ : real) , bool.

Definition spc_forwards '(tt : unit)  : string := " ".

Definition spc_backwards (s : string)  : unit := tt.

Definition opt_spc_forwards '(tt : unit)  : string := "".

Definition opt_spc_backwards (s : string)  : unit := tt.

Definition def_spc_forwards '(tt : unit)  : string := " ".

Definition def_spc_backwards (s : string)  : unit := tt.

Axiom vcons : forall {n : Z} {a : Type} (_ : a) (_ : vec a n) , vec a (n + 1).

Axiom vector_concat : forall {n : Z} {m : Z} {a : Type} (_ : vec a n) (_ : vec a m) , vec a (n + m).

Definition neq_vec {n : Z} (x : mword n) (y : mword n)  : bool := negb (eq_vec x y).



Axiom __raw_SetSlice_int : forall  (w : Z) (_ : Z) (_ : Z) (_ : bits w) , Z.

Definition __GetSlice_int (n : Z) (m : Z) (o : Z) `{ArithFact (n >= 0)} 
: mword n :=
   get_slice_int n m o.

Axiom __raw_SetSlice_bits : forall  (n : Z) (w : Z) (_ : bits n) (_ : Z) (_ : bits w) , bits n.

Axiom __raw_GetSlice_bits : forall

(n : Z) (w : Z) (_ : bits n) (_ : Z)
`{ArithFact (w >= 0)},
bits w.

Axiom __SignExtendSlice : forall {m : Z} (_ : bits m) (_ : Z) (_ : Z) , bits m.

Axiom __ZeroExtendSlice : forall {m : Z} (_ : bits m) (_ : Z) (_ : Z) , bits m.

Definition cast_unit_vec (b : bitU) 
: M (mword 1) :=
   (match b with
    | B0 => returnm ((vec_of_bits [B0]  : mword 1)  : mword 1)
    | B1 => returnm ((vec_of_bits [B1]  : mword 1)  : mword 1)
    | _ => exit tt  : M (mword 1)
    end)
    : M (mword 1).

Axiom DecStr : forall  (_ : Z) , string.

Axiom HexStr : forall  (_ : Z) , string.

Axiom real_power : forall  (_ : real) (_ : Z) , real.

Axiom add_real : forall  (_ : real) (_ : real) , real.

Axiom sub_real : forall  (_ : real) (_ : real) , real.

Axiom negate_real : forall  (_ : real) , real.

Axiom mult_real : forall  (_ : real) (_ : real) , real.

Axiom Sqrt : forall  (_ : real) , real.

Axiom RoundDown : forall  (_ : real) , Z.

Axiom RoundUp : forall  (_ : real) , Z.

Axiom abs_real : forall  (_ : real) , real.

Axiom quotient_nat : forall

(_ : {n : Z & ArithFact (n >= 0)}) (_ : {n : Z & ArithFact (n >= 0)})
,
{n : Z & ArithFact (n >= 0)}.

Axiom quotient_real : forall  (_ : real) (_ : real) , real.

Axiom quotient : forall  (_ : Z) (_ : Z) , Z.

Axiom quot_round_zero : forall  (_ : Z) (_ : Z) , Z.

Axiom rem_round_zero : forall  (_ : Z) (_ : Z) , Z.

Axiom modulus : forall  (_ : Z) (_ : Z) , Z.

Axiom Real : forall  (_ : Z) , real.

Axiom min_nat : forall

(_ : {n : Z & ArithFact (n >= 0)}) (_ : {n : Z & ArithFact (n >= 0)})
,
{n : Z & ArithFact (n >= 0)}.

Axiom max_nat : forall

(_ : {n : Z & ArithFact (n >= 0)}) (_ : {n : Z & ArithFact (n >= 0)})
,
{n : Z & ArithFact (n >= 0)}.

Definition __RISCV_write (addr : mword 64) (width : Z) (data : mword (8 * width)) 
: M (bool) :=
   (write_ram 64 width
      (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0]
        : mword 64) addr data)
    : M (bool).

Axiom __TraceMemoryWrite : forall {m : Z} (n : Z) (_ : bits m) (_ : bits (8 * n)) , unit.

Definition __RISCV_read (addr : mword 64) (width : Z) (aq : bool) (rl : bool) (res : bool) `{ArithFact (width >=
  0)} 
: M (option (mword (8 * width))) :=
   (match (aq, rl, res) with
    | (false, false, false) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__0 : mword (8 * width) =>
       returnm ((Some
                   (w__0))
        : option (mword (8 * width)))
    | (true, false, false) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__1 : mword (8 * width) =>
       returnm ((Some
                   (w__1))
        : option (mword (8 * width)))
    | (true, true, false) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__2 : mword (8 * width) =>
       returnm ((Some
                   (w__2))
        : option (mword (8 * width)))
    | (false, false, true) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__3 : mword (8 * width) =>
       returnm ((Some
                   (w__3))
        : option (mword (8 * width)))
    | (true, false, true) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__4 : mword (8 * width) =>
       returnm ((Some
                   (w__4))
        : option (mword (8 * width)))
    | (true, true, true) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__5 : mword (8 * width) =>
       returnm ((Some
                   (w__5))
        : option (mword (8 * width)))
    | (false, true, false) => returnm (None  : option (mword (8 * width)))
    | (false, true, true) => returnm (None  : option (mword (8 * width)))
    end)
    : M (option (mword (8 * width))).

Axiom __TraceMemoryRead : forall {m : Z} (n : Z) (_ : bits m) (_ : bits (8 * n)) , unit.

Definition ex_nat '(existT _ n _ : {n : Z & ArithFact (n >= 0)}) 
: {syn_n : Z & ArithFact (syn_n >= 0)} :=
   build_ex(n).

Definition ex_int (n : Z)  : {syn_n : Z & ArithFact (True)} := build_ex(n).

Definition coerce_int_nat (x : Z) 
: M ({n : Z & ArithFact (n >= 0)}) :=
   assert_exp' (x >=? 0) "" >>= fun _ => returnm (build_ex (x  : Z)).

Definition EXTS {n : Z} (m__tv : Z) (v : mword n) `{ArithFact (m__tv >= n)} 
: mword m__tv :=
   sign_extend v m__tv.

Definition EXTZ {n : Z} (m__tv : Z) (v : mword n) `{ArithFact (m__tv >= n)} 
: mword m__tv :=
   zero_extend v m__tv.

Definition zopz0zI_s {n : Z} (x : mword n) (y : mword n) `{ArithFact (n >= (0 + 1))} 
: bool :=
   Z.ltb (projT1 (sint x)) (projT1 (sint y)).

Definition zopz0zKzJ_s {n : Z} (x : mword n) (y : mword n) `{ArithFact (n >= (0 + 1))} 
: bool :=
   Z.geb (projT1 (sint x)) (projT1 (sint y)).

Definition zopz0zI_u {n : Z} (x : mword n) (y : mword n) 
: bool :=
   Z.ltb (projT1 (uint x)) (projT1 (uint y)).

Definition zopz0zKzJ_u {n : Z} (x : mword n) (y : mword n) 
: bool :=
   Z.geb (projT1 (uint x)) (projT1 (uint y)).

Definition zopz0zIzJ_u {n : Z} (x : mword n) (y : mword n) 
: bool :=
   Z.leb (projT1 (uint x)) (projT1 (uint y)).

Definition bool_to_bits (x : bool) 
: mword 1 :=
   if (x) then (vec_of_bits [B1]  : mword 1)
   else (vec_of_bits [B0]  : mword 1).

Definition bit_to_bool (b : bitU) 
: M (bool) :=
   (match b with
    | B1 => returnm (true  : bool)
    | B0 => returnm (false  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition vector64 (n : Z)  : mword 64 := get_slice_int 64 n 0.

Definition to_bits (l : Z) (n : Z) `{ArithFact (l >= 0)}  : mword l := get_slice_int l n 0.

Axiom vector_update_subrange_inc : forall
{n : Z}
(_ : mword n) (m : Z) (o : Z) (_ : mword (o - (m - 1)))
,
mword n.

Definition shift_right_arith64 (v : mword 64) (shift : mword 6) 
: mword 64 :=
   let v128 : bits 128 := EXTS 128 v in
   subrange_vec_dec (shift_bits_right v128 shift) 63 0.

Definition shift_right_arith32 (v : mword 32) (shift : mword 5) 
: mword 32 :=
   let v64 : bits 64 := EXTS 64 v in
   subrange_vec_dec (shift_bits_right v64 shift) 31 0.

Definition xlen := 64.
Hint Unfold xlen : sail.
Definition xlen_max_unsigned := projT1 (sub_range (build_ex (projT1 (pow2 xlen))) (build_ex 1)).
Hint Unfold xlen_max_unsigned : sail.
Definition xlen_max_signed :=
projT1 (sub_range (build_ex (projT1 (pow2 (projT1 (sub_range (build_ex xlen) (build_ex 1))))))
          (build_ex 1)).
Hint Unfold xlen_max_signed : sail.
Definition xlen_min_signed :=
projT1 (sub_range (build_ex 0)
          (build_ex (projT1 (pow2 (projT1 (sub_range (build_ex xlen) (build_ex 1))))))).
Hint Unfold xlen_min_signed : sail.
Definition regbits_to_regno (b : mword 5) 
: {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)} :=
   build_ex(let 'r := projT1 (uint b) in
   r).

Definition creg2reg_bits (creg : mword 3) 
: mword 5 :=
   concat_vec (vec_of_bits [B0;B1]  : mword 2) creg.

Definition zreg : regbits := (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5).
Hint Unfold zreg : sail.
Definition ra : regbits := (vec_of_bits [B0;B0;B0;B0;B1]  : mword 5).
Hint Unfold ra : sail.
Definition sp : regbits := (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5).
Hint Unfold sp : sail.
Definition rX (r : Z) `{ArithFact (0 <= r /\ (r + 1) <= 32)} 
: M (mword 64) :=
   let p0_ := r in
   (if sumbool_of_bool ((Z.eqb p0_ 0)) then
      returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0]
                 : mword 64)
       : mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 1)) then (read_reg x1_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 2)) then (read_reg x2_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 3)) then (read_reg x3_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 4)) then (read_reg x4_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 5)) then (read_reg x5_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 6)) then (read_reg x6_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 7)) then (read_reg x7_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 8)) then (read_reg x8_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 9)) then (read_reg x9_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 10)) then (read_reg x10_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 11)) then (read_reg x11_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 12)) then (read_reg x12_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 13)) then (read_reg x13_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 14)) then (read_reg x14_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 15)) then (read_reg x15_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 16)) then (read_reg x16_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 17)) then (read_reg x17_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 18)) then (read_reg x18_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 19)) then (read_reg x19_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 20)) then (read_reg x20_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 21)) then (read_reg x21_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 22)) then (read_reg x22_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 23)) then (read_reg x23_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 24)) then (read_reg x24_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 25)) then (read_reg x25_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 26)) then (read_reg x26_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 27)) then (read_reg x27_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 28)) then (read_reg x28_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 29)) then (read_reg x29_ref  : M (mword 64))  : M (xlenbits)
    else if sumbool_of_bool ((Z.eqb p0_ 30)) then (read_reg x30_ref  : M (mword 64))  : M (xlenbits)
    else (read_reg x31_ref  : M (mword 64))  : M (xlenbits))
    : M (mword 64).

Definition wX (r : Z) (v : mword 64) `{ArithFact (0 <= r /\ (r + 1) <= 32)} 
: M (unit) :=
   let p0_ := r in
   (if sumbool_of_bool ((Z.eqb p0_ 0)) then returnm (tt  : unit)
    else if sumbool_of_bool ((Z.eqb p0_ 1)) then write_reg x1_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 2)) then write_reg x2_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 3)) then write_reg x3_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 4)) then write_reg x4_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 5)) then write_reg x5_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 6)) then write_reg x6_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 7)) then write_reg x7_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 8)) then write_reg x8_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 9)) then write_reg x9_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 10)) then write_reg x10_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 11)) then write_reg x11_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 12)) then write_reg x12_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 13)) then write_reg x13_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 14)) then write_reg x14_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 15)) then write_reg x15_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 16)) then write_reg x16_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 17)) then write_reg x17_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 18)) then write_reg x18_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 19)) then write_reg x19_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 20)) then write_reg x20_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 21)) then write_reg x21_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 22)) then write_reg x22_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 23)) then write_reg x23_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 24)) then write_reg x24_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 25)) then write_reg x25_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 26)) then write_reg x26_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 27)) then write_reg x27_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 28)) then write_reg x28_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 29)) then write_reg x29_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 30)) then write_reg x30_ref v  : M (unit)
    else write_reg x31_ref v  : M (unit)) >>
   returnm ((if sumbool_of_bool ((neq_atom r 0)) then
               print_endline
                 (String.append "x"
                    (String.append (string_of_int r) (String.append " <- " (string_of_bits v))))
             else tt)
    : unit).

Definition reg_name_abi (r : mword 5) 
: string :=
   let b__0 := r in
   if sumbool_of_bool ((Z.eqb
                          (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                          (projT1 ((build_ex (projT1 (regbits_to_regno
                                                        (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "zero"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "ra"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "sp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "gp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "tp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t0"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "fp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a0"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a5"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a6"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a7"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s5"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s6"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s7"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s8"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s9"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s10"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s11"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t5"
   else "t6".

Definition Architecture_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: Architecture :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RV32
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RV64
   else RV128.

Definition num_of_Architecture (arg_ : Architecture) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   build_ex(match arg_ with | RV32 => 0 | RV64 => 1 | RV128 => 2 end).

Definition architecture (a : mword 2) 
: option Architecture :=
   let b__0 := a in
   if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then Some (RV32)
   else if ((eq_vec b__0 (vec_of_bits [B1;B0]  : mword 2))) then Some (RV64)
   else if ((eq_vec b__0 (vec_of_bits [B1;B1]  : mword 2))) then Some (RV128)
   else None.

Definition arch_to_bits (a : Architecture) 
: mword 2 :=
   match a with
   | RV32 => (vec_of_bits [B0;B1]  : mword 2)
   | RV64 => (vec_of_bits [B1;B0]  : mword 2)
   | RV128 => (vec_of_bits [B1;B1]  : mword 2)
   end.

Definition Privilege_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: Privilege :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then User
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Supervisor
   else Machine.

Definition num_of_Privilege (arg_ : Privilege) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   build_ex(match arg_ with | User => 0 | Supervisor => 1 | Machine => 2 end).

Definition privLevel_to_bits (p : Privilege) 
: mword 2 :=
   match p with
   | User => (vec_of_bits [B0;B0]  : mword 2)
   | Supervisor => (vec_of_bits [B0;B1]  : mword 2)
   | Machine => (vec_of_bits [B1;B1]  : mword 2)
   end.

Definition privLevel_of_bits (p : mword 2) 
: Privilege :=
   let b__0 := p in
   if ((eq_vec b__0 (vec_of_bits [B0;B0]  : mword 2))) then User
   else if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then Supervisor
   else Machine.

Definition privLevel_to_str (p : Privilege) 
: string :=
   match p with | User => "U" | Supervisor => "S" | Machine => "M" end.

Definition AccessType_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 3)} 
: AccessType :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Read
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Write
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then ReadWrite
   else Execute.

Definition num_of_AccessType (arg_ : AccessType) 
: {e : Z & ArithFact (0 <= e /\ e <= 3)} :=
   build_ex(match arg_ with | Read => 0 | Write => 1 | ReadWrite => 2 | Execute => 3 end).

Definition accessType_to_str (a : AccessType) 
: string :=
   match a with | Read => "R" | Write => "W" | ReadWrite => "RW" | Execute => "X" end.

Definition ReadType_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 1)} 
: ReadType :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Instruction
   else Data.

Definition num_of_ReadType (arg_ : ReadType) 
: {e : Z & ArithFact (0 <= e /\ e <= 1)} :=
   build_ex(match arg_ with | Instruction => 0 | Data => 1 end).

Definition readType_to_str (r : ReadType) 
: string :=
   match r with | Instruction => "I" | Data => "D" end.

Definition word_width_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 3)} 
: word_width :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then BYTE
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then HALF
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then WORD
   else DOUBLE.

Definition num_of_word_width (arg_ : word_width) 
: {e : Z & ArithFact (0 <= e /\ e <= 3)} :=
   build_ex(match arg_ with | BYTE => 0 | HALF => 1 | WORD => 2 | DOUBLE => 3 end).

Definition InterruptType_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 8)} 
: InterruptType :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then I_U_Software
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then I_S_Software
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then I_M_Software
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then I_U_Timer
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then I_S_Timer
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then I_M_Timer
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then I_U_External
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then I_S_External
   else I_M_External.

Definition num_of_InterruptType (arg_ : InterruptType) 
: {e : Z & ArithFact (0 <= e /\ e <= 8)} :=
   build_ex(match arg_ with
            | I_U_Software => 0
            | I_S_Software => 1
            | I_M_Software => 2
            | I_U_Timer => 3
            | I_S_Timer => 4
            | I_M_Timer => 5
            | I_U_External => 6
            | I_S_External => 7
            | I_M_External => 8
            end).

Definition interruptType_to_bits (i : InterruptType) 
: mword 4 :=
   match i with
   | I_U_Software => (vec_of_bits [B0;B0;B0;B0]  : mword 4)
   | I_S_Software => (vec_of_bits [B0;B0;B0;B1]  : mword 4)
   | I_M_Software => (vec_of_bits [B0;B0;B1;B1]  : mword 4)
   | I_U_Timer => (vec_of_bits [B0;B1;B0;B0]  : mword 4)
   | I_S_Timer => (vec_of_bits [B0;B1;B0;B1]  : mword 4)
   | I_M_Timer => (vec_of_bits [B0;B1;B1;B1]  : mword 4)
   | I_U_External => (vec_of_bits [B1;B0;B0;B0]  : mword 4)
   | I_S_External => (vec_of_bits [B1;B0;B0;B1]  : mword 4)
   | I_M_External => (vec_of_bits [B1;B0;B1;B1]  : mword 4)
   end.

Definition ExceptionType_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 15)} 
: ExceptionType :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then E_Fetch_Addr_Align
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then E_Fetch_Access_Fault
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then E_Illegal_Instr
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then E_Breakpoint
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then E_Load_Addr_Align
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then E_Load_Access_Fault
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then E_SAMO_Addr_Align
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then E_SAMO_Access_Fault
   else if sumbool_of_bool ((Z.eqb p0_ 8)) then E_U_EnvCall
   else if sumbool_of_bool ((Z.eqb p0_ 9)) then E_S_EnvCall
   else if sumbool_of_bool ((Z.eqb p0_ 10)) then E_Reserved_10
   else if sumbool_of_bool ((Z.eqb p0_ 11)) then E_M_EnvCall
   else if sumbool_of_bool ((Z.eqb p0_ 12)) then E_Fetch_Page_Fault
   else if sumbool_of_bool ((Z.eqb p0_ 13)) then E_Load_Page_Fault
   else if sumbool_of_bool ((Z.eqb p0_ 14)) then E_Reserved_14
   else E_SAMO_Page_Fault.

Definition num_of_ExceptionType (arg_ : ExceptionType) 
: {e : Z & ArithFact (0 <= e /\ e <= 15)} :=
   build_ex(match arg_ with
            | E_Fetch_Addr_Align => 0
            | E_Fetch_Access_Fault => 1
            | E_Illegal_Instr => 2
            | E_Breakpoint => 3
            | E_Load_Addr_Align => 4
            | E_Load_Access_Fault => 5
            | E_SAMO_Addr_Align => 6
            | E_SAMO_Access_Fault => 7
            | E_U_EnvCall => 8
            | E_S_EnvCall => 9
            | E_Reserved_10 => 10
            | E_M_EnvCall => 11
            | E_Fetch_Page_Fault => 12
            | E_Load_Page_Fault => 13
            | E_Reserved_14 => 14
            | E_SAMO_Page_Fault => 15
            end).

Definition exceptionType_to_bits (e : ExceptionType) 
: mword 4 :=
   match e with
   | E_Fetch_Addr_Align => (vec_of_bits [B0;B0;B0;B0]  : mword 4)
   | E_Fetch_Access_Fault => (vec_of_bits [B0;B0;B0;B1]  : mword 4)
   | E_Illegal_Instr => (vec_of_bits [B0;B0;B1;B0]  : mword 4)
   | E_Breakpoint => (vec_of_bits [B0;B0;B1;B1]  : mword 4)
   | E_Load_Addr_Align => (vec_of_bits [B0;B1;B0;B0]  : mword 4)
   | E_Load_Access_Fault => (vec_of_bits [B0;B1;B0;B1]  : mword 4)
   | E_SAMO_Addr_Align => (vec_of_bits [B0;B1;B1;B0]  : mword 4)
   | E_SAMO_Access_Fault => (vec_of_bits [B0;B1;B1;B1]  : mword 4)
   | E_U_EnvCall => (vec_of_bits [B1;B0;B0;B0]  : mword 4)
   | E_S_EnvCall => (vec_of_bits [B1;B0;B0;B1]  : mword 4)
   | E_Reserved_10 => (vec_of_bits [B1;B0;B1;B0]  : mword 4)
   | E_M_EnvCall => (vec_of_bits [B1;B0;B1;B1]  : mword 4)
   | E_Fetch_Page_Fault => (vec_of_bits [B1;B1;B0;B0]  : mword 4)
   | E_Load_Page_Fault => (vec_of_bits [B1;B1;B0;B1]  : mword 4)
   | E_Reserved_14 => (vec_of_bits [B1;B1;B1;B0]  : mword 4)
   | E_SAMO_Page_Fault => (vec_of_bits [B1;B1;B1;B1]  : mword 4)
   end.

Definition exceptionType_to_str (e : ExceptionType) 
: string :=
   match e with
   | E_Fetch_Addr_Align => "misaligned-fetch"
   | E_Fetch_Access_Fault => "fetch-access-fault"
   | E_Illegal_Instr => "illegal-instruction"
   | E_Breakpoint => "breakpoint"
   | E_Load_Addr_Align => "misaligned-load"
   | E_Load_Access_Fault => "load-access-fault"
   | E_SAMO_Addr_Align => "misaliged-store/amo"
   | E_SAMO_Access_Fault => "store/amo-access-fault"
   | E_U_EnvCall => "u-call"
   | E_S_EnvCall => "s-call"
   | E_Reserved_10 => "reserved-0"
   | E_M_EnvCall => "m-call"
   | E_Fetch_Page_Fault => "fetch-page-fault"
   | E_Load_Page_Fault => "load-page-fault"
   | E_Reserved_14 => "reserved-1"
   | E_SAMO_Page_Fault => "store/amo-page-fault"
   end.

Definition not_implemented {a : Type} (message : string) 
: M (a) :=
   (throw (Error_not_implemented
             (message)))
    : M (a).

Definition internal_error {a : Type} (s : string) 
: M (a) :=
   assert_exp' false s >>= fun _ => (throw (Error_internal_error (tt)))  : M (a).

Definition TrapVectorMode_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: TrapVectorMode :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then TV_Direct
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then TV_Vector
   else TV_Reserved.

Definition num_of_TrapVectorMode (arg_ : TrapVectorMode) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   build_ex(match arg_ with | TV_Direct => 0 | TV_Vector => 1 | TV_Reserved => 2 end).

Definition trapVectorMode_of_bits (m : mword 2) 
: TrapVectorMode :=
   let b__0 := m in
   if ((eq_vec b__0 (vec_of_bits [B0;B0]  : mword 2))) then TV_Direct
   else if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then TV_Vector
   else TV_Reserved.

Definition ExtStatus_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 3)} 
: ExtStatus :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Off
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Initial
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then Clean
   else Dirty.

Definition num_of_ExtStatus (arg_ : ExtStatus) 
: {e : Z & ArithFact (0 <= e /\ e <= 3)} :=
   build_ex(match arg_ with | Off => 0 | Initial => 1 | Clean => 2 | Dirty => 3 end).

Definition extStatus_to_bits (e : ExtStatus) 
: mword 2 :=
   match e with
   | Off => (vec_of_bits [B0;B0]  : mword 2)
   | Initial => (vec_of_bits [B0;B1]  : mword 2)
   | Clean => (vec_of_bits [B1;B0]  : mword 2)
   | Dirty => (vec_of_bits [B1;B1]  : mword 2)
   end.

Definition extStatus_of_bits (e : mword 2) 
: ExtStatus :=
   let b__0 := e in
   if ((eq_vec b__0 (vec_of_bits [B0;B0]  : mword 2))) then Off
   else if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then Initial
   else if ((eq_vec b__0 (vec_of_bits [B1;B0]  : mword 2))) then Clean
   else Dirty.

Definition SATPMode_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: SATPMode :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Sbare
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Sv32
   else Sv39.

Definition num_of_SATPMode (arg_ : SATPMode) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   build_ex(match arg_ with | Sbare => 0 | Sv32 => 1 | Sv39 => 2 end).

Definition satpMode_of_bits (a : Architecture) (m : mword 4) 
: option SATPMode :=
   match (a, m) with
   | (g__19, b__0) =>
      if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0]  : mword 4))) then Some (Sbare)
      else
        match (g__19, b__0) with
        | (RV32, b__0) =>
           if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1]  : mword 4))) then Some (Sv32)
           else match (RV32, b__0) with | (g__20, g__21) => None end
        | (RV64, b__0) =>
           if ((eq_vec b__0 (vec_of_bits [B1;B0;B0;B0]  : mword 4))) then Some (Sv39)
           else match (RV64, b__0) with | (g__20, g__21) => None end
        | (g__20, g__21) => None
        end
   end.

Definition uop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 1)} 
: uop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_LUI
   else RISCV_AUIPC.

Definition num_of_uop (arg_ : uop) 
: {e : Z & ArithFact (0 <= e /\ e <= 1)} :=
   build_ex(match arg_ with | RISCV_LUI => 0 | RISCV_AUIPC => 1 end).

Definition bop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 5)} 
: bop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_BEQ
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_BNE
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then RISCV_BLT
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then RISCV_BGE
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then RISCV_BLTU
   else RISCV_BGEU.

Definition num_of_bop (arg_ : bop) 
: {e : Z & ArithFact (0 <= e /\ e <= 5)} :=
   build_ex(match arg_ with
            | RISCV_BEQ => 0
            | RISCV_BNE => 1
            | RISCV_BLT => 2
            | RISCV_BGE => 3
            | RISCV_BLTU => 4
            | RISCV_BGEU => 5
            end).

Definition iop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 5)} 
: iop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_ADDI
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_SLTI
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then RISCV_SLTIU
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then RISCV_XORI
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then RISCV_ORI
   else RISCV_ANDI.

Definition num_of_iop (arg_ : iop) 
: {e : Z & ArithFact (0 <= e /\ e <= 5)} :=
   build_ex(match arg_ with
            | RISCV_ADDI => 0
            | RISCV_SLTI => 1
            | RISCV_SLTIU => 2
            | RISCV_XORI => 3
            | RISCV_ORI => 4
            | RISCV_ANDI => 5
            end).

Definition sop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: sop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_SLLI
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_SRLI
   else RISCV_SRAI.

Definition num_of_sop (arg_ : sop) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   build_ex(match arg_ with | RISCV_SLLI => 0 | RISCV_SRLI => 1 | RISCV_SRAI => 2 end).

Definition rop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 9)} 
: rop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_ADD
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_SUB
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then RISCV_SLL
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then RISCV_SLT
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then RISCV_SLTU
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then RISCV_XOR
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then RISCV_SRL
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then RISCV_SRA
   else if sumbool_of_bool ((Z.eqb p0_ 8)) then RISCV_OR
   else RISCV_AND.

Definition num_of_rop (arg_ : rop) 
: {e : Z & ArithFact (0 <= e /\ e <= 9)} :=
   build_ex(match arg_ with
            | RISCV_ADD => 0
            | RISCV_SUB => 1
            | RISCV_SLL => 2
            | RISCV_SLT => 3
            | RISCV_SLTU => 4
            | RISCV_XOR => 5
            | RISCV_SRL => 6
            | RISCV_SRA => 7
            | RISCV_OR => 8
            | RISCV_AND => 9
            end).

Definition ropw_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 4)} 
: ropw :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_ADDW
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_SUBW
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then RISCV_SLLW
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then RISCV_SRLW
   else RISCV_SRAW.

Definition num_of_ropw (arg_ : ropw) 
: {e : Z & ArithFact (0 <= e /\ e <= 4)} :=
   build_ex(match arg_ with
            | RISCV_ADDW => 0
            | RISCV_SUBW => 1
            | RISCV_SLLW => 2
            | RISCV_SRLW => 3
            | RISCV_SRAW => 4
            end).

Definition sopw_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: sopw :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_SLLIW
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_SRLIW
   else RISCV_SRAIW.

Definition num_of_sopw (arg_ : sopw) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   build_ex(match arg_ with | RISCV_SLLIW => 0 | RISCV_SRLIW => 1 | RISCV_SRAIW => 2 end).

Definition amoop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 8)} 
: amoop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then AMOSWAP
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then AMOADD
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then AMOXOR
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then AMOAND
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then AMOOR
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then AMOMIN
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then AMOMAX
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then AMOMINU
   else AMOMAXU.

Definition num_of_amoop (arg_ : amoop) 
: {e : Z & ArithFact (0 <= e /\ e <= 8)} :=
   build_ex(match arg_ with
            | AMOSWAP => 0
            | AMOADD => 1
            | AMOXOR => 2
            | AMOAND => 3
            | AMOOR => 4
            | AMOMIN => 5
            | AMOMAX => 6
            | AMOMINU => 7
            | AMOMAXU => 8
            end).

Definition csrop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: csrop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then CSRRW
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then CSRRS
   else CSRRC.

Definition num_of_csrop (arg_ : csrop) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   build_ex(match arg_ with | CSRRW => 0 | CSRRS => 1 | CSRRC => 2 end).

Definition reg_name_forwards (arg_ : mword 5) 
: string :=
   let b__0 := arg_ in
   if sumbool_of_bool ((Z.eqb
                          (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                          (projT1 ((build_ex (projT1 (regbits_to_regno
                                                        (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "zero"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "ra"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "sp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "gp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "tp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t0"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "fp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a0"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a5"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a6"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a7"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s5"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s6"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s7"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s8"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s9"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s10"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s11"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t5"
   else "t6".

Definition reg_name_backwards (arg_ : string) 
: M (mword 5) :=
   (match arg_ with
    | "zero" => returnm ((vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)  : mword 5)
    | "ra" => returnm ((vec_of_bits [B0;B0;B0;B0;B1]  : mword 5)  : mword 5)
    | "sp" => returnm ((vec_of_bits [B0;B0;B0;B1;B0]  : mword 5)  : mword 5)
    | "gp" => returnm ((vec_of_bits [B0;B0;B0;B1;B1]  : mword 5)  : mword 5)
    | "tp" => returnm ((vec_of_bits [B0;B0;B1;B0;B0]  : mword 5)  : mword 5)
    | "t0" => returnm ((vec_of_bits [B0;B0;B1;B0;B1]  : mword 5)  : mword 5)
    | "t1" => returnm ((vec_of_bits [B0;B0;B1;B1;B0]  : mword 5)  : mword 5)
    | "t2" => returnm ((vec_of_bits [B0;B0;B1;B1;B1]  : mword 5)  : mword 5)
    | "fp" => returnm ((vec_of_bits [B0;B1;B0;B0;B0]  : mword 5)  : mword 5)
    | "s1" => returnm ((vec_of_bits [B0;B1;B0;B0;B1]  : mword 5)  : mword 5)
    | "a0" => returnm ((vec_of_bits [B0;B1;B0;B1;B0]  : mword 5)  : mword 5)
    | "a1" => returnm ((vec_of_bits [B0;B1;B0;B1;B1]  : mword 5)  : mword 5)
    | "a2" => returnm ((vec_of_bits [B0;B1;B1;B0;B0]  : mword 5)  : mword 5)
    | "a3" => returnm ((vec_of_bits [B0;B1;B1;B0;B1]  : mword 5)  : mword 5)
    | "a4" => returnm ((vec_of_bits [B0;B1;B1;B1;B0]  : mword 5)  : mword 5)
    | "a5" => returnm ((vec_of_bits [B0;B1;B1;B1;B1]  : mword 5)  : mword 5)
    | "a6" => returnm ((vec_of_bits [B1;B0;B0;B0;B0]  : mword 5)  : mword 5)
    | "a7" => returnm ((vec_of_bits [B1;B0;B0;B0;B1]  : mword 5)  : mword 5)
    | "s2" => returnm ((vec_of_bits [B1;B0;B0;B1;B0]  : mword 5)  : mword 5)
    | "s3" => returnm ((vec_of_bits [B1;B0;B0;B1;B1]  : mword 5)  : mword 5)
    | "s4" => returnm ((vec_of_bits [B1;B0;B1;B0;B0]  : mword 5)  : mword 5)
    | "s5" => returnm ((vec_of_bits [B1;B0;B1;B0;B1]  : mword 5)  : mword 5)
    | "s6" => returnm ((vec_of_bits [B1;B0;B1;B1;B0]  : mword 5)  : mword 5)
    | "s7" => returnm ((vec_of_bits [B1;B0;B1;B1;B1]  : mword 5)  : mword 5)
    | "s8" => returnm ((vec_of_bits [B1;B1;B0;B0;B0]  : mword 5)  : mword 5)
    | "s9" => returnm ((vec_of_bits [B1;B1;B0;B0;B1]  : mword 5)  : mword 5)
    | "s10" => returnm ((vec_of_bits [B1;B1;B0;B1;B0]  : mword 5)  : mword 5)
    | "s11" => returnm ((vec_of_bits [B1;B1;B0;B1;B1]  : mword 5)  : mword 5)
    | "t3" => returnm ((vec_of_bits [B1;B1;B1;B0;B0]  : mword 5)  : mword 5)
    | "t4" => returnm ((vec_of_bits [B1;B1;B1;B0;B1]  : mword 5)  : mword 5)
    | "t5" => returnm ((vec_of_bits [B1;B1;B1;B1;B0]  : mword 5)  : mword 5)
    | "t6" => returnm ((vec_of_bits [B1;B1;B1;B1;B1]  : mword 5)  : mword 5)
    | _ => exit tt  : M (mword 5)
    end)
    : M (mword 5).

Definition reg_name_forwards_matches (arg_ : mword 5) 
: bool :=
   let b__0 := arg_ in
   if sumbool_of_bool ((Z.eqb
                          (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                          (projT1 ((build_ex (projT1 (regbits_to_regno
                                                        (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B1;B0;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B1;B1;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B1;B1;B1]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else false.

Definition reg_name_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "zero" => true
   | "ra" => true
   | "sp" => true
   | "gp" => true
   | "tp" => true
   | "t0" => true
   | "t1" => true
   | "t2" => true
   | "fp" => true
   | "s1" => true
   | "a0" => true
   | "a1" => true
   | "a2" => true
   | "a3" => true
   | "a4" => true
   | "a5" => true
   | "a6" => true
   | "a7" => true
   | "s2" => true
   | "s3" => true
   | "s4" => true
   | "s5" => true
   | "s6" => true
   | "s7" => true
   | "s8" => true
   | "s9" => true
   | "s10" => true
   | "s11" => true
   | "t3" => true
   | "t4" => true
   | "t5" => true
   | "t6" => true
   | _ => false
   end.

Definition reg_name_matches_prefix (arg_ : string) 
: option ((mword 5 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1319_ := arg_ in
   if ((andb (string_startswith _stringappend_1319_ "zero")
          (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "zero")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "zero")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "ra")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "ra")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "ra")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "sp")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "sp")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "sp")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "gp")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "gp")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "gp")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "tp")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "tp")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "tp")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B0;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "t0")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t0")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t0")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B0;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "t1")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t1")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t1")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "t2")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t2")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t2")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "fp")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "fp")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "fp")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B0;B0;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "s1")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s1")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s1")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B0;B0;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "a0")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a0")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a0")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B0;B1;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "a1")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a1")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a1")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B0;B1;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "a2")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a2")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a2")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B1;B0;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "a3")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a3")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a3")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B1;B0;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "a4")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a4")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a4")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B1;B1;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "a5")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a5")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a5")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B1;B1;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "a6")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a6")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a6")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B0;B0;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "a7")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a7")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "a7")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B0;B0;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "s2")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s2")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s2")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B0;B1;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "s3")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s3")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s3")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B0;B1;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "s4")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s4")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s4")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B1;B0;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "s5")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s5")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s5")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B1;B0;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "s6")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s6")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s6")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B1;B1;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "s7")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s7")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s7")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B1;B1;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "s8")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s8")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s8")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B0;B0;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "s9")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s9")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s9")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B0;B0;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "s10")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s10")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s10")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B0;B1;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "s11")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s11")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "s11")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B0;B1;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "t3")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t3")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t3")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B1;B0;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "t4")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t4")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t4")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B1;B0;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "t5")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t5")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t5")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B1;B1;B0]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1319_ "t6")
               (match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t6")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1319_ (build_ex (projT1 (string_length "t6")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B1;B1;B1]  : mword 5), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
     end
   else None.

Definition sep_forwards (arg_ : unit) 
: string :=
   match arg_ with
   | tt =>
      string_append (opt_spc_forwards tt)
        (string_append "," (string_append (def_spc_forwards tt) ""))
   end.

Definition sep_backwards (arg_ : string) 
: M (unit) :=
   let _stringappend_1314_ := arg_ in
   (match (opt_spc_matches_prefix _stringappend_1314_) with
    | Some (tt,(existT _ _stringappend_1315_ _)) => returnm (tt, build_ex _stringappend_1315_)
    | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
    end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_1315_ _) =>
   let _stringappend_1316_ := string_drop _stringappend_1314_ (build_ex _stringappend_1315_) in
   let _stringappend_1317_ :=
     string_drop _stringappend_1316_ (build_ex (projT1 (string_length ","))) in
   (match (opt_spc_matches_prefix _stringappend_1317_) with
    | Some (tt,(existT _ _stringappend_1318_ _)) => returnm (tt, build_ex _stringappend_1318_)
    | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
    end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_1318_ _) =>
   (match (string_drop _stringappend_1317_ (build_ex _stringappend_1318_)) with
    | "" => returnm (tt  : unit)
    | _ => exit tt  : M (unit)
    end)
    : M (unit).

Definition sep_forwards_matches (arg_ : unit)  : bool := match arg_ with | tt => true end.

Definition sep_backwards_matches (arg_ : string) 
: M (bool) :=
   let _stringappend_1309_ := arg_ in
   (if ((match (opt_spc_matches_prefix _stringappend_1309_) with
         | Some (tt,(existT _ _stringappend_1310_ _)) =>
            let _stringappend_1311_ :=
              string_drop _stringappend_1309_ (build_ex _stringappend_1310_) in
            if ((andb (string_startswith _stringappend_1311_ ",")
                   (let _stringappend_1312_ :=
                     string_drop _stringappend_1311_ (build_ex (projT1 (string_length ","))) in
                   if ((match (opt_spc_matches_prefix _stringappend_1312_) with
                        | Some (tt,(existT _ _stringappend_1313_ _)) =>
                           match (string_drop _stringappend_1312_ (build_ex _stringappend_1313_)) with
                           | "" => true
                           | _ => false
                           end
                        | None => false
                        end)) then
                     true
                   else false))) then
              true
            else false
         | None => false
         end)) then
      (match (opt_spc_matches_prefix _stringappend_1309_) with
       | Some (tt,(existT _ _stringappend_1310_ _)) => returnm (tt, build_ex _stringappend_1310_)
       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_1310_ _) =>
      let _stringappend_1311_ := string_drop _stringappend_1309_ (build_ex _stringappend_1310_) in
      let _stringappend_1312_ :=
        string_drop _stringappend_1311_ (build_ex (projT1 (string_length ","))) in
      (match (opt_spc_matches_prefix _stringappend_1312_) with
       | Some (tt,(existT _ _stringappend_1313_ _)) => returnm (tt, build_ex _stringappend_1313_)
       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_1313_ _) =>
      (match (string_drop _stringappend_1312_ (build_ex _stringappend_1313_)) with
       | "" => returnm (true  : bool)
       | _ => exit tt  : M (bool)
       end)
       : M (bool)
    else returnm (false  : bool))
    : M (bool).

Definition sep_matches_prefix (arg_ : string) 
: M (option ((unit * {n : Z & ArithFact (n >= 0)}))) :=
   let _stringappend_1304_ := arg_ in
   (if ((match (opt_spc_matches_prefix _stringappend_1304_) with
         | Some (tt,(existT _ _stringappend_1305_ _)) =>
            let _stringappend_1306_ :=
              string_drop _stringappend_1304_ (build_ex _stringappend_1305_) in
            if ((andb (string_startswith _stringappend_1306_ ",")
                   (let _stringappend_1307_ :=
                     string_drop _stringappend_1306_ (build_ex (projT1 (string_length ","))) in
                   if ((match (opt_spc_matches_prefix _stringappend_1307_) with
                        | Some (tt,(existT _ _stringappend_1308_ _)) =>
                           match (string_drop _stringappend_1307_ (build_ex _stringappend_1308_)) with
                           | s_ => true
                           end
                        | None => false
                        end)) then
                     true
                   else false))) then
              true
            else false
         | None => false
         end)) then
      (match (opt_spc_matches_prefix _stringappend_1304_) with
       | Some (tt,(existT _ _stringappend_1305_ _)) => returnm (tt, build_ex _stringappend_1305_)
       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_1305_ _) =>
      let _stringappend_1306_ := string_drop _stringappend_1304_ (build_ex _stringappend_1305_) in
      let _stringappend_1307_ :=
        string_drop _stringappend_1306_ (build_ex (projT1 (string_length ","))) in
      (match (opt_spc_matches_prefix _stringappend_1307_) with
       | Some (tt,(existT _ _stringappend_1308_ _)) => returnm (tt, build_ex _stringappend_1308_)
       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_1308_ _) =>
      returnm ((match (string_drop _stringappend_1307_ (build_ex _stringappend_1308_)) with
                | s_ =>
                   Some
                     ((tt, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                               (build_ex (projT1 (string_length s_)))))))
                end)
       : option ((unit * {n : Z & ArithFact (n >= 0)})))
    else returnm (None  : option ((unit * {n : Z & ArithFact (n >= 0)}))))
    : M (option ((unit * {n : Z & ArithFact (n >= 0)}))).

Definition bool_bits_forwards (arg_ : bool) 
: mword 1 :=
   match arg_ with
   | true => (vec_of_bits [B1]  : mword 1)
   | false => (vec_of_bits [B0]  : mword 1)
   end.

Definition bool_bits_backwards (arg_ : mword 1) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B1]  : mword 1))) then true
   else false.

Definition bool_bits_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition bool_bits_backwards_matches (arg_ : mword 1) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B1]  : mword 1))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bool_not_bits_forwards (arg_ : bool) 
: mword 1 :=
   match arg_ with
   | true => (vec_of_bits [B0]  : mword 1)
   | false => (vec_of_bits [B1]  : mword 1)
   end.

Definition bool_not_bits_backwards (arg_ : mword 1) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bool_not_bits_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition bool_not_bits_backwards_matches (arg_ : mword 1) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0]  : mword 1))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1]  : mword 1))) then true
   else false.

Definition size_bits_forwards (arg_ : word_width) 
: mword 2 :=
   match arg_ with
   | BYTE => (vec_of_bits [B0;B0]  : mword 2)
   | HALF => (vec_of_bits [B0;B1]  : mword 2)
   | WORD => (vec_of_bits [B1;B0]  : mword 2)
   | DOUBLE => (vec_of_bits [B1;B1]  : mword 2)
   end.

Definition size_bits_backwards (arg_ : mword 2) 
: word_width :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0]  : mword 2))) then BYTE
   else if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then HALF
   else if ((eq_vec b__0 (vec_of_bits [B1;B0]  : mword 2))) then WORD
   else DOUBLE.

Definition size_bits_forwards_matches (arg_ : word_width) 
: bool :=
   match arg_ with | BYTE => true | HALF => true | WORD => true | DOUBLE => true end.

Definition size_bits_backwards_matches (arg_ : mword 2) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0]  : mword 2))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B0]  : mword 2))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1]  : mword 2))) then true
   else false.

Definition size_mnemonic_forwards (arg_ : word_width) 
: string :=
   match arg_ with | BYTE => "b" | HALF => "h" | WORD => "w" | DOUBLE => "d" end.

Definition size_mnemonic_backwards (arg_ : string) 
: M (word_width) :=
   (match arg_ with
    | "b" => returnm (BYTE  : word_width)
    | "h" => returnm (HALF  : word_width)
    | "w" => returnm (WORD  : word_width)
    | "d" => returnm (DOUBLE  : word_width)
    | _ => exit tt  : M (word_width)
    end)
    : M (word_width).

Definition size_mnemonic_forwards_matches (arg_ : word_width) 
: bool :=
   match arg_ with | BYTE => true | HALF => true | WORD => true | DOUBLE => true end.

Definition size_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "b" => true | "h" => true | "w" => true | "d" => true | _ => false end.

Definition size_mnemonic_matches_prefix (arg_ : string) 
: option ((word_width * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1300_ := arg_ in
   if ((andb (string_startswith _stringappend_1300_ "b")
          (match (string_drop _stringappend_1300_ (build_ex (projT1 (string_length "b")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1300_ (build_ex (projT1 (string_length "b")))) with
     | s_ =>
        Some
          ((BYTE, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                      (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1300_ "h")
               (match (string_drop _stringappend_1300_ (build_ex (projT1 (string_length "h")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1300_ (build_ex (projT1 (string_length "h")))) with
     | s_ =>
        Some
          ((HALF, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                      (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1300_ "w")
               (match (string_drop _stringappend_1300_ (build_ex (projT1 (string_length "w")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1300_ (build_ex (projT1 (string_length "w")))) with
     | s_ =>
        Some
          ((WORD, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                      (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1300_ "d")
               (match (string_drop _stringappend_1300_ (build_ex (projT1 (string_length "d")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1300_ (build_ex (projT1 (string_length "d")))) with
     | s_ =>
        Some
          ((DOUBLE, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                        (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition Mk_Misa (v : mword 64)  : Misa := {| Misa_Misa_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Misa_bits (v : Misa)  : mword 64 := subrange_vec_dec v.(Misa_Misa_chunk_0) 63 0.

Definition _set_Misa_bits (r_ref : register_ref regstate register_value Misa) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_bits (v : Misa) (x : mword 64) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Misa_MXL (v : Misa)  : mword 2 := subrange_vec_dec v.(Misa_Misa_chunk_0) 63 62.

Definition _set_Misa_MXL (r_ref : register_ref regstate register_value Misa) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 63 62 (subrange_vec_dec v 1 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_MXL (v : Misa) (x : mword 2) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 63 62 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Misa_Z (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 25 25.

Definition _set_Misa_Z (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 25 25 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_Z (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 25 25 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_Y (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 24 24.

Definition _set_Misa_Y (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 24 24 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_Y (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 24 24 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_X (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 23 23.

Definition _set_Misa_X (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 23 23 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_X (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 23 23 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_W (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 22 22.

Definition _set_Misa_W (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 22 22 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_W (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 22 22 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_V (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 21 21.

Definition _set_Misa_V (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 21 21 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_V (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 21 21 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_U (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 20 20.

Definition _set_Misa_U (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 20 20 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_U (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 20 20 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_T (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 19 19.

Definition _set_Misa_T (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 19 19 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_T (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 19 19 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_S (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 18 18.

Definition _set_Misa_S (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 18 18 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_S (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 18 18 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_R (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 17 17.

Definition _set_Misa_R (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 17 17 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_R (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 17 17 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_Q (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 16 16.

Definition _set_Misa_Q (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 16 16 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_Q (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 16 16 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_P (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 15 15.

Definition _set_Misa_P (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 15 15 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_P (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 15 15 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_O (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 14 14.

Definition _set_Misa_O (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 14 14 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_O (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 14 14 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_N (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 13 13.

Definition _set_Misa_N (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 13 13 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_N (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 13 13 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_M (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 12 12.

Definition _set_Misa_M (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 12 12 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_M (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 12 12 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_L (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 11 11.

Definition _set_Misa_L (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 11 11 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_L (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 11 11 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_K (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 10 10.

Definition _set_Misa_K (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 10 10 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_K (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 10 10 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_J (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 9 9.

Definition _set_Misa_J (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_J (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_I (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 8 8.

Definition _set_Misa_I (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_I (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_H (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 7 7.

Definition _set_Misa_H (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_H (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_G (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 6 6.

Definition _set_Misa_G (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_G (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_F (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 5 5.

Definition _set_Misa_F (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_F (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_E (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 4 4.

Definition _set_Misa_E (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_E (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_D (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 3 3.

Definition _set_Misa_D (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_D (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_C (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 2 2.

Definition _set_Misa_C (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_C (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_B (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 1 1.

Definition _set_Misa_B (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_B (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_A (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 0 0.

Definition _set_Misa_A (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_A (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_misa (m : Misa) (v : mword 64) 
: M (Misa) :=
   let v := Mk_Misa v in
   and_boolM (returnm ((eq_vec (_get_Misa_C v) ((bool_to_bits false)  : mword 1))  : bool))
     ((read_reg nextPC_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
      bit_to_bool (access_vec_dec w__0 1) >>= fun w__1 : bool =>
      returnm ((Bool.eqb (w__1  : bool) true)
       : bool)) >>= fun w__2 : bool =>
   returnm ((if (w__2) then m
             else _update_Misa_C m (_get_Misa_C v))
    : Misa).

Definition Mk_Mstatus (v : mword 64) 
: Mstatus :=
   {| Mstatus_Mstatus_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Mstatus_bits (v : Mstatus) 
: mword 64 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 63 0.

Definition _set_Mstatus_bits (r_ref : register_ref regstate register_value Mstatus) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_bits (v : Mstatus) (x : mword 64) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Mstatus_SD (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 63 63.

Definition _set_Mstatus_SD (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 63 63 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SD (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 63 63 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_SXL (v : Mstatus) 
: mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 35 34.

Definition _set_Mstatus_SXL (r_ref : register_ref regstate register_value Mstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 35 34 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SXL (v : Mstatus) (x : mword 2) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 35 34 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_UXL (v : Mstatus) 
: mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 33 32.

Definition _set_Mstatus_UXL (r_ref : register_ref regstate register_value Mstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 33 32 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_UXL (v : Mstatus) (x : mword 2) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 33 32 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_TSR (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 22 22.

Definition _set_Mstatus_TSR (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 22 22 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_TSR (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 22 22 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_TW (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 21 21.

Definition _set_Mstatus_TW (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 21 21 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_TW (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 21 21 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_TVM (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 20 20.

Definition _set_Mstatus_TVM (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 20 20 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_TVM (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 20 20 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MXR (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 19 19.

Definition _set_Mstatus_MXR (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 19 19 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MXR (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 19 19 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_SUM (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 18 18.

Definition _set_Mstatus_SUM (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 18 18 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SUM (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 18 18 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MPRV (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 17 17.

Definition _set_Mstatus_MPRV (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 17 17 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MPRV (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 17 17 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_XS (v : Mstatus) 
: mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 16 15.

Definition _set_Mstatus_XS (r_ref : register_ref regstate register_value Mstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 16 15 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_XS (v : Mstatus) (x : mword 2) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 16 15 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_FS (v : Mstatus) 
: mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 14 13.

Definition _set_Mstatus_FS (r_ref : register_ref regstate register_value Mstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 14 13 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_FS (v : Mstatus) (x : mword 2) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 14 13 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_MPP (v : Mstatus) 
: mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 12 11.

Definition _set_Mstatus_MPP (r_ref : register_ref regstate register_value Mstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 12 11 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MPP (v : Mstatus) (x : mword 2) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 12 11 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_SPP (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 8 8.

Definition _set_Mstatus_SPP (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SPP (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MPIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 7 7.

Definition _set_Mstatus_MPIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MPIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_SPIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 5 5.

Definition _set_Mstatus_SPIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SPIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_UPIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 4 4.

Definition _set_Mstatus_UPIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_UPIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 3 3.

Definition _set_Mstatus_MIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_SIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 1 1.

Definition _set_Mstatus_SIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_UIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 0 0.

Definition _set_Mstatus_UIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_UIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_mstatus (o : Mstatus) (v : mword 64) 
: Mstatus :=
   let m : Mstatus := Mk_Mstatus v in
   let m := _update_Mstatus_XS m (extStatus_to_bits Off) in
   let m :=
     _update_Mstatus_SD m
       ((bool_to_bits
           (orb
              (eq_vec ((extStatus_to_bits (extStatus_of_bits (_get_Mstatus_FS m)))  : mword 2)
                 ((extStatus_to_bits Dirty)
                  : mword 2))
              (eq_vec ((extStatus_to_bits (extStatus_of_bits (_get_Mstatus_XS m)))  : mword 2)
                 ((extStatus_to_bits Dirty)
                  : mword 2))))
        : mword 1) in
   let m := _update_Mstatus_SXL m (_get_Mstatus_SXL o) in
   let m := _update_Mstatus_UXL m (_get_Mstatus_UXL o) in
   let m := _update_Mstatus_UPIE m ((bool_to_bits false)  : mword 1) in
   _update_Mstatus_UIE m ((bool_to_bits false)  : mword 1).

Definition cur_Architecture '(tt : unit) 
: M (Architecture) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   match w__0 with
   | Machine => read_reg misa_ref >>= fun w__1 : Misa => returnm ((_get_Misa_MXL w__1)  : mword 2)
   | Supervisor =>
      read_reg mstatus_ref >>= fun w__2 : Mstatus => returnm ((_get_Mstatus_SXL w__2)  : mword 2)
   | User =>
      read_reg mstatus_ref >>= fun w__3 : Mstatus => returnm ((_get_Mstatus_UXL w__3)  : mword 2)
   end >>= fun a : arch_xlen =>
   (match (architecture a) with
    | Some (a) => returnm (a  : Architecture)
    | None => (internal_error "Invalid current architecture")  : M (Architecture)
    end)
    : M (Architecture).

Definition in32BitMode '(tt : unit) 
: M (bool) :=
   cur_Architecture tt >>= fun w__0 : Architecture => returnm ((generic_eq w__0 RV32)  : bool).

Definition haveAtomics '(tt : unit) 
: M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa =>
   returnm ((eq_vec (_get_Misa_A w__0) ((bool_to_bits true)  : mword 1))
    : bool).

Definition haveRVC '(tt : unit) 
: M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa =>
   returnm ((eq_vec (_get_Misa_C w__0) ((bool_to_bits true)  : mword 1))
    : bool).

Definition haveMulDiv '(tt : unit) 
: M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa =>
   returnm ((eq_vec (_get_Misa_M w__0) ((bool_to_bits true)  : mword 1))
    : bool).

Definition haveFP '(tt : unit) 
: M (bool) :=
   (or_boolM
      (read_reg misa_ref >>= fun w__0 : Misa =>
       returnm ((eq_vec (_get_Misa_F w__0) ((bool_to_bits true)  : mword 1))
        : bool))
      (read_reg misa_ref >>= fun w__1 : Misa =>
       returnm ((eq_vec (_get_Misa_D w__1) ((bool_to_bits true)  : mword 1))
        : bool)))
    : M (bool).

Definition Mk_Minterrupts (v : mword 64) 
: Minterrupts :=
   {| Minterrupts_Minterrupts_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Minterrupts_bits (v : Minterrupts) 
: mword 64 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 63 0.

Definition _set_Minterrupts_bits (r_ref : register_ref regstate register_value Minterrupts) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_bits (v : Minterrupts) (x : mword 64) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Minterrupts_MEI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 11 11.

Definition _set_Minterrupts_MEI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 11 11 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_MEI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 11 11 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_SEI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 9 9.

Definition _set_Minterrupts_SEI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_SEI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_UEI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 8 8.

Definition _set_Minterrupts_UEI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_UEI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_MTI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 7 7.

Definition _set_Minterrupts_MTI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_MTI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_STI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 5 5.

Definition _set_Minterrupts_STI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_STI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_UTI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 4 4.

Definition _set_Minterrupts_UTI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_UTI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_MSI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 3 3.

Definition _set_Minterrupts_MSI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_MSI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_SSI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 1 1.

Definition _set_Minterrupts_SSI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_SSI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_USI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 0 0.

Definition _set_Minterrupts_USI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_USI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_mip (o : Minterrupts) (v : mword 64) 
: Minterrupts :=
   let v := Mk_Minterrupts v in
   let m := _update_Minterrupts_SEI o (_get_Minterrupts_SEI v) in
   let m := _update_Minterrupts_STI m (_get_Minterrupts_STI v) in
   _update_Minterrupts_SSI m (_get_Minterrupts_SSI v).

Definition legalize_mie (o : Minterrupts) (v : mword 64) 
: Minterrupts :=
   let v := Mk_Minterrupts v in
   let m := _update_Minterrupts_MEI o (_get_Minterrupts_MEI v) in
   let m := _update_Minterrupts_MTI m (_get_Minterrupts_MTI v) in
   let m := _update_Minterrupts_MSI m (_get_Minterrupts_MSI v) in
   let m := _update_Minterrupts_SEI m (_get_Minterrupts_SEI v) in
   let m := _update_Minterrupts_STI m (_get_Minterrupts_STI v) in
   _update_Minterrupts_SSI m (_get_Minterrupts_SSI v).

Definition legalize_mideleg (o : Minterrupts) (v : mword 64) 
: Minterrupts :=
   let m := Mk_Minterrupts v in
   let m := _update_Minterrupts_MEI m ((bool_to_bits false)  : mword 1) in
   let m := _update_Minterrupts_MTI m ((bool_to_bits false)  : mword 1) in
   _update_Minterrupts_MSI m ((bool_to_bits false)  : mword 1).

Definition Mk_Medeleg (v : mword 64) 
: Medeleg :=
   {| Medeleg_Medeleg_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Medeleg_bits (v : Medeleg) 
: mword 64 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 63 0.

Definition _set_Medeleg_bits (r_ref : register_ref regstate register_value Medeleg) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_bits (v : Medeleg) (x : mword 64) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Medeleg_SAMO_Page_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 15 15.

Definition _set_Medeleg_SAMO_Page_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 15 15 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SAMO_Page_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 15 15 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Load_Page_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 13 13.

Definition _set_Medeleg_Load_Page_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 13 13 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Load_Page_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 13 13 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Fetch_Page_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 12 12.

Definition _set_Medeleg_Fetch_Page_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 12 12 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Fetch_Page_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 12 12 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_MEnvCall (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 10 10.

Definition _set_Medeleg_MEnvCall (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 10 10 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_MEnvCall (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 10 10 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_SEnvCall (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 9 9.

Definition _set_Medeleg_SEnvCall (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SEnvCall (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_UEnvCall (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 8 8.

Definition _set_Medeleg_UEnvCall (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_UEnvCall (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_SAMO_Access_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 7 7.

Definition _set_Medeleg_SAMO_Access_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SAMO_Access_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_SAMO_Addr_Align (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 6 6.

Definition _set_Medeleg_SAMO_Addr_Align (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SAMO_Addr_Align (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Load_Access_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 5 5.

Definition _set_Medeleg_Load_Access_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Load_Access_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Load_Addr_Align (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 4 4.

Definition _set_Medeleg_Load_Addr_Align (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Load_Addr_Align (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Breakpoint (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 3 3.

Definition _set_Medeleg_Breakpoint (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Breakpoint (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Illegal_Instr (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 2 2.

Definition _set_Medeleg_Illegal_Instr (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Illegal_Instr (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Fetch_Access_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 1 1.

Definition _set_Medeleg_Fetch_Access_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Fetch_Access_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Fetch_Addr_Align (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 0 0.

Definition _set_Medeleg_Fetch_Addr_Align (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Fetch_Addr_Align (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_medeleg (o : Medeleg) (v : mword 64) 
: Medeleg :=
   let m := Mk_Medeleg v in
   _update_Medeleg_MEnvCall m ((bool_to_bits false)  : mword 1).

Definition Mk_Mtvec (v : mword 64) 
: Mtvec :=
   {| Mtvec_Mtvec_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Mtvec_bits (v : Mtvec)  : mword 64 := subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 63 0.

Definition _set_Mtvec_bits (r_ref : register_ref regstate register_value Mtvec) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mtvec_Mtvec_chunk_0 :=
         (update_subrange_vec_dec r.(Mtvec_Mtvec_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Mtvec in
   write_reg r_ref r
    : M (unit).

Definition _update_Mtvec_bits (v : Mtvec) (x : mword 64) 
: Mtvec :=
   {[ v with
     Mtvec_Mtvec_chunk_0 :=
       (update_subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Mtvec_Base (v : Mtvec)  : mword 62 := subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 63 2.

Definition _set_Mtvec_Base (r_ref : register_ref regstate register_value Mtvec) (v : mword 62) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mtvec_Mtvec_chunk_0 :=
         (update_subrange_vec_dec r.(Mtvec_Mtvec_chunk_0) 63 2 (subrange_vec_dec v 61 0)) ]}
      : Mtvec in
   write_reg r_ref r
    : M (unit).

Definition _update_Mtvec_Base (v : Mtvec) (x : mword 62) 
: Mtvec :=
   {[ v with
     Mtvec_Mtvec_chunk_0 :=
       (update_subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 63 2 (subrange_vec_dec x 61 0)) ]}.

Definition _get_Mtvec_Mode (v : Mtvec)  : mword 2 := subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 1 0.

Definition _set_Mtvec_Mode (r_ref : register_ref regstate register_value Mtvec) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mtvec_Mtvec_chunk_0 :=
         (update_subrange_vec_dec r.(Mtvec_Mtvec_chunk_0) 1 0 (subrange_vec_dec v 1 0)) ]}
      : Mtvec in
   write_reg r_ref r
    : M (unit).

Definition _update_Mtvec_Mode (v : Mtvec) (x : mword 2) 
: Mtvec :=
   {[ v with
     Mtvec_Mtvec_chunk_0 :=
       (update_subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 1 0 (subrange_vec_dec x 1 0)) ]}.

Definition legalize_tvec (o : Mtvec) (v : mword 64) 
: Mtvec :=
   let v := Mk_Mtvec v in
   match (trapVectorMode_of_bits (_get_Mtvec_Mode v)) with
   | TV_Direct => v
   | TV_Vector => v
   | _ => _update_Mtvec_Mode v (_get_Mtvec_Mode o)
   end.

Definition Mk_Mcause (v : mword 64) 
: Mcause :=
   {| Mcause_Mcause_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Mcause_bits (v : Mcause) 
: mword 64 :=
   subrange_vec_dec v.(Mcause_Mcause_chunk_0) 63 0.

Definition _set_Mcause_bits (r_ref : register_ref regstate register_value Mcause) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mcause_Mcause_chunk_0 :=
         (update_subrange_vec_dec r.(Mcause_Mcause_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Mcause in
   write_reg r_ref r
    : M (unit).

Definition _update_Mcause_bits (v : Mcause) (x : mword 64) 
: Mcause :=
   {[ v with
     Mcause_Mcause_chunk_0 :=
       (update_subrange_vec_dec v.(Mcause_Mcause_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Mcause_IsInterrupt (v : Mcause) 
: mword 1 :=
   subrange_vec_dec v.(Mcause_Mcause_chunk_0) 63 63.

Definition _set_Mcause_IsInterrupt (r_ref : register_ref regstate register_value Mcause) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mcause_Mcause_chunk_0 :=
         (update_subrange_vec_dec r.(Mcause_Mcause_chunk_0) 63 63 (subrange_vec_dec v 0 0)) ]}
      : Mcause in
   write_reg r_ref r
    : M (unit).

Definition _update_Mcause_IsInterrupt (v : Mcause) (x : mword 1) 
: Mcause :=
   {[ v with
     Mcause_Mcause_chunk_0 :=
       (update_subrange_vec_dec v.(Mcause_Mcause_chunk_0) 63 63 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mcause_Cause (v : Mcause) 
: mword 63 :=
   subrange_vec_dec v.(Mcause_Mcause_chunk_0) 62 0.

Definition _set_Mcause_Cause (r_ref : register_ref regstate register_value Mcause) (v : mword 63) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mcause_Mcause_chunk_0 :=
         (update_subrange_vec_dec r.(Mcause_Mcause_chunk_0) 62 0 (subrange_vec_dec v 62 0)) ]}
      : Mcause in
   write_reg r_ref r
    : M (unit).

Definition _update_Mcause_Cause (v : Mcause) (x : mword 63) 
: Mcause :=
   {[ v with
     Mcause_Mcause_chunk_0 :=
       (update_subrange_vec_dec v.(Mcause_Mcause_chunk_0) 62 0 (subrange_vec_dec x 62 0)) ]}.

Definition tvec_addr (m : Mtvec) (c : Mcause) 
: option (mword 64) :=
   let base : xlenbits := concat_vec (_get_Mtvec_Base m) (vec_of_bits [B0;B0]  : mword 2) in
   match (trapVectorMode_of_bits (_get_Mtvec_Mode m)) with
   | TV_Direct => Some (base)
   | TV_Vector =>
      if ((eq_vec (_get_Mcause_IsInterrupt c) ((bool_to_bits true)  : mword 1))) then
        Some
          (add_vec base
             (shift_bits_left (EXTZ 64 (_get_Mcause_Cause c)) (vec_of_bits [B1;B0]  : mword 2)))
      else Some (base)
   | TV_Reserved => None
   end.

Definition legalize_xepc (v : mword 64) 
: M (mword 64) :=
   haveRVC tt >>= fun w__0 : bool =>
   returnm ((and_vec v
               (EXTS 64
                  (if (w__0) then (vec_of_bits [B1;B1;B0]  : mword 3)
                   else (vec_of_bits [B1;B0;B0]  : mword 3))))
    : mword 64).

Definition pc_alignment_mask '(tt : unit) 
: M (mword 64) :=
   read_reg misa_ref >>= fun w__0 : Misa =>
   returnm ((not_vec
               (EXTZ 64
                  (if ((eq_vec (_get_Misa_C w__0) ((bool_to_bits true)  : mword 1))) then
                     (vec_of_bits [B0;B0]  : mword 2)
                   else (vec_of_bits [B1;B0]  : mword 2))))
    : mword 64).

Definition Mk_Counteren (v : mword 32) 
: Counteren :=
   {| Counteren_Counteren_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Counteren_bits (v : Counteren) 
: mword 32 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 0.

Definition _set_Counteren_bits (r_ref : register_ref regstate register_value Counteren) (v : mword 32) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_bits (v : Counteren) (x : mword 32) 
: Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Counteren_HPM (v : Counteren) 
: mword 29 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 3.

Definition _set_Counteren_HPM (r_ref : register_ref regstate register_value Counteren) (v : mword 29) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 31 3 (subrange_vec_dec v 28 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_HPM (v : Counteren) (x : mword 29) 
: Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 3 (subrange_vec_dec x 28 0)) ]}.

Definition _get_Counteren_IR (v : Counteren) 
: mword 1 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 2 2.

Definition _set_Counteren_IR (r_ref : register_ref regstate register_value Counteren) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_IR (v : Counteren) (x : mword 1) 
: Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Counteren_TM (v : Counteren) 
: mword 1 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 1 1.

Definition _set_Counteren_TM (r_ref : register_ref regstate register_value Counteren) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_TM (v : Counteren) (x : mword 1) 
: Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Counteren_CY (v : Counteren) 
: mword 1 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 0 0.

Definition _set_Counteren_CY (r_ref : register_ref regstate register_value Counteren) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_CY (v : Counteren) (x : mword 1) 
: Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_mcounteren (c : Counteren) (v : mword 64) 
: M (Counteren) :=
   cast_unit_vec (access_vec_dec v 2) >>= fun w__0 : mword 1 =>
   let c := _update_Counteren_IR c (w__0  : mword 1) in
   cast_unit_vec (access_vec_dec v 1) >>= fun w__1 : mword 1 =>
   let c := _update_Counteren_TM c (w__1  : mword 1) in
   cast_unit_vec (access_vec_dec v 0) >>= fun w__2 : mword 1 =>
   let c := _update_Counteren_CY c (w__2  : mword 1) in
   returnm (c
    : Counteren).

Definition legalize_scounteren (c : Counteren) (v : mword 64) 
: M (Counteren) :=
   cast_unit_vec (access_vec_dec v 2) >>= fun w__0 : mword 1 =>
   let c := _update_Counteren_IR c (w__0  : mword 1) in
   cast_unit_vec (access_vec_dec v 1) >>= fun w__1 : mword 1 =>
   let c := _update_Counteren_TM c (w__1  : mword 1) in
   cast_unit_vec (access_vec_dec v 0) >>= fun w__2 : mword 1 =>
   let c := _update_Counteren_CY c (w__2  : mword 1) in
   returnm (c
    : Counteren).

Definition retire_instruction '(tt : unit) 
: M (unit) :=
   read_reg minstret_written_ref >>= fun w__0 : bool =>
   (if ((Bool.eqb w__0 true)) then write_reg minstret_written_ref false  : M (unit)
    else
      (read_reg minstret_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
      write_reg minstret_ref (add_vec_int w__1 1)
       : M (unit))
    : M (unit).

Definition Mk_Sstatus (v : mword 64) 
: Sstatus :=
   {| Sstatus_Sstatus_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Sstatus_bits (v : Sstatus) 
: mword 64 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 63 0.

Definition _set_Sstatus_bits (r_ref : register_ref regstate register_value Sstatus) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_bits (v : Sstatus) (x : mword 64) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Sstatus_SD (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 63 63.

Definition _set_Sstatus_SD (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 63 63 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SD (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 63 63 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_UXL (v : Sstatus) 
: mword 2 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 33 32.

Definition _set_Sstatus_UXL (r_ref : register_ref regstate register_value Sstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 33 32 (subrange_vec_dec v 1 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_UXL (v : Sstatus) (x : mword 2) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 33 32 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Sstatus_MXR (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 19 19.

Definition _set_Sstatus_MXR (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 19 19 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_MXR (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 19 19 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_SUM (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 18 18.

Definition _set_Sstatus_SUM (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 18 18 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SUM (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 18 18 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_XS (v : Sstatus) 
: mword 2 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 16 15.

Definition _set_Sstatus_XS (r_ref : register_ref regstate register_value Sstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 16 15 (subrange_vec_dec v 1 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_XS (v : Sstatus) (x : mword 2) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 16 15 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Sstatus_FS (v : Sstatus) 
: mword 2 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 14 13.

Definition _set_Sstatus_FS (r_ref : register_ref regstate register_value Sstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 14 13 (subrange_vec_dec v 1 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_FS (v : Sstatus) (x : mword 2) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 14 13 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Sstatus_SPP (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 8 8.

Definition _set_Sstatus_SPP (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SPP (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_SPIE (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 5 5.

Definition _set_Sstatus_SPIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SPIE (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_UPIE (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 4 4.

Definition _set_Sstatus_UPIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_UPIE (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_SIE (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 1 1.

Definition _set_Sstatus_SIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SIE (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_UIE (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 0 0.

Definition _set_Sstatus_UIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_UIE (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition lower_mstatus (m : Mstatus) 
: Sstatus :=
   let s := Mk_Sstatus (EXTZ 64 (vec_of_bits [B0]  : mword 1)) in
   let s := _update_Sstatus_SD s (_get_Mstatus_SD m) in
   let s := _update_Sstatus_UXL s (_get_Mstatus_UXL m) in
   let s := _update_Sstatus_MXR s (_get_Mstatus_MXR m) in
   let s := _update_Sstatus_SUM s (_get_Mstatus_SUM m) in
   let s := _update_Sstatus_XS s (_get_Mstatus_XS m) in
   let s := _update_Sstatus_FS s (_get_Mstatus_FS m) in
   let s := _update_Sstatus_SPP s (_get_Mstatus_SPP m) in
   let s := _update_Sstatus_SPIE s (_get_Mstatus_SPIE m) in
   let s := _update_Sstatus_UPIE s (_get_Mstatus_UPIE m) in
   let s := _update_Sstatus_SIE s (_get_Mstatus_SIE m) in
   _update_Sstatus_UIE s (_get_Mstatus_UIE m).

Definition lift_sstatus (m : Mstatus) (s : Sstatus) 
: Mstatus :=
   let m := _update_Mstatus_SD m (_get_Sstatus_SD s) in
   let m := _update_Mstatus_MXR m (_get_Sstatus_MXR s) in
   let m := _update_Mstatus_SUM m (_get_Sstatus_SUM s) in
   let m := _update_Mstatus_XS m (_get_Sstatus_XS s) in
   let m := _update_Mstatus_FS m (_get_Sstatus_FS s) in
   let m := _update_Mstatus_SPP m (_get_Sstatus_SPP s) in
   let m := _update_Mstatus_SPIE m (_get_Sstatus_SPIE s) in
   let m := _update_Mstatus_UPIE m (_get_Sstatus_UPIE s) in
   let m := _update_Mstatus_SIE m (_get_Sstatus_SIE s) in
   _update_Mstatus_UIE m (_get_Sstatus_UIE s).

Definition legalize_sstatus (m : Mstatus) (v : mword 64) 
: Mstatus :=
   lift_sstatus m (Mk_Sstatus v).

Definition Mk_Sedeleg (v : mword 64) 
: Sedeleg :=
   {| Sedeleg_Sedeleg_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Sedeleg_bits (v : Sedeleg) 
: mword 64 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 63 0.

Definition _set_Sedeleg_bits (r_ref : register_ref regstate register_value Sedeleg) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_bits (v : Sedeleg) (x : mword 64) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Sedeleg_UEnvCall (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 8 8.

Definition _set_Sedeleg_UEnvCall (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_UEnvCall (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_SAMO_Access_Fault (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 7 7.

Definition _set_Sedeleg_SAMO_Access_Fault (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_SAMO_Access_Fault (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_SAMO_Addr_Align (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 6 6.

Definition _set_Sedeleg_SAMO_Addr_Align (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_SAMO_Addr_Align (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Load_Access_Fault (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 5 5.

Definition _set_Sedeleg_Load_Access_Fault (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Load_Access_Fault (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Load_Addr_Align (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 4 4.

Definition _set_Sedeleg_Load_Addr_Align (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Load_Addr_Align (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Breakpoint (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 3 3.

Definition _set_Sedeleg_Breakpoint (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Breakpoint (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Illegal_Instr (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 2 2.

Definition _set_Sedeleg_Illegal_Instr (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Illegal_Instr (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Fetch_Access_Fault (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 1 1.

Definition _set_Sedeleg_Fetch_Access_Fault (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Fetch_Access_Fault (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Fetch_Addr_Align (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 0 0.

Definition _set_Sedeleg_Fetch_Addr_Align (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Fetch_Addr_Align (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_sedeleg (s : Sedeleg) (v : mword 64) 
: Sedeleg :=
   Mk_Sedeleg (EXTZ 64 (subrange_vec_dec v 8 0)).

Definition Mk_Sinterrupts (v : mword 64) 
: Sinterrupts :=
   {| Sinterrupts_Sinterrupts_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Sinterrupts_bits (v : Sinterrupts) 
: mword 64 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 63 0.

Definition _set_Sinterrupts_bits (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_bits (v : Sinterrupts) (x : mword 64) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Sinterrupts_SEI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 9 9.

Definition _set_Sinterrupts_SEI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_SEI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_UEI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 8 8.

Definition _set_Sinterrupts_UEI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_UEI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_STI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 5 5.

Definition _set_Sinterrupts_STI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_STI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_UTI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 4 4.

Definition _set_Sinterrupts_UTI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_UTI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_SSI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 1 1.

Definition _set_Sinterrupts_SSI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_SSI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_USI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 0 0.

Definition _set_Sinterrupts_USI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_USI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition lower_mip (m : Minterrupts) (d : Minterrupts) 
: Sinterrupts :=
   let s : Sinterrupts := Mk_Sinterrupts (EXTZ 64 (vec_of_bits [B0]  : mword 1)) in
   let s := _update_Sinterrupts_SEI s (and_vec (_get_Minterrupts_SEI m) (_get_Minterrupts_SEI d)) in
   let s := _update_Sinterrupts_STI s (and_vec (_get_Minterrupts_STI m) (_get_Minterrupts_STI d)) in
   let s := _update_Sinterrupts_SSI s (and_vec (_get_Minterrupts_SSI m) (_get_Minterrupts_SSI d)) in
   let s := _update_Sinterrupts_UEI s (and_vec (_get_Minterrupts_UEI m) (_get_Minterrupts_UEI d)) in
   let s := _update_Sinterrupts_UTI s (and_vec (_get_Minterrupts_UTI m) (_get_Minterrupts_UTI d)) in
   _update_Sinterrupts_USI s (and_vec (_get_Minterrupts_USI m) (_get_Minterrupts_USI d)).

Definition lower_mie (m : Minterrupts) (d : Minterrupts) 
: Sinterrupts :=
   let s : Sinterrupts := Mk_Sinterrupts (EXTZ 64 (vec_of_bits [B0]  : mword 1)) in
   let s := _update_Sinterrupts_SEI s (and_vec (_get_Minterrupts_SEI m) (_get_Minterrupts_SEI d)) in
   let s := _update_Sinterrupts_STI s (and_vec (_get_Minterrupts_STI m) (_get_Minterrupts_STI d)) in
   let s := _update_Sinterrupts_SSI s (and_vec (_get_Minterrupts_SSI m) (_get_Minterrupts_SSI d)) in
   let s := _update_Sinterrupts_UEI s (and_vec (_get_Minterrupts_UEI m) (_get_Minterrupts_UEI d)) in
   let s := _update_Sinterrupts_UTI s (and_vec (_get_Minterrupts_UTI m) (_get_Minterrupts_UTI d)) in
   _update_Sinterrupts_USI s (and_vec (_get_Minterrupts_USI m) (_get_Minterrupts_USI d)).

Definition lift_sip (o : Minterrupts) (d : Minterrupts) (s : Sinterrupts) 
: Minterrupts :=
   let m : Minterrupts := o in
   let m := _update_Minterrupts_SSI m (and_vec (_get_Sinterrupts_SSI s) (_get_Minterrupts_SSI d)) in
   let m := _update_Minterrupts_UEI m (and_vec (_get_Minterrupts_UEI m) (_get_Minterrupts_UEI d)) in
   _update_Minterrupts_USI m (and_vec (_get_Minterrupts_USI m) (_get_Minterrupts_USI d)).

Definition legalize_sip (m : Minterrupts) (d : Minterrupts) (v : mword 64) 
: Minterrupts :=
   lift_sip m d (Mk_Sinterrupts v).

Definition lift_sie (o : Minterrupts) (d : Minterrupts) (s : Sinterrupts) 
: Minterrupts :=
   let m : Minterrupts := o in
   let m :=
     if ((eq_vec (_get_Minterrupts_SEI d) ((bool_to_bits true)  : mword 1))) then
       _update_Minterrupts_SEI m (_get_Sinterrupts_SEI s)
     else m in
   let m :=
     if ((eq_vec (_get_Minterrupts_STI d) ((bool_to_bits true)  : mword 1))) then
       _update_Minterrupts_STI m (_get_Sinterrupts_STI s)
     else m in
   let m :=
     if ((eq_vec (_get_Minterrupts_SSI d) ((bool_to_bits true)  : mword 1))) then
       _update_Minterrupts_SSI m (_get_Sinterrupts_SSI s)
     else m in
   let m :=
     if ((eq_vec (_get_Minterrupts_UEI d) ((bool_to_bits true)  : mword 1))) then
       _update_Minterrupts_UEI m (_get_Sinterrupts_UEI s)
     else m in
   let m :=
     if ((eq_vec (_get_Minterrupts_UTI d) ((bool_to_bits true)  : mword 1))) then
       _update_Minterrupts_UTI m (_get_Sinterrupts_UTI s)
     else m in
   if ((eq_vec (_get_Minterrupts_USI d) ((bool_to_bits true)  : mword 1))) then
     _update_Minterrupts_USI m (_get_Sinterrupts_USI s)
   else m.

Definition legalize_sie (m : Minterrupts) (d : Minterrupts) (v : mword 64) 
: Minterrupts :=
   lift_sie m d (Mk_Sinterrupts v).

Definition Mk_Satp64 (v : mword 64) 
: Satp64 :=
   {| Satp64_Satp64_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Satp64_bits (v : Satp64) 
: mword 64 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 0.

Definition _set_Satp64_bits (r_ref : register_ref regstate register_value Satp64) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_bits (v : Satp64) (x : mword 64) 
: Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Satp64_Mode (v : Satp64) 
: mword 4 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 60.

Definition _set_Satp64_Mode (r_ref : register_ref regstate register_value Satp64) (v : mword 4) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 63 60 (subrange_vec_dec v 3 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_Mode (v : Satp64) (x : mword 4) 
: Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 60 (subrange_vec_dec x 3 0)) ]}.

Definition _get_Satp64_Asid (v : Satp64) 
: mword 16 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 59 44.

Definition _set_Satp64_Asid (r_ref : register_ref regstate register_value Satp64) (v : mword 16) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 59 44 (subrange_vec_dec v 15 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_Asid (v : Satp64) (x : mword 16) 
: Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 59 44 (subrange_vec_dec x 15 0)) ]}.

Definition _get_Satp64_PPN (v : Satp64) 
: mword 44 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 43 0.

Definition _set_Satp64_PPN (r_ref : register_ref regstate register_value Satp64) (v : mword 44) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 43 0 (subrange_vec_dec v 43 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_PPN (v : Satp64) (x : mword 44) 
: Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 43 0 (subrange_vec_dec x 43 0)) ]}.

Definition legalize_satp (a : Architecture) (o : mword 64) (v : mword 64) 
: mword 64 :=
   let s := Mk_Satp64 v in
   match (satpMode_of_bits a (_get_Satp64_Mode s)) with
   | None => o
   | Some (Sv32) => o
   | Some (_) => _get_Satp64_bits s
   end.

Definition csr_name (csr : mword 12) 
: string :=
   let b__0 := csr in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then "ustatus"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "uie"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "utvec"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "fflags"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "frm"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "fcsr"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "cycle"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "time"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "instret"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "cycleh"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "timeh"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "instreth"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "sstatus"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "sedeleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "sideleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "sie"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "stvec"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     "scounteren"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "sscratch"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "sepc"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "scause"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "stval"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "sip"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "satp"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12))) then
     "mvendorid"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12))) then
     "marchid"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12))) then
     "mimpid"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12))) then
     "mhartid"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mstatus"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "misa"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "medeleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "mideleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "mie"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "mtvec"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     "mcounteren"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mscratch"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "mepc"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "mcause"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "mtval"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "mip"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     "pmpcfg0"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then
     "pmpaddr0"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mcycle"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "minstret"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mcycleh"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "minstreth"
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     "tselect"
   else "UNKNOWN".

Definition csr_name_map_forwards (arg_ : mword 12) 
: string :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then "ustatus"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "uie"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "utvec"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "uscratch"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "uepc"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "ucause"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "utval"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "uip"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "fflags"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "frm"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "fcsr"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "cycle"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "time"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "instret"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "cycleh"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "timeh"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "instreth"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "sstatus"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "sedeleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "sideleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "sie"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "stvec"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     "scounteren"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "sscratch"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "sepc"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "scause"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "stval"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "sip"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "satp"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12))) then
     "mvendorid"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12))) then
     "marchid"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12))) then
     "mimpid"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12))) then
     "mhartid"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mstatus"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "misa"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "medeleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "mideleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "mie"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "mtvec"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     "mcounteren"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mscratch"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "mepc"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "mcause"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "mtval"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "mip"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     "pmpcfg0"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12))) then
     "pmpcfg1"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12))) then
     "pmpcfg2"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12))) then
     "pmpcfg3"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then
     "pmpaddr0"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  : mword 12))) then
     "pmpaddr1"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  : mword 12))) then
     "pmpaddr2"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  : mword 12))) then
     "pmpaddr3"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  : mword 12))) then
     "pmpaddr4"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  : mword 12))) then
     "pmpaddr5"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  : mword 12))) then
     "pmpaddr6"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  : mword 12))) then
     "pmpaddr7"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  : mword 12))) then
     "pmpaddr8"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  : mword 12))) then
     "pmpaddr9"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  : mword 12))) then
     "pmpaddr10"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  : mword 12))) then
     "pmpaddr11"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  : mword 12))) then
     "pmpaddr12"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  : mword 12))) then
     "pmpaddr13"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  : mword 12))) then
     "pmpaddr14"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  : mword 12))) then
     "pmpaddr15"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mcycle"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "minstret"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mcycleh"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "minstreth"
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     "tselect"
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12))) then
     "tdata1"
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12))) then
     "tdata2"
   else "tdata3".

Definition csr_name_map_backwards (arg_ : string) 
: M (mword 12) :=
   (match arg_ with
    | "ustatus" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "uie" => returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "utvec" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12)  : mword 12)
    | "uscratch" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "uepc" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "ucause" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "utval" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "uip" => returnm ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "fflags" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "frm" => returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "fcsr" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "cycle" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "time" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "instret" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "cycleh" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "timeh" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "instreth" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "sstatus" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "sedeleg" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "sideleg" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "sie" => returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "stvec" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12)  : mword 12)
    | "scounteren" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12)  : mword 12)
    | "sscratch" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "sepc" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "scause" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "stval" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "sip" => returnm ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "satp" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "mvendorid" =>
       returnm ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "marchid" =>
       returnm ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "mimpid" =>
       returnm ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "mhartid" =>
       returnm ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "mstatus" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "misa" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "medeleg" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "mideleg" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "mie" => returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "mtvec" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12)  : mword 12)
    | "mcounteren" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12)  : mword 12)
    | "mscratch" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "mepc" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "mcause" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "mtval" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "mip" => returnm ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "pmpcfg0" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "pmpcfg1" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "pmpcfg2" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "pmpcfg3" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "pmpaddr0" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "pmpaddr1" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "pmpaddr2" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "pmpaddr3" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "pmpaddr4" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "pmpaddr5" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  : mword 12)  : mword 12)
    | "pmpaddr6" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  : mword 12)  : mword 12)
    | "pmpaddr7" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  : mword 12)  : mword 12)
    | "pmpaddr8" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  : mword 12)  : mword 12)
    | "pmpaddr9" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  : mword 12)  : mword 12)
    | "pmpaddr10" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  : mword 12)  : mword 12)
    | "pmpaddr11" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  : mword 12)  : mword 12)
    | "pmpaddr12" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  : mword 12)  : mword 12)
    | "pmpaddr13" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  : mword 12)  : mword 12)
    | "pmpaddr14" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  : mword 12)  : mword 12)
    | "pmpaddr15" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  : mword 12)  : mword 12)
    | "mcycle" =>
       returnm ((vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "minstret" =>
       returnm ((vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "mcycleh" =>
       returnm ((vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "minstreth" =>
       returnm ((vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "tselect" =>
       returnm ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "tdata1" =>
       returnm ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "tdata2" =>
       returnm ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "tdata3" =>
       returnm ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | _ => exit tt  : M (mword 12)
    end)
    : M (mword 12).

Definition csr_name_map_forwards_matches (arg_ : mword 12) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12))) then true
   else false.

Definition csr_name_map_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "ustatus" => true
   | "uie" => true
   | "utvec" => true
   | "uscratch" => true
   | "uepc" => true
   | "ucause" => true
   | "utval" => true
   | "uip" => true
   | "fflags" => true
   | "frm" => true
   | "fcsr" => true
   | "cycle" => true
   | "time" => true
   | "instret" => true
   | "cycleh" => true
   | "timeh" => true
   | "instreth" => true
   | "sstatus" => true
   | "sedeleg" => true
   | "sideleg" => true
   | "sie" => true
   | "stvec" => true
   | "scounteren" => true
   | "sscratch" => true
   | "sepc" => true
   | "scause" => true
   | "stval" => true
   | "sip" => true
   | "satp" => true
   | "mvendorid" => true
   | "marchid" => true
   | "mimpid" => true
   | "mhartid" => true
   | "mstatus" => true
   | "misa" => true
   | "medeleg" => true
   | "mideleg" => true
   | "mie" => true
   | "mtvec" => true
   | "mcounteren" => true
   | "mscratch" => true
   | "mepc" => true
   | "mcause" => true
   | "mtval" => true
   | "mip" => true
   | "pmpcfg0" => true
   | "pmpcfg1" => true
   | "pmpcfg2" => true
   | "pmpcfg3" => true
   | "pmpaddr0" => true
   | "pmpaddr1" => true
   | "pmpaddr2" => true
   | "pmpaddr3" => true
   | "pmpaddr4" => true
   | "pmpaddr5" => true
   | "pmpaddr6" => true
   | "pmpaddr7" => true
   | "pmpaddr8" => true
   | "pmpaddr9" => true
   | "pmpaddr10" => true
   | "pmpaddr11" => true
   | "pmpaddr12" => true
   | "pmpaddr13" => true
   | "pmpaddr14" => true
   | "pmpaddr15" => true
   | "mcycle" => true
   | "minstret" => true
   | "mcycleh" => true
   | "minstreth" => true
   | "tselect" => true
   | "tdata1" => true
   | "tdata2" => true
   | "tdata3" => true
   | _ => false
   end.

Definition csr_name_map_matches_prefix (arg_ : string) 
: option ((mword 12 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1227_ := arg_ in
   if ((andb (string_startswith _stringappend_1227_ "ustatus")
          (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "ustatus")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "ustatus")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "uie")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "uie")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "uie")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "utvec")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "utvec")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "utvec")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "uscratch")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "uscratch")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "uscratch")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "uepc")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "uepc")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "uepc")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "ucause")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "ucause")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "ucause")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "utval")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "utval")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "utval")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "uip")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "uip")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "uip")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "fflags")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "fflags")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "fflags")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "frm")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "frm")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "frm")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "fcsr")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "fcsr")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "fcsr")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "cycle")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "cycle")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "cycle")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "time")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "time")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "time")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "instret")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "instret")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "instret")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "cycleh")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "cycleh")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "cycleh")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "timeh")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "timeh")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "timeh")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "instreth")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "instreth")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "instreth")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "sstatus")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sstatus")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sstatus")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "sedeleg")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sedeleg")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sedeleg")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "sideleg")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sideleg")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sideleg")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "sie")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sie")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sie")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "stvec")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "stvec")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "stvec")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "scounteren")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "scounteren")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "scounteren")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "sscratch")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "sscratch")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sscratch")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "sepc")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sepc")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sepc")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "scause")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "scause")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "scause")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "stval")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "stval")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "stval")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "sip")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sip")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "sip")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "satp")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "satp")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "satp")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mvendorid")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "mvendorid")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mvendorid")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "marchid")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "marchid")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "marchid")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mimpid")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mimpid")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mimpid")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mhartid")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mhartid")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mhartid")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mstatus")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mstatus")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mstatus")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "misa")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "misa")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "misa")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "medeleg")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "medeleg")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "medeleg")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mideleg")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mideleg")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mideleg")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mie")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mie")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mie")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mtvec")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mtvec")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mtvec")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mcounteren")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "mcounteren")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mcounteren")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mscratch")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "mscratch")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mscratch")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mepc")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mepc")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mepc")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mcause")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mcause")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mcause")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mtval")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mtval")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mtval")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mip")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mip")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mip")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpcfg0")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpcfg0")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpcfg0")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpcfg1")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpcfg1")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpcfg1")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpcfg2")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpcfg2")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpcfg2")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpcfg3")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpcfg3")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpcfg3")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr0")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr0")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr0")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr1")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr1")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr1")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr2")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr2")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr2")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr3")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr3")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr3")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr4")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr4")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr4")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr5")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr5")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr5")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr6")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr6")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr6")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr7")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr7")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr7")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr8")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr8")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr8")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr9")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr9")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr9")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr10")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr10")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr10")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr11")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr11")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr11")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr12")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr12")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr12")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr13")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr13")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr13")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr14")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr14")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr14")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "pmpaddr15")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "pmpaddr15")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "pmpaddr15")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mcycle")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mcycle")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mcycle")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "minstret")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "minstret")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "minstret")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "mcycleh")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mcycleh")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "mcycleh")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "minstreth")
               (match (string_drop _stringappend_1227_
                         (build_ex (projT1 (string_length "minstreth")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "minstreth")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "tselect")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "tselect")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "tselect")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "tdata1")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "tdata1")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "tdata1")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "tdata2")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "tdata2")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "tdata2")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1227_ "tdata3")
               (match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "tdata3")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1227_ (build_ex (projT1 (string_length "tdata3")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
     end
   else None.

Definition csrAccess (csr : mword 12)  : mword 2 := subrange_vec_dec csr 11 10.

Definition csrPriv (csr : mword 12)  : mword 2 := subrange_vec_dec csr 9 8.

Definition is_CSR_defined (csr : mword 12) (p : Privilege) 
: bool :=
   let b__0 := csr in
   if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then
     false
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else false.

Definition check_CSR_access (csrrw : mword 2) (csrpr : mword 2) (p : Privilege) (isWrite : bool) 
: bool :=
   andb (negb (andb (Bool.eqb isWrite true) (eq_vec csrrw (vec_of_bits [B1;B1]  : mword 2))))
     (zopz0zKzJ_u (privLevel_to_bits p) csrpr).

Definition check_TVM_SATP (csr : mword 12) (p : Privilege) 
: M (bool) :=
   and_boolM
     (returnm ((eq_vec csr (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))
       : bool))
     ((and_boolM
         (returnm ((eq_vec ((privLevel_to_bits p)  : mword 2)
                      ((privLevel_to_bits Supervisor)
                       : mword 2))
           : bool))
         (read_reg mstatus_ref >>= fun w__0 : Mstatus =>
          returnm ((eq_vec (_get_Mstatus_TVM w__0) ((bool_to_bits true)  : mword 1))
           : bool)))
      : M (bool)) >>= fun w__2 : bool =>
   returnm ((negb w__2)
    : bool).

Definition check_Counteren (csr : mword 12) (p : Privilege) 
: M (bool) :=
   (match (csr, p) with
    | (b__0, Supervisor) =>
       (if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
          read_reg mcounteren_ref >>= fun w__0 : Counteren =>
          returnm ((eq_vec (_get_Counteren_CY w__0) ((bool_to_bits true)  : mword 1))
           : bool)
        else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
          read_reg mcounteren_ref >>= fun w__1 : Counteren =>
          returnm ((eq_vec (_get_Counteren_TM w__1) ((bool_to_bits true)  : mword 1))
           : bool)
        else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
          read_reg mcounteren_ref >>= fun w__2 : Counteren =>
          returnm ((eq_vec (_get_Counteren_IR w__2) ((bool_to_bits true)  : mword 1))
           : bool)
        else
          returnm ((match (b__0, Supervisor) with
                    | (g__17, g__18) =>
                       if ((andb
                              (zopz0zIzJ_u
                                 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12) csr)
                              (zopz0zIzJ_u csr
                                 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  : mword 12))))
                       then
                         false
                       else true
                    end)
           : bool))
        : M (bool)
    | (b__3, User) =>
       (if ((eq_vec b__3 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
          read_reg scounteren_ref >>= fun w__6 : Counteren =>
          returnm ((eq_vec (_get_Counteren_CY w__6) ((bool_to_bits true)  : mword 1))
           : bool)
        else if ((eq_vec b__3 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
          read_reg scounteren_ref >>= fun w__7 : Counteren =>
          returnm ((eq_vec (_get_Counteren_TM w__7) ((bool_to_bits true)  : mword 1))
           : bool)
        else if ((eq_vec b__3 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
          read_reg scounteren_ref >>= fun w__8 : Counteren =>
          returnm ((eq_vec (_get_Counteren_IR w__8) ((bool_to_bits true)  : mword 1))
           : bool)
        else
          returnm ((match (b__3, User) with
                    | (g__17, g__18) =>
                       if ((andb
                              (zopz0zIzJ_u
                                 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12) csr)
                              (zopz0zIzJ_u csr
                                 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  : mword 12))))
                       then
                         false
                       else true
                    end)
           : bool))
        : M (bool)
    | (g__17, g__18) =>
       returnm ((if ((andb
                        (zopz0zIzJ_u (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12)
                           csr)
                        (zopz0zIzJ_u csr
                           (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  : mword 12)))) then
                   false
                 else true)
        : bool)
    end)
    : M (bool).

Definition check_CSR (csr : mword 12) (p : Privilege) (isWrite : bool) 
: M (bool) :=
   (and_boolM (returnm ((is_CSR_defined csr p)  : bool))
      ((and_boolM (returnm ((check_CSR_access (csrAccess csr) (csrPriv csr) p isWrite)  : bool))
          ((and_boolM ((check_TVM_SATP csr p)  : M (bool)) ((check_Counteren csr p)  : M (bool)))
           : M (bool)))
       : M (bool)))
    : M (bool).

Axiom load_reservation : forall  (_ : xlenbits) , unit.

Axiom match_reservation : forall  (_ : xlenbits) , M (bool).

Axiom cancel_reservation : forall  (_ : unit) , unit.

Definition exception_delegatee (e : ExceptionType) (p : Privilege) 
: M (Privilege) :=
   let 'idx := projT1 (num_of_ExceptionType e) in
   read_reg medeleg_ref >>= fun w__0 : Medeleg =>
   let super := access_vec_dec (_get_Medeleg_bits w__0) idx in
   read_reg sedeleg_ref >>= fun w__1 : Sedeleg =>
   let user := access_vec_dec (_get_Sedeleg_bits w__1) idx in
   and_boolM
     (read_reg misa_ref >>= fun w__2 : Misa =>
      returnm ((eq_vec (_get_Misa_S w__2) ((bool_to_bits true)  : mword 1))
       : bool)) ((bit_to_bool super)  : M (bool)) >>= fun w__4 : bool =>
   let deleg := if (w__4) then Supervisor else Machine in
   returnm ((if ((zopz0zI_u (privLevel_to_bits deleg) (privLevel_to_bits p))) then p
             else deleg)
    : Privilege).

Definition findPendingInterrupt (ip : mword 64) 
: option InterruptType :=
   let ip := Mk_Minterrupts ip in
   if ((eq_vec (_get_Minterrupts_MEI ip) ((bool_to_bits true)  : mword 1))) then Some (I_M_External)
   else if ((eq_vec (_get_Minterrupts_MSI ip) ((bool_to_bits true)  : mword 1))) then
     Some
       (I_M_Software)
   else if ((eq_vec (_get_Minterrupts_MTI ip) ((bool_to_bits true)  : mword 1))) then
     Some
       (I_M_Timer)
   else if ((eq_vec (_get_Minterrupts_SEI ip) ((bool_to_bits true)  : mword 1))) then
     Some
       (I_S_External)
   else if ((eq_vec (_get_Minterrupts_SSI ip) ((bool_to_bits true)  : mword 1))) then
     Some
       (I_S_Software)
   else if ((eq_vec (_get_Minterrupts_STI ip) ((bool_to_bits true)  : mword 1))) then
     Some
       (I_S_Timer)
   else if ((eq_vec (_get_Minterrupts_UEI ip) ((bool_to_bits true)  : mword 1))) then
     Some
       (I_U_External)
   else if ((eq_vec (_get_Minterrupts_USI ip) ((bool_to_bits true)  : mword 1))) then
     Some
       (I_U_Software)
   else if ((eq_vec (_get_Minterrupts_UTI ip) ((bool_to_bits true)  : mword 1))) then
     Some
       (I_U_Timer)
   else None.

Definition curInterrupt (priv : Privilege) (pend : Minterrupts) (enbl : Minterrupts) (delg : Minterrupts) 
: M (option ((InterruptType * Privilege))) :=
   let en_mip : xlenbits := and_vec (_get_Minterrupts_bits pend) (_get_Minterrupts_bits enbl) in
   (if ((eq_vec en_mip (EXTZ 64 (vec_of_bits [B0]  : mword 1)))) then
      returnm (None
       : option ((InterruptType * Privilege)))
    else
      or_boolM
        (returnm ((neq_vec ((privLevel_to_bits priv)  : mword 2)
                     ((privLevel_to_bits Machine)
                      : mword 2))
          : bool))
        ((and_boolM
            (returnm ((eq_vec ((privLevel_to_bits priv)  : mword 2)
                         ((privLevel_to_bits Machine)
                          : mword 2))
              : bool))
            (read_reg mstatus_ref >>= fun w__0 : Mstatus =>
             returnm ((eq_vec (_get_Mstatus_MIE w__0) ((bool_to_bits true)  : mword 1))
              : bool)))
         : M (bool)) >>= fun eff_mie =>
      or_boolM
        (returnm ((eq_vec ((privLevel_to_bits priv)  : mword 2)
                     ((privLevel_to_bits User)
                      : mword 2))
          : bool))
        ((and_boolM
            (returnm ((eq_vec ((privLevel_to_bits priv)  : mword 2)
                         ((privLevel_to_bits Supervisor)
                          : mword 2))
              : bool))
            (read_reg mstatus_ref >>= fun w__2 : Mstatus =>
             returnm ((eq_vec (_get_Mstatus_SIE w__2) ((bool_to_bits true)  : mword 1))
              : bool)))
         : M (bool)) >>= fun eff_sie =>
      let eff_mip := and_vec en_mip (not_vec (_get_Minterrupts_bits delg)) in
      let eff_sip := and_vec en_mip (_get_Minterrupts_bits delg) in
      (if ((andb eff_mie (neq_vec eff_mip (EXTZ 64 (vec_of_bits [B0]  : mword 1))))) then
         (match (findPendingInterrupt eff_mip) with
          | Some (i) =>
             let r := (i, Machine) in
             returnm ((Some
                         (r))
              : option ((InterruptType * Privilege)))
          | None =>
             (internal_error
                (String.append "non-zero eff_mip="
                   (String.append (string_of_bits eff_mip) ", but nothing pending")))
              : M (option ((InterruptType * Privilege)))
          end)
          : M (option ((InterruptType * Privilege)))
       else if ((andb eff_sie (neq_vec eff_sip (EXTZ 64 (vec_of_bits [B0]  : mword 1))))) then
         (match (findPendingInterrupt eff_sip) with
          | Some (i) =>
             let r := (i, Supervisor) in
             returnm ((Some
                         (r))
              : option ((InterruptType * Privilege)))
          | None =>
             (internal_error
                (String.append "non-zero eff_sip="
                   (String.append (string_of_bits eff_sip) ", but nothing pending")))
              : M (option ((InterruptType * Privilege)))
          end)
          : M (option ((InterruptType * Privilege)))
       else
         let p :=
           if ((eq_vec (_get_Minterrupts_MTI pend) ((bool_to_bits true)  : mword 1))) then "1"
           else "0" in
         let e :=
           if ((eq_vec (_get_Minterrupts_MTI enbl) ((bool_to_bits true)  : mword 1))) then "1"
           else "0" in
         let d :=
           if ((eq_vec (_get_Minterrupts_MTI delg) ((bool_to_bits true)  : mword 1))) then "1"
           else "0" in
         let '_ :=
           (print_endline
              (String.append " MTI: pend="
                 (String.append p
                    (String.append " enbl=" (String.append e (String.append " delg=" d))))))
            : unit in
         let eff_mip := and_vec en_mip (not_vec (_get_Minterrupts_bits delg)) in
         let eff_sip := and_vec en_mip (_get_Minterrupts_bits delg) in
         read_reg mstatus_ref >>= fun w__8 : Mstatus =>
         read_reg mstatus_ref >>= fun w__9 : Mstatus =>
         read_reg mstatus_ref >>= fun w__10 : Mstatus =>
         let '_ :=
           (print_endline
              (String.append "mstatus="
                 (String.append (string_of_bits (_get_Mstatus_bits w__8))
                    (String.append " mie,sie="
                       (String.append (string_of_bits (_get_Mstatus_MIE w__9))
                          (String.append ","
                             (String.append (string_of_bits (_get_Mstatus_SIE w__10))
                                (String.append " en_mip="
                                   (String.append (string_of_bits en_mip)
                                      (String.append " eff_mip="
                                         (String.append (string_of_bits eff_mip)
                                            (String.append " eff_sip=" (string_of_bits eff_sip)))))))))))))
            : unit in
         returnm (None
          : option ((InterruptType * Privilege))))
       : M (option ((InterruptType * Privilege))))
    : M (option ((InterruptType * Privilege))).

Definition tval (excinfo : option (mword 64)) 
: mword 64 :=
   match excinfo with | Some (e) => e | None => EXTZ 64 (vec_of_bits [B0]  : mword 1) end.

Definition handle_trap (del_priv : Privilege) (intr : bool) (c : mword 4) (pc : mword 64) (info : option (mword 64)) 
: M (mword 64) :=
   let '_ :=
     (print_endline
        (String.append "handling "
           (String.append (if (intr) then "int#" else "exc#")
              (String.append (string_of_bits c)
                 (String.append " at priv "
                    (String.append ((privLevel_to_str del_priv)  : string)
                       (String.append " with tval " (string_of_bits (tval info)))))))))
      : unit in
   (match del_priv with
    | Machine =>
       _set_Mcause_IsInterrupt mcause_ref ((bool_to_bits intr)  : mword 1) >>
       _set_Mcause_Cause mcause_ref (EXTZ 63 c) >>
       read_reg mstatus_ref >>= fun w__0 : Mstatus =>
       _set_Mstatus_MPIE mstatus_ref (_get_Mstatus_MIE w__0) >>
       _set_Mstatus_MIE mstatus_ref ((bool_to_bits false)  : mword 1) >>
       read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
       _set_Mstatus_MPP mstatus_ref (privLevel_to_bits w__1) >>
       write_reg mtval_ref (tval info) >>
       write_reg mepc_ref pc >>
       write_reg cur_privilege_ref del_priv >>
       read_reg mstatus_ref >>= fun w__2 : Mstatus =>
       read_reg mstatus_ref >>= fun w__3 : Mstatus =>
       let '_ :=
         (print_endline
            (String.append "CSR mstatus <- "
               (String.append (string_of_bits (_get_Mstatus_bits w__2))
                  (String.append " (input: "
                     (String.append (string_of_bits (_get_Mstatus_bits w__3)) ")")))))
          : unit in
       let '_ := (cancel_reservation tt)  : unit in
       read_reg mtvec_ref >>= fun w__4 : Mtvec =>
       read_reg mcause_ref >>= fun w__5 : Mcause =>
       (match (tvec_addr w__4 w__5) with
        | Some (epc) => returnm (epc  : mword 64)
        | None => (internal_error "Invalid mtvec mode")  : M (mword 64)
        end)
        : M (mword 64)
    | Supervisor =>
       _set_Mcause_IsInterrupt scause_ref ((bool_to_bits intr)  : mword 1) >>
       _set_Mcause_Cause scause_ref (EXTZ 63 c) >>
       read_reg mstatus_ref >>= fun w__8 : Mstatus =>
       _set_Mstatus_SPIE mstatus_ref (_get_Mstatus_SIE w__8) >>
       _set_Mstatus_SIE mstatus_ref ((bool_to_bits false)  : mword 1) >>
       read_reg cur_privilege_ref >>= fun w__9 : Privilege =>
       match w__9 with
       | User => returnm ((bool_to_bits false)  : mword 1)
       | Supervisor => returnm ((bool_to_bits true)  : mword 1)
       | Machine => (internal_error "invalid privilege for s-mode trap")  : M (mword 1)
       end >>= fun w__11 : mword 1 =>
       _set_Mstatus_SPP mstatus_ref w__11 >>
       write_reg stval_ref (tval info) >>
       write_reg sepc_ref pc >>
       write_reg cur_privilege_ref del_priv >>
       read_reg mstatus_ref >>= fun w__12 : Mstatus =>
       read_reg mstatus_ref >>= fun w__13 : Mstatus =>
       let '_ :=
         (print_endline
            (String.append "CSR mstatus <- "
               (String.append (string_of_bits (_get_Mstatus_bits w__12))
                  (String.append " (input: "
                     (String.append (string_of_bits (_get_Mstatus_bits w__13)) ")")))))
          : unit in
       let '_ := (cancel_reservation tt)  : unit in
       read_reg stvec_ref >>= fun w__14 : Mtvec =>
       read_reg scause_ref >>= fun w__15 : Mcause =>
       (match (tvec_addr w__14 w__15) with
        | Some (epc) => returnm (epc  : mword 64)
        | None => (internal_error "Invalid stvec mode")  : M (mword 64)
        end)
        : M (mword 64)
    | User => (internal_error "the N extension is currently unsupported")  : M (mword 64)
    end)
    : M (mword 64).

Definition handle_exception (cur_priv : Privilege) (ctl : ctl_result) (pc : mword 64) 
: M (mword 64) :=
   (match (cur_priv, ctl) with
    | (_, CTL_TRAP (e)) =>
       exception_delegatee e.(sync_exception_trap) cur_priv >>= fun del_priv =>
       let '_ :=
         (print_endline
            (String.append "trapping from "
               (String.append ((privLevel_to_str cur_priv)  : string)
                  (String.append " to "
                     (String.append ((privLevel_to_str del_priv)  : string)
                        (String.append " to handle "
                           ((exceptionType_to_str e.(sync_exception_trap))
                            : string)))))))
          : unit in
       (handle_trap del_priv false ((exceptionType_to_bits e.(sync_exception_trap))  : mword 4) pc
          e.(sync_exception_excinfo))
        : M (mword 64)
    | (_, CTL_MRET (tt)) =>
       read_reg cur_privilege_ref >>= fun prev_priv =>
       read_reg mstatus_ref >>= fun w__1 : Mstatus =>
       _set_Mstatus_MIE mstatus_ref (_get_Mstatus_MPIE w__1) >>
       _set_Mstatus_MPIE mstatus_ref ((bool_to_bits true)  : mword 1) >>
       read_reg mstatus_ref >>= fun w__2 : Mstatus =>
       write_reg cur_privilege_ref (privLevel_of_bits (_get_Mstatus_MPP w__2)) >>
       _set_Mstatus_MPP mstatus_ref (privLevel_to_bits User) >>
       read_reg mstatus_ref >>= fun w__3 : Mstatus =>
       read_reg mstatus_ref >>= fun w__4 : Mstatus =>
       let '_ :=
         (print_endline
            (String.append "CSR mstatus <- "
               (String.append (string_of_bits (_get_Mstatus_bits w__3))
                  (String.append " (input: "
                     (String.append (string_of_bits (_get_Mstatus_bits w__4)) ")")))))
          : unit in
       read_reg cur_privilege_ref >>= fun w__5 : Privilege =>
       let '_ :=
         (print_endline
            (String.append "ret-ing from "
               (String.append ((privLevel_to_str prev_priv)  : string)
                  (String.append " to " ((privLevel_to_str w__5)  : string)))))
          : unit in
       let '_ := (cancel_reservation tt)  : unit in
       (read_reg mepc_ref  : M (mword 64)) >>= fun w__6 : xlenbits =>
       pc_alignment_mask tt >>= fun w__7 : mword 64 => returnm ((and_vec w__6 w__7)  : mword 64)
    | (_, CTL_SRET (tt)) =>
       read_reg cur_privilege_ref >>= fun prev_priv =>
       read_reg mstatus_ref >>= fun w__8 : Mstatus =>
       _set_Mstatus_SIE mstatus_ref (_get_Mstatus_SPIE w__8) >>
       _set_Mstatus_SPIE mstatus_ref ((bool_to_bits true)  : mword 1) >>
       read_reg mstatus_ref >>= fun w__9 : Mstatus =>
       write_reg
         cur_privilege_ref
         (if ((eq_vec (_get_Mstatus_SPP w__9) ((bool_to_bits true)  : mword 1))) then Supervisor
          else User) >>
       _set_Mstatus_SPP mstatus_ref ((bool_to_bits false)  : mword 1) >>
       read_reg mstatus_ref >>= fun w__10 : Mstatus =>
       read_reg mstatus_ref >>= fun w__11 : Mstatus =>
       let '_ :=
         (print_endline
            (String.append "CSR mstatus <- "
               (String.append (string_of_bits (_get_Mstatus_bits w__10))
                  (String.append " (input: "
                     (String.append (string_of_bits (_get_Mstatus_bits w__11)) ")")))))
          : unit in
       read_reg cur_privilege_ref >>= fun w__12 : Privilege =>
       let '_ :=
         (print_endline
            (String.append "ret-ing from "
               (String.append ((privLevel_to_str prev_priv)  : string)
                  (String.append " to " ((privLevel_to_str w__12)  : string)))))
          : unit in
       let '_ := (cancel_reservation tt)  : unit in
       (read_reg sepc_ref  : M (mword 64)) >>= fun w__13 : xlenbits =>
       pc_alignment_mask tt >>= fun w__14 : mword 64 => returnm ((and_vec w__13 w__14)  : mword 64)
    end)
    : M (mword 64).

Definition handle_mem_exception (addr : mword 64) (e : ExceptionType) 
: M (unit) :=
   let t : sync_exception :=
     {| sync_exception_trap := e; 
        sync_exception_excinfo := (Some (addr)) |} in
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (read_reg PC_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
   handle_exception w__0 (CTL_TRAP (t)) w__1 >>= fun w__2 : mword 64 =>
   write_reg nextPC_ref w__2
    : M (unit).

Definition handle_decode_exception (instbits : mword 64) 
: M (unit) :=
   let t : sync_exception :=
     {| sync_exception_trap := E_Illegal_Instr; 
        sync_exception_excinfo := (Some (instbits)) |} in
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (read_reg PC_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
   handle_exception w__0 (CTL_TRAP (t)) w__1 >>= fun w__2 : mword 64 =>
   write_reg nextPC_ref w__2
    : M (unit).

Definition handle_interrupt (i : InterruptType) (del_priv : Privilege) 
: M (unit) :=
   (read_reg PC_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   handle_trap del_priv true ((interruptType_to_bits i)  : mword 4) w__0 None >>= fun w__1 : mword 64 =>
   write_reg nextPC_ref w__1
    : M (unit).

Definition handle_illegal '(tt : unit) 
: M (unit) :=
   let t : sync_exception :=
     {| sync_exception_trap := E_Illegal_Instr; 
        sync_exception_excinfo := None |} in
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (read_reg PC_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
   handle_exception w__0 (CTL_TRAP (t)) w__1 >>= fun w__2 : mword 64 =>
   write_reg nextPC_ref w__2
    : M (unit).

Definition init_sys '(tt : unit) 
: M (unit) :=
   write_reg cur_privilege_ref Machine >>
   write_reg mhartid_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Misa_MXL misa_ref (arch_to_bits RV64) >>
   _set_Misa_A misa_ref ((bool_to_bits true)  : mword 1) >>
   _set_Misa_C misa_ref ((bool_to_bits true)  : mword 1) >>
   _set_Misa_I misa_ref ((bool_to_bits true)  : mword 1) >>
   _set_Misa_M misa_ref ((bool_to_bits true)  : mword 1) >>
   _set_Misa_U misa_ref ((bool_to_bits true)  : mword 1) >>
   _set_Misa_S misa_ref ((bool_to_bits true)  : mword 1) >>
   read_reg misa_ref >>= fun w__0 : Misa =>
   _set_Mstatus_SXL mstatus_ref (_get_Misa_MXL w__0) >>
   read_reg misa_ref >>= fun w__1 : Misa =>
   _set_Mstatus_UXL mstatus_ref (_get_Misa_MXL w__1) >>
   _set_Mstatus_SD mstatus_ref ((bool_to_bits false)  : mword 1) >>
   _set_Minterrupts_bits mip_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Minterrupts_bits mie_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Minterrupts_bits mideleg_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Medeleg_bits medeleg_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Mtvec_bits mtvec_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Mcause_bits mcause_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg mepc_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg mtval_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg mscratch_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg mcycle_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg mtime_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Counteren_bits mcounteren_ref (EXTZ 32 (vec_of_bits [B0]  : mword 1)) >>
   write_reg minstret_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg minstret_written_ref false >>
   read_reg mstatus_ref >>= fun w__2 : Mstatus =>
   returnm ((print_endline
               (String.append "CSR mstatus <- "
                  (String.append (string_of_bits (_get_Mstatus_bits w__2))
                     (String.append " (input: "
                        (String.append
                           (string_of_bits ((EXTZ 64 (vec_of_bits [B0]  : mword 1))  : xlenbits))
                           ")")))))
    : unit).

Axiom plat_ram_base : forall  (_ : unit) , xlenbits.

Axiom plat_ram_size : forall  (_ : unit) , xlenbits.

Axiom plat_enable_dirty_update : forall  (_ : unit) , bool.

Axiom plat_enable_misaligned_access : forall  (_ : unit) , bool.

Axiom plat_rom_base : forall  (_ : unit) , xlenbits.

Axiom plat_rom_size : forall  (_ : unit) , xlenbits.

Axiom plat_clint_base : forall  (_ : unit) , xlenbits.

Axiom plat_clint_size : forall  (_ : unit) , xlenbits.

Axiom plat_htif_tohost : forall  (_ : unit) , xlenbits.

Definition phys_mem_segments '(tt : unit) 
: list ((mword 64 * mword 64)) :=
   (plat_rom_base tt, plat_rom_size tt) :: (plat_ram_base tt, plat_ram_size tt) :: [].

Definition within_phys_mem (addr : mword 64) (width : Z) 
: bool :=
   if ((andb (zopz0zIzJ_u (plat_ram_base tt) addr)
          (zopz0zIzJ_u (add_vec_int addr width) (add_vec (plat_ram_base tt) (plat_ram_size tt)))))
   then
     true
   else if ((andb (zopz0zIzJ_u (plat_rom_base tt) addr)
               (zopz0zIzJ_u (add_vec_int addr width) (add_vec (plat_rom_base tt) (plat_rom_size tt)))))
   then
     true
   else false.

Definition within_clint (addr : mword 64) (width : Z) 
: bool :=
   andb (zopz0zIzJ_u (plat_clint_base tt) addr)
     (zopz0zIzJ_u (add_vec_int addr width) (add_vec (plat_clint_base tt) (plat_clint_size tt))).

Definition within_htif_writable (addr : mword 64) (width : Z) 
: bool :=
   eq_vec (plat_htif_tohost tt) addr.

Definition within_htif_readable (addr : mword 64) (width : Z) 
: bool :=
   eq_vec (plat_htif_tohost tt) addr.

Axiom plat_insns_per_tick : forall  (_ : unit) , Z.

Definition MSIP_BASE : xlenbits :=
(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0]
  : mword 64).
Hint Unfold MSIP_BASE : sail.
Definition MTIMECMP_BASE : xlenbits :=
(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0]
  : mword 64).
Hint Unfold MTIMECMP_BASE : sail.
Definition MTIME_BASE : xlenbits :=
(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B1;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B0;B0;
              B0]
  : mword 64).
Hint Unfold MTIME_BASE : sail.
Definition clint_load (addr : mword 64) (width : Z) `{ArithFact (width >= (0 + 1))} 
: M (MemoryOpResult (mword (8 * width))) :=
   let addr := sub_vec addr (plat_clint_base tt) in
   (if sumbool_of_bool ((andb (eq_vec addr MSIP_BASE) (orb (Z.eqb width 8) (Z.eqb width 4)))) then
      read_reg mip_ref >>= fun w__0 : Minterrupts =>
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr)
                 (String.append "] -> " (string_of_bits (_get_Minterrupts_MSI w__0))))))
         : unit in
      read_reg mip_ref >>= fun w__1 : Minterrupts =>
      returnm ((MemValue
                  (autocast (zero_extend (_get_Minterrupts_MSI w__1) (Z.mul 8 width))))
       : MemoryOpResult (mword (8 * width)))
    else if sumbool_of_bool ((andb (eq_vec addr MTIMECMP_BASE) (Z.eqb width 8))) then
      (read_reg mtimecmp_ref  : M (mword 64)) >>= fun w__2 : xlenbits =>
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr) (String.append "] -> " (string_of_bits w__2)))))
         : unit in
      (read_reg mtimecmp_ref  : M (mword 64)) >>= fun w__3 : xlenbits =>
      returnm ((MemValue
                  (autocast (autocast (zero_extend w__3 64))))
       : MemoryOpResult (mword (8 * width)))
    else if sumbool_of_bool ((andb (eq_vec addr MTIME_BASE) (Z.eqb width 8))) then
      (read_reg mtime_ref  : M (mword 64)) >>= fun w__4 : xlenbits =>
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr) (String.append "] -> " (string_of_bits w__4)))))
         : unit in
      (read_reg mtime_ref  : M (mword 64)) >>= fun w__5 : xlenbits =>
      returnm ((MemValue
                  (autocast (autocast (zero_extend w__5 64))))
       : MemoryOpResult (mword (8 * width)))
    else
      let '_ :=
        (print_endline
           (String.append "clint[" (String.append (string_of_bits addr) "] -> <not-mapped>")))
         : unit in
      returnm ((MemException
                  (E_Load_Access_Fault))
       : MemoryOpResult (mword (8 * width))))
    : M (MemoryOpResult (mword (8 * width))).

Definition clint_dispatch '(tt : unit) 
: M (unit) :=
   (read_reg mtime_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   let '_ := (print_endline (String.append "clint::tick mtime <- " (string_of_bits w__0)))  : unit in
   _set_Minterrupts_MTI mip_ref ((bool_to_bits false)  : mword 1) >>
   (read_reg mtimecmp_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
   (read_reg mtime_ref  : M (mword 64)) >>= fun w__2 : xlenbits =>
   (if ((zopz0zIzJ_u w__1 w__2)) then
      (read_reg mtime_ref  : M (mword 64)) >>= fun w__3 : xlenbits =>
      let '_ :=
        (print_endline (String.append " clint timer pending at mtime " (string_of_bits w__3)))
         : unit in
      (_set_Minterrupts_MTI mip_ref ((bool_to_bits true)  : mword 1))
       : M (unit)
    else returnm (tt  : unit))
    : M (unit).

Definition clint_store (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult bool) :=
   let addr := sub_vec addr (plat_clint_base tt) in
   (if sumbool_of_bool ((andb (eq_vec addr MSIP_BASE) (orb (Z.eqb width 8) (Z.eqb width 4)))) then
      cast_unit_vec (access_vec_dec data 0) >>= fun w__0 : mword 1 =>
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr)
                 (String.append "] <- "
                    (String.append (string_of_bits data)
                       (String.append " (mip.MSI <- "
                          (String.append (string_of_bits (w__0  : mword 1)) ")")))))))
         : unit in
      cast_unit_vec (access_vec_dec data 0) >>= fun w__1 : mword 1 =>
      _set_Minterrupts_MSI mip_ref
        ((bool_to_bits (eq_vec (w__1  : mword 1) (vec_of_bits [B1]  : mword 1)))
         : mword 1) >>
      clint_dispatch tt >> returnm ((MemValue (true))  : MemoryOpResult bool)
    else if sumbool_of_bool ((andb (eq_vec addr MTIMECMP_BASE) (Z.eqb width 8))) then
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr)
                 (String.append "] <- " (String.append (string_of_bits data) " (mtimecmp)")))))
         : unit in
      write_reg mtimecmp_ref (zero_extend data 64) >>
      clint_dispatch tt >> returnm ((MemValue (true))  : MemoryOpResult bool)
    else
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr)
                 (String.append "] <- " (String.append (string_of_bits data) " (<unmapped>)")))))
         : unit in
      returnm ((MemException
                  (E_SAMO_Access_Fault))
       : MemoryOpResult bool))
    : M (MemoryOpResult bool).

Definition tick_clock '(tt : unit) 
: M (unit) :=
   (read_reg mcycle_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   write_reg mcycle_ref (add_vec_int w__0 1) >>
   (read_reg mtime_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
   write_reg mtime_ref (add_vec_int w__1 1) >> (clint_dispatch tt)  : M (unit).

Axiom plat_term_write : forall  (_ : bits 8) , unit.

Axiom plat_term_read : forall  (_ : unit) , bits 8.

Definition Mk_htif_cmd (v : mword 64) 
: htif_cmd :=
   {| htif_cmd_htif_cmd_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_htif_cmd_bits (v : htif_cmd) 
: mword 64 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 0.

Definition _set_htif_cmd_bits (r_ref : register_ref regstate register_value htif_cmd) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_bits (v : htif_cmd) (x : mword 64) 
: htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_htif_cmd_device (v : htif_cmd) 
: mword 8 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 56.

Definition _set_htif_cmd_device (r_ref : register_ref regstate register_value htif_cmd) (v : mword 8) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 63 56 (subrange_vec_dec v 7 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_device (v : htif_cmd) (x : mword 8) 
: htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 56 (subrange_vec_dec x 7 0)) ]}.

Definition _get_htif_cmd_cmd (v : htif_cmd) 
: mword 8 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 55 48.

Definition _set_htif_cmd_cmd (r_ref : register_ref regstate register_value htif_cmd) (v : mword 8) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 55 48 (subrange_vec_dec v 7 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_cmd (v : htif_cmd) (x : mword 8) 
: htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 55 48 (subrange_vec_dec x 7 0)) ]}.

Definition _get_htif_cmd_payload (v : htif_cmd) 
: mword 48 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 47 0.

Definition _set_htif_cmd_payload (r_ref : register_ref regstate register_value htif_cmd) (v : mword 48) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 47 0 (subrange_vec_dec v 47 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_payload (v : htif_cmd) (x : mword 48) 
: htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 47 0 (subrange_vec_dec x 47 0)) ]}.

Definition htif_load (addr : mword 64) (width : Z) `{ArithFact (width >= (0 + 1))} 
: M (MemoryOpResult (mword (8 * width))) :=
   (read_reg htif_tohost_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   let '_ :=
     (print_endline
        (String.append "htif["
           (String.append (string_of_bits addr) (String.append "] -> " (string_of_bits w__0)))))
      : unit in
   (if sumbool_of_bool ((Z.eqb width 8)) then
      (read_reg htif_tohost_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
      returnm ((MemValue
                  (autocast (autocast (zero_extend w__1 64))))
       : MemoryOpResult (mword (8 * width)))
    else returnm ((MemException (E_Load_Access_Fault))  : MemoryOpResult (mword (8 * width))))
    : M (MemoryOpResult (mword (8 * width))).

Definition htif_store (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact ((0 + 1) <=
  width /\
  width <= 8)} 
: M (MemoryOpResult bool) :=
   let '_ :=
     (print_endline
        (String.append "htif["
           (String.append (string_of_bits addr) (String.append "] <- " (string_of_bits data)))))
      : unit in
   let cbits : xlenbits := EXTZ 64 data in
   write_reg htif_tohost_ref cbits >>
   let cmd := Mk_htif_cmd cbits in
   let b__0 := _get_htif_cmd_device cmd in
   (if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8))) then
      let '_ :=
        (print_endline
           (String.append "htif-syscall-proxy cmd: " (string_of_bits (_get_htif_cmd_payload cmd))))
         : unit in
      cast_unit_vec (access_vec_dec (_get_htif_cmd_payload cmd) 0) >>= fun w__0 : mword 1 =>
      (if ((eq_vec (w__0  : mword 1) (vec_of_bits [B1]  : mword 1))) then
         write_reg htif_done_ref true >>
         write_reg
           htif_exit_code_ref
           ((shift_bits_right (zero_extend (_get_htif_cmd_payload cmd) xlen)
               (vec_of_bits [B0;B1]  : mword 2))
            : xlenbits)
          : M (unit)
       else returnm (tt  : unit))
       : M (unit)
    else
      returnm ((if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1]  : mword 8))) then
                  let '_ :=
                    (print_endline
                       (String.append "htif-term cmd: " (string_of_bits (_get_htif_cmd_payload cmd))))
                     : unit in
                  let b__2 := _get_htif_cmd_cmd cmd in
                  if ((eq_vec b__2 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8))) then tt
                  else if ((eq_vec b__2 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1]  : mword 8))) then
                    plat_term_write (subrange_vec_dec (_get_htif_cmd_payload cmd) 7 0)
                  else print_endline (String.append "Unknown term cmd: " (string_of_bits b__2))
                else print_endline (String.append "htif-???? cmd: " (string_of_bits data)))
       : unit)) >>
   returnm ((MemValue
               (true))
    : MemoryOpResult bool).

Definition htif_tick '(tt : unit) 
: M (unit) :=
   (read_reg htif_tohost_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   let '_ := (print_endline (String.append "htif::tick " (string_of_bits w__0)))  : unit in
   write_reg htif_tohost_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1))
    : M (unit).

Definition within_mmio_readable (addr : mword 64) (width : Z) 
: bool :=
   orb (within_clint addr width) (andb (within_htif_readable addr width) (Z.leb 1 width)).

Definition within_mmio_writable (addr : mword 64) (width : Z) 
: bool :=
   orb (within_clint addr width) (andb (within_htif_writable addr width) (Z.leb width 8)).

Definition mmio_read (addr : mword 64) (width : Z) `{ArithFact (width >= (0 + 1))} 
: M (MemoryOpResult (mword (8 * width))) :=
   (if ((within_clint addr width)) then
      (clint_load addr width)
       : M (MemoryOpResult (mword (8 * width)))
    else if sumbool_of_bool ((andb (within_htif_readable addr width) (Z.leb 1 width))) then
      (htif_load addr width)
       : M (MemoryOpResult (mword (8 * width)))
    else returnm ((MemException (E_Load_Access_Fault))  : MemoryOpResult (mword (8 * width))))
    : M (MemoryOpResult (mword (8 * width))).

Definition mmio_write (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult bool) :=
   (if ((within_clint addr width)) then (clint_store addr width data)  : M (MemoryOpResult bool)
    else if sumbool_of_bool ((andb (within_htif_writable addr width) (Z.leb width 8))) then
      (htif_store addr width data)
       : M (MemoryOpResult bool)
    else returnm ((MemException (E_SAMO_Access_Fault))  : MemoryOpResult bool))
    : M (MemoryOpResult bool).

Definition init_platform '(tt : unit) 
: M (unit) :=
   write_reg htif_tohost_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg htif_done_ref false >>
   write_reg htif_exit_code_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1))
    : M (unit).

Definition tick_platform '(tt : unit) 
: M (unit) :=
   let '_ := (cancel_reservation tt)  : unit in
   (htif_tick tt)
    : M (unit).

Definition is_aligned_addr (addr : mword 64) (width : Z) 
: bool :=
   Z.eqb
     (projT1 ((build_ex (projT1 (ex_int (modulus (projT1 (uint addr)) width))))
      : {syn_n : Z & ArithFact (True)})) 0.

Definition phys_mem_read (t : ReadType) (addr : mword 64) (width : Z) (aq : bool) (rl : bool) (res : bool) `{ArithFact (width >=
  0)} 
: M (MemoryOpResult (mword (8 * width))) :=
   __RISCV_read addr width aq rl res >>= fun w__0 : option (mword (8 * width)) =>
   returnm ((match (t, w__0) with
             | (Instruction, None) => MemException (E_Fetch_Access_Fault)
             | (Data, None) => MemException (E_Load_Access_Fault)
             | (_, Some (v)) =>
                let '_ :=
                  (print_endline
                     (String.append "mem["
                        (String.append ((readType_to_str t)  : string)
                           (String.append ","
                              (String.append (string_of_bits addr)
                                 (String.append "] -> " (string_of_bits v)))))))
                   : unit in
                MemValue
                  (v)
             end)
    : MemoryOpResult (mword (8 * width))).

Definition checked_mem_read (t : ReadType) (addr : mword 64) (width : Z) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult (mword (8 * width))) :=
   (if ((andb (generic_eq ((readType_to_str t)  : string) ((readType_to_str Data)  : string))
           (within_mmio_readable addr width))) then
      (mmio_read addr width)
       : M (MemoryOpResult (mword (8 * width)))
    else if ((within_phys_mem addr width)) then
      (phys_mem_read t addr width false false false)
       : M (MemoryOpResult (mword (8 * width)))
    else returnm ((MemException (E_Load_Access_Fault))  : MemoryOpResult (mword (8 * width))))
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr (addr : mword 64) (width : Z) `{ArithFact (width >= (0 + 1))} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr_acquire (addr : mword 64) (width : Z) `{ArithFact (width >= (0 + 1))} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr_strong_acquire (addr : mword 64) (width : Z) `{ArithFact (width >= (0 + 1))} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr_reserved (addr : mword 64) (width : Z) `{ArithFact (width >= (0 + 1))} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr_reserved_acquire (addr : mword 64) (width : Z) `{ArithFact (width >= (0 + 1))} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr_reserved_strong_acquire (addr : mword 64) (width : Z) `{ArithFact (width >= (0 + 1))} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition mem_read (addr : mword 64) (width : Z) (aq : bool) (rl : bool) (res : bool) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult (mword (8 * width))) :=
   (if ((andb (orb aq res) (negb (is_aligned_addr addr width)))) then
      returnm ((MemException
                  (E_Load_Addr_Align))
       : MemoryOpResult (mword (8 * width)))
    else
      (match (aq, rl, res) with
       | (false, false, false) =>
          (checked_mem_read Data addr width)  : M (MemoryOpResult (mword (8 * width)))
       | (true, false, false) => (MEMr_acquire addr width)  : M (MemoryOpResult (mword (8 * width)))
       | (false, false, true) =>
          (MEMr_reserved addr width)  : M (MemoryOpResult (mword (8 * width)))
       | (true, false, true) =>
          (MEMr_reserved_acquire addr width)  : M (MemoryOpResult (mword (8 * width)))
       | (false, true, false) =>
          (throw (Error_not_implemented ("load.rl")))  : M (MemoryOpResult (mword (8 * width)))
       | (true, true, false) =>
          (MEMr_strong_acquire addr width)  : M (MemoryOpResult (mword (8 * width)))
       | (false, true, true) =>
          (throw (Error_not_implemented ("lr.rl")))  : M (MemoryOpResult (mword (8 * width)))
       | (true, true, true) =>
          (MEMr_reserved_strong_acquire addr width)  : M (MemoryOpResult (mword (8 * width)))
       end)
       : M (MemoryOpResult (mword (8 * width))))
    : M (MemoryOpResult (mword (8 * width))).

Definition mem_write_ea (addr : mword 64) (width : Z) (aq : bool) (rl : bool) (con : bool) 
: M (MemoryOpResult unit) :=
   (if ((andb (orb rl con) (negb (is_aligned_addr addr width)))) then
      returnm ((MemException
                  (E_SAMO_Addr_Align))
       : MemoryOpResult unit)
    else
      (match (aq, rl, con) with
       | (false, false, false) =>
          MEMea addr width >> returnm ((MemValue (tt))  : MemoryOpResult unit)
       | (false, true, false) =>
          MEMea_release addr width >> returnm ((MemValue (tt))  : MemoryOpResult unit)
       | (false, false, true) =>
          MEMea_conditional addr width >> returnm ((MemValue (tt))  : MemoryOpResult unit)
       | (false, true, true) =>
          MEMea_conditional_release addr width >> returnm ((MemValue (tt))  : MemoryOpResult unit)
       | (true, false, false) =>
          (throw (Error_not_implemented ("store.aq")))  : M (MemoryOpResult unit)
       | (true, true, false) =>
          MEMea_strong_release addr width >> returnm ((MemValue (tt))  : MemoryOpResult unit)
       | (true, false, true) => (throw (Error_not_implemented ("sc.aq")))  : M (MemoryOpResult unit)
       | (true, true, true) =>
          MEMea_conditional_strong_release addr width >>
          returnm ((MemValue
                      (tt))
           : MemoryOpResult unit)
       end)
       : M (MemoryOpResult unit))
    : M (MemoryOpResult unit).

Definition phys_mem_write (addr : mword 64) (width : Z) (data : mword (8 * width)) 
: M (MemoryOpResult bool) :=
   let '_ :=
     (print_endline
        (String.append "mem["
           (String.append (string_of_bits addr) (String.append "] <- " (string_of_bits data)))))
      : unit in
   __RISCV_write addr width data >>= fun w__0 : bool =>
   returnm ((MemValue
               (w__0))
    : MemoryOpResult bool).

Definition checked_mem_write (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult bool) :=
   (if ((within_mmio_writable addr width)) then
      (mmio_write addr width data)
       : M (MemoryOpResult bool)
    else if ((within_phys_mem addr width)) then
      (phys_mem_write addr width data)
       : M (MemoryOpResult bool)
    else returnm ((MemException (E_SAMO_Access_Fault))  : MemoryOpResult bool))
    : M (MemoryOpResult bool).

Definition MEMval (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition MEMval_release (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition MEMval_strong_release (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition MEMval_conditional (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition MEMval_conditional_release (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition MEMval_conditional_strong_release (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition mem_write_value (addr : mword 64) (width : Z) (value : mword (8 * width)) (aq : bool) (rl : bool) (con : bool) `{ArithFact (width >=
  (0 + 1))} 
: M (MemoryOpResult bool) :=
   (if ((andb (orb rl con) (negb (is_aligned_addr addr width)))) then
      returnm ((MemException
                  (E_SAMO_Addr_Align))
       : MemoryOpResult bool)
    else
      (match (aq, rl, con) with
       | (false, false, false) => (checked_mem_write addr width value)  : M (MemoryOpResult bool)
       | (false, true, false) => (MEMval_release addr width value)  : M (MemoryOpResult bool)
       | (false, false, true) => (MEMval_conditional addr width value)  : M (MemoryOpResult bool)
       | (false, true, true) =>
          (MEMval_conditional_release addr width value)  : M (MemoryOpResult bool)
       | (true, false, false) =>
          (throw (Error_not_implemented ("store.aq")))  : M (MemoryOpResult bool)
       | (true, true, false) => (MEMval_strong_release addr width value)  : M (MemoryOpResult bool)
       | (true, false, true) => (throw (Error_not_implemented ("sc.aq")))  : M (MemoryOpResult bool)
       | (true, true, true) =>
          (MEMval_conditional_strong_release addr width value)  : M (MemoryOpResult bool)
       end)
       : M (MemoryOpResult bool))
    : M (MemoryOpResult bool).

Definition PAGESIZE_BITS := 12.
Hint Unfold PAGESIZE_BITS : sail.
Definition Mk_PTE_Bits (v : mword 8) 
: PTE_Bits :=
   {| PTE_Bits_PTE_Bits_chunk_0 := (subrange_vec_dec v 7 0) |}.

Definition _get_PTE_Bits_bits (v : PTE_Bits) 
: mword 8 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 0.

Definition _set_PTE_Bits_bits (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 8) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 7 0 (subrange_vec_dec v 7 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_bits (v : PTE_Bits) (x : mword 8) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 0 (subrange_vec_dec x 7 0)) ]}.

Definition _get_PTE_Bits_D (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 7.

Definition _set_PTE_Bits_D (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_D (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_A (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 6 6.

Definition _set_PTE_Bits_A (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_A (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_G (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 5 5.

Definition _set_PTE_Bits_G (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_G (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_U (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 4 4.

Definition _set_PTE_Bits_U (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_U (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_X (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 3 3.

Definition _set_PTE_Bits_X (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_X (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_W (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 2 2.

Definition _set_PTE_Bits_W (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_W (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_R (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 1 1.

Definition _set_PTE_Bits_R (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_R (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_V (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 0 0.

Definition _set_PTE_Bits_V (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_V (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition isPTEPtr (p : mword 8) 
: bool :=
   let a := Mk_PTE_Bits p in
   andb (eq_vec (_get_PTE_Bits_R a) ((bool_to_bits false)  : mword 1))
     (andb (eq_vec (_get_PTE_Bits_W a) ((bool_to_bits false)  : mword 1))
        (eq_vec (_get_PTE_Bits_X a) ((bool_to_bits false)  : mword 1))).

Definition isInvalidPTE (p : mword 8) 
: bool :=
   let a := Mk_PTE_Bits p in
   orb (eq_vec (_get_PTE_Bits_V a) ((bool_to_bits false)  : mword 1))
     (andb (eq_vec (_get_PTE_Bits_W a) ((bool_to_bits true)  : mword 1))
        (eq_vec (_get_PTE_Bits_R a) ((bool_to_bits false)  : mword 1))).

Definition checkPTEPermission (ac : AccessType) (priv : Privilege) (mxr : bool) (do_sum : bool) (p : PTE_Bits) 
: M (bool) :=
   (match (ac, priv) with
    | (Read, User) =>
       returnm ((andb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits true)  : mword 1))
                   (orb (eq_vec (_get_PTE_Bits_R p) ((bool_to_bits true)  : mword 1))
                      (andb (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)) mxr)))
        : bool)
    | (Write, User) =>
       returnm ((andb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits true)  : mword 1))
                   (eq_vec (_get_PTE_Bits_W p) ((bool_to_bits true)  : mword 1)))
        : bool)
    | (ReadWrite, User) =>
       returnm ((andb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits true)  : mword 1))
                   (andb (eq_vec (_get_PTE_Bits_W p) ((bool_to_bits true)  : mword 1))
                      (orb (eq_vec (_get_PTE_Bits_R p) ((bool_to_bits true)  : mword 1))
                         (andb (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)) mxr))))
        : bool)
    | (Execute, User) =>
       returnm ((andb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits true)  : mword 1))
                   (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)))
        : bool)
    | (Read, Supervisor) =>
       returnm ((andb (orb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits false)  : mword 1)) do_sum)
                   (orb (eq_vec (_get_PTE_Bits_R p) ((bool_to_bits true)  : mword 1))
                      (andb (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)) mxr)))
        : bool)
    | (Write, Supervisor) =>
       returnm ((andb (orb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits false)  : mword 1)) do_sum)
                   (eq_vec (_get_PTE_Bits_W p) ((bool_to_bits true)  : mword 1)))
        : bool)
    | (ReadWrite, Supervisor) =>
       returnm ((andb (orb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits false)  : mword 1)) do_sum)
                   (andb (eq_vec (_get_PTE_Bits_W p) ((bool_to_bits true)  : mword 1))
                      (orb (eq_vec (_get_PTE_Bits_R p) ((bool_to_bits true)  : mword 1))
                         (andb (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)) mxr))))
        : bool)
    | (Execute, Supervisor) =>
       returnm ((andb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits false)  : mword 1))
                   (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)))
        : bool)
    | (_, Machine) => (internal_error "m-mode mem perm check")  : M (bool)
    end)
    : M (bool).

Definition update_PTE_Bits (p : PTE_Bits) (a : AccessType) 
: option PTE_Bits :=
   let update_d :=
     andb
       (orb (generic_eq ((accessType_to_str a)  : string) ((accessType_to_str Write)  : string))
          (generic_eq ((accessType_to_str a)  : string) ((accessType_to_str ReadWrite)  : string)))
       (eq_vec (_get_PTE_Bits_D p) ((bool_to_bits false)  : mword 1)) in
   let update_a := eq_vec (_get_PTE_Bits_A p) ((bool_to_bits false)  : mword 1) in
   if ((orb update_d update_a)) then
     let np := _update_PTE_Bits_A p ((bool_to_bits true)  : mword 1) in
     let np := if (update_d) then _update_PTE_Bits_D p ((bool_to_bits true)  : mword 1) else np in
     Some
       (np)
   else None.

Definition PTW_Error_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 4)} 
: PTW_Error :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then PTW_Access
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then PTW_Invalid_PTE
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then PTW_No_Permission
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then PTW_Misaligned
   else PTW_PTE_Update.

Definition num_of_PTW_Error (arg_ : PTW_Error) 
: {e : Z & ArithFact (0 <= e /\ e <= 4)} :=
   build_ex(match arg_ with
            | PTW_Access => 0
            | PTW_Invalid_PTE => 1
            | PTW_No_Permission => 2
            | PTW_Misaligned => 3
            | PTW_PTE_Update => 4
            end).

Definition ptw_error_to_str (e : PTW_Error) 
: string :=
   match e with
   | PTW_Access => "mem-access-error"
   | PTW_Invalid_PTE => "invalid-pte"
   | PTW_No_Permission => "no-permission"
   | PTW_Misaligned => "misaligned-superpage"
   | PTW_PTE_Update => "pte-update-needed"
   end.

Definition translationException (a : AccessType) (f : PTW_Error) 
: ExceptionType :=
   match (a, f) with
   | (ReadWrite, PTW_Access) => E_SAMO_Access_Fault
   | (ReadWrite, _) => E_SAMO_Page_Fault
   | (Read, PTW_Access) => E_Load_Access_Fault
   | (Read, _) => E_Load_Page_Fault
   | (Write, PTW_Access) => E_SAMO_Access_Fault
   | (Write, _) => E_SAMO_Page_Fault
   | (Fetch, PTW_Access) => E_Fetch_Access_Fault
   | (Fetch, _) => E_Fetch_Page_Fault
   end.

Definition SV39_LEVEL_BITS := 9.
Hint Unfold SV39_LEVEL_BITS : sail.
Definition SV39_LEVELS := 3.
Hint Unfold SV39_LEVELS : sail.
Definition PTE39_LOG_SIZE := 3.
Hint Unfold PTE39_LOG_SIZE : sail.
Definition PTE39_SIZE := 8.
Hint Unfold PTE39_SIZE : sail.
Definition Mk_SV39_Vaddr (v : mword 39) 
: SV39_Vaddr :=
   {| SV39_Vaddr_SV39_Vaddr_chunk_0 := (subrange_vec_dec v 38 0) |}.

Definition _get_SV39_Vaddr_bits (v : SV39_Vaddr) 
: mword 39 :=
   subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 0.

Definition _set_SV39_Vaddr_bits (r_ref : register_ref regstate register_value SV39_Vaddr) (v : mword 39) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 0 (subrange_vec_dec v 38 0)) ]}
      : SV39_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Vaddr_bits (v : SV39_Vaddr) (x : mword 39) 
: SV39_Vaddr :=
   {[ v with
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 0 (subrange_vec_dec x 38 0)) ]}.

Definition _get_SV39_Vaddr_VPNi (v : SV39_Vaddr) 
: mword 27 :=
   subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 12.

Definition _set_SV39_Vaddr_VPNi (r_ref : register_ref regstate register_value SV39_Vaddr) (v : mword 27) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 12 (subrange_vec_dec v 26 0)) ]}
      : SV39_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Vaddr_VPNi (v : SV39_Vaddr) (x : mword 27) 
: SV39_Vaddr :=
   {[ v with
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 12 (subrange_vec_dec x 26 0)) ]}.

Definition _get_SV39_Vaddr_PgOfs (v : SV39_Vaddr) 
: mword 12 :=
   subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 11 0.

Definition _set_SV39_Vaddr_PgOfs (r_ref : register_ref regstate register_value SV39_Vaddr) (v : mword 12) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Vaddr_SV39_Vaddr_chunk_0) 11 0 (subrange_vec_dec v 11 0)) ]}
      : SV39_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Vaddr_PgOfs (v : SV39_Vaddr) (x : mword 12) 
: SV39_Vaddr :=
   {[ v with
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 11 0 (subrange_vec_dec x 11 0)) ]}.

Definition Mk_SV39_Paddr (v : mword 56) 
: SV39_Paddr :=
   {| SV39_Paddr_SV39_Paddr_chunk_0 := (subrange_vec_dec v 55 0) |}.

Definition _get_SV39_Paddr_bits (v : SV39_Paddr) 
: mword 56 :=
   subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 0.

Definition _set_SV39_Paddr_bits (r_ref : register_ref regstate register_value SV39_Paddr) (v : mword 56) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Paddr_SV39_Paddr_chunk_0) 55 0 (subrange_vec_dec v 55 0)) ]}
      : SV39_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Paddr_bits (v : SV39_Paddr) (x : mword 56) 
: SV39_Paddr :=
   {[ v with
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 0 (subrange_vec_dec x 55 0)) ]}.

Definition _get_SV39_Paddr_PPNi (v : SV39_Paddr) 
: mword 44 :=
   subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 12.

Definition _set_SV39_Paddr_PPNi (r_ref : register_ref regstate register_value SV39_Paddr) (v : mword 44) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Paddr_SV39_Paddr_chunk_0) 55 12 (subrange_vec_dec v 43 0)) ]}
      : SV39_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Paddr_PPNi (v : SV39_Paddr) (x : mword 44) 
: SV39_Paddr :=
   {[ v with
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 12 (subrange_vec_dec x 43 0)) ]}.

Definition _get_SV39_Paddr_PgOfs (v : SV39_Paddr) 
: mword 12 :=
   subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 11 0.

Definition _set_SV39_Paddr_PgOfs (r_ref : register_ref regstate register_value SV39_Paddr) (v : mword 12) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Paddr_SV39_Paddr_chunk_0) 11 0 (subrange_vec_dec v 11 0)) ]}
      : SV39_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Paddr_PgOfs (v : SV39_Paddr) (x : mword 12) 
: SV39_Paddr :=
   {[ v with
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 11 0 (subrange_vec_dec x 11 0)) ]}.

Definition Mk_SV39_PTE (v : mword 64) 
: SV39_PTE :=
   {| SV39_PTE_SV39_PTE_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_SV39_PTE_bits (v : SV39_PTE) 
: mword 64 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 63 0.

Definition _set_SV39_PTE_bits (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_bits (v : SV39_PTE) (x : mword 64) 
: SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_SV39_PTE_PPNi (v : SV39_PTE) 
: mword 44 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 53 10.

Definition _set_SV39_PTE_PPNi (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 44) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 53 10 (subrange_vec_dec v 43 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_PPNi (v : SV39_PTE) (x : mword 44) 
: SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 53 10 (subrange_vec_dec x 43 0)) ]}.

Definition _get_SV39_PTE_RSW (v : SV39_PTE) 
: mword 2 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 9 8.

Definition _set_SV39_PTE_RSW (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 9 8 (subrange_vec_dec v 1 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_RSW (v : SV39_PTE) (x : mword 2) 
: SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 9 8 (subrange_vec_dec x 1 0)) ]}.

Definition _get_SV39_PTE_BITS (v : SV39_PTE) 
: mword 8 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 7 0.

Definition _set_SV39_PTE_BITS (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 8) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 7 0 (subrange_vec_dec v 7 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_BITS (v : SV39_PTE) (x : mword 8) 
: SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 7 0 (subrange_vec_dec x 7 0)) ]}.

Definition curAsid64 '(tt : unit) 
: M (mword 16) :=
   (read_reg satp_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   let satp64 := Mk_Satp64 w__0 in
   returnm ((_get_Satp64_Asid satp64)
    : mword 16).

Definition curPTB39 '(tt : unit) 
: M (mword 56) :=
   (read_reg satp_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   let satp64 := Mk_Satp64 w__0 in
   returnm ((EXTZ 56 (shiftl (_get_Satp64_PPN satp64) PAGESIZE_BITS))
    : mword 56).

Hint Unfold PAGESIZE_BITS : sail.
Hint Unfold SV39_LEVEL_BITS : sail.

Fixpoint walk39 (vaddr : mword 39) (ac : AccessType) (priv : Privilege) (mxr : bool) (do_sum : bool) (ptb : mword 56) (level : nat) (global : bool) 
: M (PTW_Result) :=
   let va := Mk_SV39_Vaddr vaddr in
   let pt_ofs : paddr39 :=
     shiftl
       (EXTZ 56
          (subrange_vec_dec (shiftr (_get_SV39_Vaddr_VPNi va) (Z.mul (Z.of_nat level) SV39_LEVEL_BITS))
             (projT1 (sub_range (build_ex SV39_LEVEL_BITS) (build_ex 1))) 0)) PTE39_LOG_SIZE in
   let pte_addr := add_vec ptb pt_ofs in
   phys_mem_read Data (EXTZ 64 pte_addr) 8 false false false >>= fun w__0 : MemoryOpResult (mword (8 * 8)) =>
   (match w__0 with
    | MemException (_) => returnm ((PTW_Failure (PTW_Access))  : PTW_Result )
    | MemValue (v) =>
       let pte := Mk_SV39_PTE v in
       let pbits := _get_SV39_PTE_BITS pte in
       let pattr := Mk_PTE_Bits pbits in
       let is_global := orb global (eq_vec (_get_PTE_Bits_G pattr) ((bool_to_bits true)  : mword 1)) in
       (if ((isInvalidPTE pbits)) then returnm ((PTW_Failure (PTW_Invalid_PTE))  : PTW_Result )
        else if ((isPTEPtr pbits)) then
          (match level with O =>
             returnm ((PTW_Failure
                         (PTW_Invalid_PTE))
              : PTW_Result )
           | S level' =>
             (walk39 vaddr ac priv mxr do_sum
                (EXTZ 56 (shiftl (_get_SV39_PTE_PPNi pte) PAGESIZE_BITS))
                level' is_global)
              : M (PTW_Result) end)
           : M (PTW_Result)
        else
          checkPTEPermission ac priv mxr do_sum pattr >>= fun w__3 : bool =>
          returnm ((if ((negb w__3)) then PTW_Failure (PTW_No_Permission)
                    else if sumbool_of_bool (Nat.ltb O level) then
                      let mask :=
                        sub_vec_int
                          (shiftl
                             (xor_vec (_get_SV39_PTE_PPNi pte)
                                (xor_vec (_get_SV39_PTE_PPNi pte)
                                   (EXTZ 44 (vec_of_bits [B1]  : mword 1))))
                             (Z.mul (Z.of_nat level) SV39_LEVEL_BITS)) 1 in
                      if ((neq_vec (and_vec (_get_SV39_PTE_PPNi pte) mask)
                             (EXTZ 44 (vec_of_bits [B0]  : mword 1)))) then
                        PTW_Failure
                          (PTW_Misaligned)
                      else
                        let ppn :=
                          or_vec (_get_SV39_PTE_PPNi pte)
                            (and_vec (EXTZ 44 (_get_SV39_Vaddr_VPNi va)) mask) in
                        PTW_Success
                          (concat_vec ppn (_get_SV39_Vaddr_PgOfs va), pte, pte_addr, build_ex (Z.of_nat level),
                          is_global)
                    else
                      PTW_Success
                        (concat_vec (_get_SV39_PTE_PPNi pte) (_get_SV39_Vaddr_PgOfs va), pte,
                        pte_addr, build_ex (Z.of_nat level), is_global))
           : PTW_Result))
        : M (PTW_Result)
    end)
    : M (PTW_Result).

Definition make_TLB39_Entry (asid : mword 16) (global : bool) (vAddr : mword 39) (pAddr : mword 56) (pte : SV39_PTE) '(existT _ level _ : {n : Z & ArithFact (n >=
  0)}) (pteAddr : mword 56) 
: M (TLB39_Entry) :=
   let 'shift :=
     projT1 ((build_ex (projT1 (add_range (build_ex PAGESIZE_BITS)
                                  (build_ex (Z.mul level SV39_LEVEL_BITS)))))
      : {n : Z & ArithFact (n >= 0)}) in
   let vAddrMask : vaddr39 :=
     sub_vec_int
       (shiftl (xor_vec vAddr (xor_vec vAddr (EXTZ 39 (vec_of_bits [B1]  : mword 1)))) shift) 1 in
   let vMatchMask : vaddr39 := not_vec vAddrMask in
   (read_reg mcycle_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   returnm (({| TLB39_Entry_asid := asid; 
                TLB39_Entry_global := global; 
                TLB39_Entry_pte := pte; 
                TLB39_Entry_pteAddr := pteAddr; 
                TLB39_Entry_vAddrMask := vAddrMask; 
                TLB39_Entry_vMatchMask := vMatchMask; 
                TLB39_Entry_vAddr := (and_vec vAddr vMatchMask); 
                TLB39_Entry_pAddr := (shiftl (shiftr pAddr shift) shift); 
                TLB39_Entry_age := w__0 |})
    : TLB39_Entry).

Definition lookupTLB39 (asid : mword 16) (vaddr : mword 39) 
: M (option ((Z * TLB39_Entry))) :=
   read_reg tlb39_ref >>= fun w__0 : option TLB39_Entry =>
   returnm ((match w__0 with
             | None => None
             | Some (e) =>
                if ((andb (orb e.(TLB39_Entry_global) (eq_vec e.(TLB39_Entry_asid) asid))
                       (eq_vec e.(TLB39_Entry_vAddr) (and_vec e.(TLB39_Entry_vMatchMask) vaddr))))
                then
                  Some
                    ((0, e))
                else None
             end)
    : option ((Z * TLB39_Entry))).

Definition addToTLB39 (asid : mword 16) (vAddr : mword 39) (pAddr : mword 56) (pte : SV39_PTE) (pteAddr : mword 56) '(existT _ level _ : {n : Z & ArithFact (n >=
  0)}) (global : bool) 
: M (unit) :=
   make_TLB39_Entry asid global vAddr pAddr pte (build_ex level) pteAddr >>= fun ent =>
   write_reg tlb39_ref (Some (ent))
    : M (unit).

Definition writeTLB39 (idx : Z) (ent : TLB39_Entry) 
: M (unit) :=
   write_reg tlb39_ref (Some (ent))
    : M (unit).

Definition flushTLB (asid : option (mword 16)) (addr : option (mword 39)) 
: M (unit) :=
   read_reg tlb39_ref >>= fun w__0 : option TLB39_Entry =>
   let ent : option TLB39_Entry :=
     match (w__0, asid, addr) with
     | (None, _, _) => None
     | (Some (e), None, None) => None
     | (Some (e), None, Some (a)) =>
        if ((eq_vec e.(TLB39_Entry_vAddr) (and_vec e.(TLB39_Entry_vMatchMask) a))) then None
        else Some (e)
     | (Some (e), Some (i), None) =>
        if ((andb (eq_vec e.(TLB39_Entry_asid) i) (negb e.(TLB39_Entry_global)))) then None
        else Some (e)
     | (Some (e), Some (i), Some (a)) =>
        if ((andb (eq_vec e.(TLB39_Entry_asid) i)
               (andb (eq_vec e.(TLB39_Entry_vAddr) (and_vec a e.(TLB39_Entry_vMatchMask)))
                  (negb e.(TLB39_Entry_global))))) then
          None
        else Some (e)
     end in
   write_reg tlb39_ref ent
    : M (unit).

Definition translate39 (vAddr : mword 39) (ac : AccessType) (priv : Privilege) (mxr : bool) (do_sum : bool) '(existT _ level _ : {n : Z & ArithFact (n >=
  0)}) 
: M (TR39_Result) :=
   curAsid64 tt >>= fun asid =>
   lookupTLB39 asid vAddr >>= fun w__0 : option ((Z * TLB39_Entry)) =>
   (match w__0 with
    | Some (idx,ent) =>
       let pteBits := Mk_PTE_Bits (_get_SV39_PTE_BITS ent.(TLB39_Entry_pte)) in
       checkPTEPermission ac priv mxr do_sum pteBits >>= fun w__1 : bool =>
       (if ((negb w__1)) then returnm ((TR39_Failure (PTW_No_Permission))  : TR39_Result )
        else
          (match (update_PTE_Bits pteBits ac) with
           | None =>
              returnm ((TR39_Address
                          (or_vec ent.(TLB39_Entry_pAddr)
                             (EXTZ 56 (and_vec vAddr ent.(TLB39_Entry_vAddrMask)))))
               : TR39_Result )
           | Some (pbits) =>
              (if ((negb (plat_enable_dirty_update tt))) then
                 returnm ((TR39_Failure
                             (PTW_PTE_Update))
                  : TR39_Result )
               else
                 let n_ent : TLB39_Entry := ent in
                 let n_ent :=
                   {[ n_ent with
                     TLB39_Entry_pte :=
                       (_update_SV39_PTE_BITS ent.(TLB39_Entry_pte) (_get_PTE_Bits_bits pbits)) ]}
                    : TLB39_Entry in
                 writeTLB39 idx n_ent >>
                 checked_mem_write (EXTZ 64 ent.(TLB39_Entry_pteAddr)) 8
                   (_get_SV39_PTE_bits ent.(TLB39_Entry_pte)) >>= fun w__2 : MemoryOpResult bool =>
                 match w__2 with
                 | MemValue (_) => returnm (tt  : unit)
                 | MemException (e) =>
                    (internal_error "invalid physical address in TLB")  : M (unit)
                 end >>
                 returnm ((TR39_Address
                             (or_vec ent.(TLB39_Entry_pAddr)
                                (EXTZ 56 (and_vec vAddr ent.(TLB39_Entry_vAddrMask)))))
                  : TR39_Result))
               : M (TR39_Result)
           end)
           : M (TR39_Result))
        : M (TR39_Result)
    | None =>
       curPTB39 tt >>= fun w__6 : mword 56 =>
       walk39 vAddr ac priv mxr do_sum w__6 (Z.to_nat level) false >>= fun w__7 : PTW_Result =>
       (match w__7 with
        | PTW_Failure (f) => returnm ((TR39_Failure (f))  : TR39_Result )
        | PTW_Success (pAddr,pte,pteAddr,(existT _ level _),global) =>
           (match (update_PTE_Bits (Mk_PTE_Bits (_get_SV39_PTE_BITS pte)) ac) with
            | None =>
               addToTLB39 asid vAddr pAddr pte pteAddr (build_ex level) global >>
               returnm ((TR39_Address
                           (pAddr))
                : TR39_Result )
            | Some (pbits) =>
               (if ((negb (plat_enable_dirty_update tt))) then
                  returnm ((TR39_Failure
                              (PTW_PTE_Update))
                   : TR39_Result )
                else
                  let w_pte : SV39_PTE := _update_SV39_PTE_BITS pte (_get_PTE_Bits_bits pbits) in
                  checked_mem_write (EXTZ 64 pteAddr) 8 (_get_SV39_PTE_bits w_pte) >>= fun w__8 : MemoryOpResult bool =>
                  (match w__8 with
                   | MemValue (_) =>
                      addToTLB39 asid vAddr pAddr w_pte pteAddr (build_ex level) global >>
                      returnm ((TR39_Address
                                  (pAddr))
                       : TR39_Result )
                   | MemException (e) => returnm ((TR39_Failure (PTW_Access))  : TR39_Result )
                   end)
                   : M (TR39_Result))
                : M (TR39_Result)
            end)
            : M (TR39_Result)
        end)
        : M (TR39_Result)
    end)
    : M (TR39_Result).

Definition translationMode (priv : Privilege) 
: M (SATPMode) :=
   (if ((eq_vec ((privLevel_to_bits priv)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)))
    then
      returnm (Sbare
       : SATPMode)
    else
      read_reg mstatus_ref >>= fun w__0 : Mstatus =>
      let arch := architecture (_get_Mstatus_SXL w__0) in
      (match arch with
       | Some (RV64) =>
          (read_reg satp_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
          let mbits : satp_mode := _get_Satp64_Mode (Mk_Satp64 w__1) in
          (match (satpMode_of_bits RV64 mbits) with
           | Some (m) => returnm (m  : SATPMode)
           | None => (internal_error "invalid RV64 translation mode in satp")  : M (SATPMode)
           end)
           : M (SATPMode)
       | _ => (internal_error "unsupported address translation arch")  : M (SATPMode)
       end)
       : M (SATPMode))
    : M (SATPMode).

Definition translateAddr (vAddr : mword 64) (ac : AccessType) (rt : ReadType) 
: M (TR_Result) :=
   match rt with
   | Instruction => read_reg cur_privilege_ref  : M (Privilege)
   | Data =>
      read_reg mstatus_ref >>= fun w__1 : Mstatus =>
      (if ((eq_vec (_get_Mstatus_MPRV w__1) ((bool_to_bits true)  : mword 1))) then
         read_reg mstatus_ref >>= fun w__2 : Mstatus =>
         returnm ((privLevel_of_bits (_get_Mstatus_MPP w__2))
          : Privilege)
       else read_reg cur_privilege_ref  : M (Privilege))
       : M (Privilege)
   end >>= fun effPriv : Privilege =>
   read_reg mstatus_ref >>= fun w__5 : Mstatus =>
   let mxr : bool := eq_vec (_get_Mstatus_MXR w__5) ((bool_to_bits true)  : mword 1) in
   read_reg mstatus_ref >>= fun w__6 : Mstatus =>
   let do_sum : bool := eq_vec (_get_Mstatus_SUM w__6) ((bool_to_bits true)  : mword 1) in
   translationMode effPriv >>= fun mode : SATPMode =>
   (match mode with
    | Sbare => returnm ((TR_Address (vAddr))  : TR_Result )
    | SV39 =>
       translate39 (subrange_vec_dec vAddr 38 0) ac effPriv mxr do_sum
         (build_ex (projT1 (sub_range (build_ex SV39_LEVELS) (build_ex 1)))) >>= fun w__7 : TR39_Result =>
       returnm ((match w__7 with
                 | TR39_Address (pa) => TR_Address (EXTZ 64 pa)
                 | TR39_Failure (f) => TR_Failure (translationException ac f)
                 end)
        : TR_Result)
    end)
    : M (TR_Result).

Definition encdec_uop_forwards (arg_ : uop) 
: mword 7 :=
   match arg_ with
   | RISCV_LUI => (vec_of_bits [B0;B1;B1;B0;B1;B1;B1]  : mword 7)
   | RISCV_AUIPC => (vec_of_bits [B0;B0;B1;B0;B1;B1;B1]  : mword 7)
   end.

Definition encdec_uop_backwards (arg_ : mword 7) 
: uop :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B0;B1;B1;B1]  : mword 7))) then RISCV_LUI
   else RISCV_AUIPC.

Definition encdec_uop_forwards_matches (arg_ : uop) 
: bool :=
   match arg_ with | RISCV_LUI => true | RISCV_AUIPC => true end.

Definition encdec_uop_backwards_matches (arg_ : mword 7) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B0;B1;B1;B1]  : mword 7))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B0;B1;B1;B1]  : mword 7))) then true
   else false.

Definition utype_mnemonic_forwards (arg_ : uop) 
: string :=
   match arg_ with | RISCV_LUI => "lui" | RISCV_AUIPC => "auipc" end.

Definition utype_mnemonic_backwards (arg_ : string) 
: M (uop) :=
   (match arg_ with
    | "lui" => returnm (RISCV_LUI  : uop)
    | "auipc" => returnm (RISCV_AUIPC  : uop)
    | _ => exit tt  : M (uop)
    end)
    : M (uop).

Definition utype_mnemonic_forwards_matches (arg_ : uop) 
: bool :=
   match arg_ with | RISCV_LUI => true | RISCV_AUIPC => true end.

Definition utype_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "lui" => true | "auipc" => true | _ => false end.

Definition utype_mnemonic_matches_prefix (arg_ : string) 
: option ((uop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1225_ := arg_ in
   if ((andb (string_startswith _stringappend_1225_ "lui")
          (match (string_drop _stringappend_1225_ (build_ex (projT1 (string_length "lui")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1225_ (build_ex (projT1 (string_length "lui")))) with
     | s_ =>
        Some
          ((RISCV_LUI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1225_ "auipc")
               (match (string_drop _stringappend_1225_ (build_ex (projT1 (string_length "auipc")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1225_ (build_ex (projT1 (string_length "auipc")))) with
     | s_ =>
        Some
          ((RISCV_AUIPC, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                             (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition encdec_bop_forwards (arg_ : bop) 
: mword 3 :=
   match arg_ with
   | RISCV_BEQ => (vec_of_bits [B0;B0;B0]  : mword 3)
   | RISCV_BNE => (vec_of_bits [B0;B0;B1]  : mword 3)
   | RISCV_BLT => (vec_of_bits [B1;B0;B0]  : mword 3)
   | RISCV_BGE => (vec_of_bits [B1;B0;B1]  : mword 3)
   | RISCV_BLTU => (vec_of_bits [B1;B1;B0]  : mword 3)
   | RISCV_BGEU => (vec_of_bits [B1;B1;B1]  : mword 3)
   end.

Definition encdec_bop_backwards (arg_ : mword 3) 
: bop :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B0]  : mword 3))) then RISCV_BEQ
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1]  : mword 3))) then RISCV_BNE
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B0]  : mword 3))) then RISCV_BLT
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1]  : mword 3))) then RISCV_BGE
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0]  : mword 3))) then RISCV_BLTU
   else RISCV_BGEU.

Definition encdec_bop_forwards_matches (arg_ : bop) 
: bool :=
   match arg_ with
   | RISCV_BEQ => true
   | RISCV_BNE => true
   | RISCV_BLT => true
   | RISCV_BGE => true
   | RISCV_BLTU => true
   | RISCV_BGEU => true
   end.

Definition encdec_bop_backwards_matches (arg_ : mword 3) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B0]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B0]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1]  : mword 3))) then true
   else false.

Definition btype_mnemonic_forwards (arg_ : bop) 
: string :=
   match arg_ with
   | RISCV_BEQ => "beq"
   | RISCV_BNE => "bne"
   | RISCV_BLT => "blt"
   | RISCV_BGE => "bge"
   | RISCV_BLTU => "bltu"
   | RISCV_BGEU => "bgeu"
   end.

Definition btype_mnemonic_backwards (arg_ : string) 
: M (bop) :=
   (match arg_ with
    | "beq" => returnm (RISCV_BEQ  : bop)
    | "bne" => returnm (RISCV_BNE  : bop)
    | "blt" => returnm (RISCV_BLT  : bop)
    | "bge" => returnm (RISCV_BGE  : bop)
    | "bltu" => returnm (RISCV_BLTU  : bop)
    | "bgeu" => returnm (RISCV_BGEU  : bop)
    | _ => exit tt  : M (bop)
    end)
    : M (bop).

Definition btype_mnemonic_forwards_matches (arg_ : bop) 
: bool :=
   match arg_ with
   | RISCV_BEQ => true
   | RISCV_BNE => true
   | RISCV_BLT => true
   | RISCV_BGE => true
   | RISCV_BLTU => true
   | RISCV_BGEU => true
   end.

Definition btype_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "beq" => true
   | "bne" => true
   | "blt" => true
   | "bge" => true
   | "bltu" => true
   | "bgeu" => true
   | _ => false
   end.

Definition btype_mnemonic_matches_prefix (arg_ : string) 
: option ((bop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1219_ := arg_ in
   if ((andb (string_startswith _stringappend_1219_ "beq")
          (match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "beq")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "beq")))) with
     | s_ =>
        Some
          ((RISCV_BEQ, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1219_ "bne")
               (match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "bne")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "bne")))) with
     | s_ =>
        Some
          ((RISCV_BNE, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1219_ "blt")
               (match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "blt")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "blt")))) with
     | s_ =>
        Some
          ((RISCV_BLT, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1219_ "bge")
               (match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "bge")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "bge")))) with
     | s_ =>
        Some
          ((RISCV_BGE, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1219_ "bltu")
               (match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "bltu")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "bltu")))) with
     | s_ =>
        Some
          ((RISCV_BLTU, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1219_ "bgeu")
               (match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "bgeu")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1219_ (build_ex (projT1 (string_length "bgeu")))) with
     | s_ =>
        Some
          ((RISCV_BGEU, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition encdec_iop_forwards (arg_ : iop) 
: mword 3 :=
   match arg_ with
   | RISCV_ADDI => (vec_of_bits [B0;B0;B0]  : mword 3)
   | RISCV_SLTI => (vec_of_bits [B0;B1;B0]  : mword 3)
   | RISCV_SLTIU => (vec_of_bits [B0;B1;B1]  : mword 3)
   | RISCV_XORI => (vec_of_bits [B1;B0;B0]  : mword 3)
   | RISCV_ORI => (vec_of_bits [B1;B1;B0]  : mword 3)
   | RISCV_ANDI => (vec_of_bits [B1;B1;B1]  : mword 3)
   end.

Definition encdec_iop_backwards (arg_ : mword 3) 
: iop :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B0]  : mword 3))) then RISCV_ADDI
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B0]  : mword 3))) then RISCV_SLTI
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1]  : mword 3))) then RISCV_SLTIU
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B0]  : mword 3))) then RISCV_XORI
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0]  : mword 3))) then RISCV_ORI
   else RISCV_ANDI.

Definition encdec_iop_forwards_matches (arg_ : iop) 
: bool :=
   match arg_ with
   | RISCV_ADDI => true
   | RISCV_SLTI => true
   | RISCV_SLTIU => true
   | RISCV_XORI => true
   | RISCV_ORI => true
   | RISCV_ANDI => true
   end.

Definition encdec_iop_backwards_matches (arg_ : mword 3) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B0]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B0]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B0]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1]  : mword 3))) then true
   else false.

Definition itype_mnemonic_forwards (arg_ : iop) 
: string :=
   match arg_ with
   | RISCV_ADDI => "addi"
   | RISCV_SLTI => "slti"
   | RISCV_SLTIU => "sltiu"
   | RISCV_XORI => "xori"
   | RISCV_ORI => "ori"
   | RISCV_ANDI => "andi"
   end.

Definition itype_mnemonic_backwards (arg_ : string) 
: M (iop) :=
   (match arg_ with
    | "addi" => returnm (RISCV_ADDI  : iop)
    | "slti" => returnm (RISCV_SLTI  : iop)
    | "sltiu" => returnm (RISCV_SLTIU  : iop)
    | "xori" => returnm (RISCV_XORI  : iop)
    | "ori" => returnm (RISCV_ORI  : iop)
    | "andi" => returnm (RISCV_ANDI  : iop)
    | _ => exit tt  : M (iop)
    end)
    : M (iop).

Definition itype_mnemonic_forwards_matches (arg_ : iop) 
: bool :=
   match arg_ with
   | RISCV_ADDI => true
   | RISCV_SLTI => true
   | RISCV_SLTIU => true
   | RISCV_XORI => true
   | RISCV_ORI => true
   | RISCV_ANDI => true
   end.

Definition itype_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "addi" => true
   | "slti" => true
   | "sltiu" => true
   | "xori" => true
   | "ori" => true
   | "andi" => true
   | _ => false
   end.

Definition itype_mnemonic_matches_prefix (arg_ : string) 
: option ((iop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1213_ := arg_ in
   if ((andb (string_startswith _stringappend_1213_ "addi")
          (match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "addi")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "addi")))) with
     | s_ =>
        Some
          ((RISCV_ADDI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1213_ "slti")
               (match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "slti")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "slti")))) with
     | s_ =>
        Some
          ((RISCV_SLTI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1213_ "sltiu")
               (match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "sltiu")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "sltiu")))) with
     | s_ =>
        Some
          ((RISCV_SLTIU, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                             (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1213_ "xori")
               (match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "xori")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "xori")))) with
     | s_ =>
        Some
          ((RISCV_XORI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1213_ "ori")
               (match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "ori")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "ori")))) with
     | s_ =>
        Some
          ((RISCV_ORI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1213_ "andi")
               (match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "andi")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1213_ (build_ex (projT1 (string_length "andi")))) with
     | s_ =>
        Some
          ((RISCV_ANDI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition encdec_sop_forwards (arg_ : sop) 
: mword 3 :=
   match arg_ with
   | RISCV_SLLI => (vec_of_bits [B0;B0;B1]  : mword 3)
   | RISCV_SRLI => (vec_of_bits [B1;B0;B1]  : mword 3)
   | RISCV_SRAI => (vec_of_bits [B1;B0;B1]  : mword 3)
   end.

Definition encdec_sop_backwards (arg_ : mword 3) 
: sop :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B1]  : mword 3))) then RISCV_SLLI
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1]  : mword 3))) then RISCV_SRLI
   else RISCV_SRAI.

Definition encdec_sop_forwards_matches (arg_ : sop) 
: bool :=
   match arg_ with | RISCV_SLLI => true | RISCV_SRLI => true | RISCV_SRAI => true end.

Definition encdec_sop_backwards_matches (arg_ : mword 3) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B1]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1]  : mword 3))) then true
   else false.

Definition shiftiop_mnemonic_forwards (arg_ : sop) 
: string :=
   match arg_ with | RISCV_SLLI => "slli" | RISCV_SRLI => "srli" | RISCV_SRAI => "srai" end.

Definition shiftiop_mnemonic_backwards (arg_ : string) 
: M (sop) :=
   (match arg_ with
    | "slli" => returnm (RISCV_SLLI  : sop)
    | "srli" => returnm (RISCV_SRLI  : sop)
    | "srai" => returnm (RISCV_SRAI  : sop)
    | _ => exit tt  : M (sop)
    end)
    : M (sop).

Definition shiftiop_mnemonic_forwards_matches (arg_ : sop) 
: bool :=
   match arg_ with | RISCV_SLLI => true | RISCV_SRLI => true | RISCV_SRAI => true end.

Definition shiftiop_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "slli" => true | "srli" => true | "srai" => true | _ => false end.

Definition shiftiop_mnemonic_matches_prefix (arg_ : string) 
: option ((sop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1210_ := arg_ in
   if ((andb (string_startswith _stringappend_1210_ "slli")
          (match (string_drop _stringappend_1210_ (build_ex (projT1 (string_length "slli")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1210_ (build_ex (projT1 (string_length "slli")))) with
     | s_ =>
        Some
          ((RISCV_SLLI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1210_ "srli")
               (match (string_drop _stringappend_1210_ (build_ex (projT1 (string_length "srli")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1210_ (build_ex (projT1 (string_length "srli")))) with
     | s_ =>
        Some
          ((RISCV_SRLI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1210_ "srai")
               (match (string_drop _stringappend_1210_ (build_ex (projT1 (string_length "srai")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1210_ (build_ex (projT1 (string_length "srai")))) with
     | s_ =>
        Some
          ((RISCV_SRAI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition rtype_mnemonic_forwards (arg_ : rop) 
: string :=
   match arg_ with
   | RISCV_ADD => "add"
   | RISCV_SUB => "sub"
   | RISCV_SLL => "sll"
   | RISCV_SLT => "slt"
   | RISCV_SLTU => "sltu"
   | RISCV_XOR => "xor"
   | RISCV_SRL => "srl"
   | RISCV_SRA => "sra"
   | RISCV_OR => "or"
   | RISCV_AND => "and"
   end.

Definition rtype_mnemonic_backwards (arg_ : string) 
: M (rop) :=
   (match arg_ with
    | "add" => returnm (RISCV_ADD  : rop)
    | "sub" => returnm (RISCV_SUB  : rop)
    | "sll" => returnm (RISCV_SLL  : rop)
    | "slt" => returnm (RISCV_SLT  : rop)
    | "sltu" => returnm (RISCV_SLTU  : rop)
    | "xor" => returnm (RISCV_XOR  : rop)
    | "srl" => returnm (RISCV_SRL  : rop)
    | "sra" => returnm (RISCV_SRA  : rop)
    | "or" => returnm (RISCV_OR  : rop)
    | "and" => returnm (RISCV_AND  : rop)
    | _ => exit tt  : M (rop)
    end)
    : M (rop).

Definition rtype_mnemonic_forwards_matches (arg_ : rop) 
: bool :=
   match arg_ with
   | RISCV_ADD => true
   | RISCV_SUB => true
   | RISCV_SLL => true
   | RISCV_SLT => true
   | RISCV_SLTU => true
   | RISCV_XOR => true
   | RISCV_SRL => true
   | RISCV_SRA => true
   | RISCV_OR => true
   | RISCV_AND => true
   end.

Definition rtype_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "add" => true
   | "sub" => true
   | "sll" => true
   | "slt" => true
   | "sltu" => true
   | "xor" => true
   | "srl" => true
   | "sra" => true
   | "or" => true
   | "and" => true
   | _ => false
   end.

Definition rtype_mnemonic_matches_prefix (arg_ : string) 
: option ((rop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1200_ := arg_ in
   if ((andb (string_startswith _stringappend_1200_ "add")
          (match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "add")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "add")))) with
     | s_ =>
        Some
          ((RISCV_ADD, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1200_ "sub")
               (match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "sub")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "sub")))) with
     | s_ =>
        Some
          ((RISCV_SUB, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1200_ "sll")
               (match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "sll")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "sll")))) with
     | s_ =>
        Some
          ((RISCV_SLL, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1200_ "slt")
               (match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "slt")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "slt")))) with
     | s_ =>
        Some
          ((RISCV_SLT, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1200_ "sltu")
               (match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "sltu")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "sltu")))) with
     | s_ =>
        Some
          ((RISCV_SLTU, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1200_ "xor")
               (match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "xor")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "xor")))) with
     | s_ =>
        Some
          ((RISCV_XOR, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1200_ "srl")
               (match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "srl")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "srl")))) with
     | s_ =>
        Some
          ((RISCV_SRL, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1200_ "sra")
               (match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "sra")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "sra")))) with
     | s_ =>
        Some
          ((RISCV_SRA, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1200_ "or")
               (match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "or")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "or")))) with
     | s_ =>
        Some
          ((RISCV_OR, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                          (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1200_ "and")
               (match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "and")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1200_ (build_ex (projT1 (string_length "and")))) with
     | s_ =>
        Some
          ((RISCV_AND, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                           (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition extend_value {n : Z} (is_unsigned : bool) (value : MemoryOpResult (mword (8 * n))) `{ArithFact ((0 + 1) <=
  n /\
  n <= 8)} 
: MemoryOpResult (mword 64) :=
   match value with
   | MemValue (v) => MemValue (if (is_unsigned) then EXTZ 64 v else (EXTS 64 v)  : xlenbits)
   | MemException (e) => MemException (e)
   end.

Definition process_load {n : Z} (rd : mword 5) (addr : mword 64) (value : MemoryOpResult (mword (8 * n))) (is_unsigned : bool) `{ArithFact ((0 + 1) <=
  n /\
  n <= 8)} 
: M (bool) :=
   (match (extend_value is_unsigned value) with
    | MemValue (result) =>
       wX
         (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
          : {syn_n : Z & ArithFact (0 <= syn_n /\ (syn_n + 1) <= 32)})) result >>
       returnm (true
        : bool)
    | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
    end)
    : M (bool).

Definition check_misaligned (vaddr : mword 64) (width : word_width) 
: M (bool) :=
   (if ((plat_enable_misaligned_access tt)) then returnm (false  : bool)
    else
      (match width with
       | BYTE => returnm (false  : bool)
       | HALF =>
          bit_to_bool (access_vec_dec vaddr 0) >>= fun w__0 : bool =>
          returnm ((Bool.eqb (w__0  : bool) true)
           : bool)
       | WORD =>
          (or_boolM
             (bit_to_bool (access_vec_dec vaddr 0) >>= fun w__1 : bool =>
              returnm ((Bool.eqb (w__1  : bool) true)
               : bool))
             (bit_to_bool (access_vec_dec vaddr 1) >>= fun w__2 : bool =>
              returnm ((Bool.eqb (w__2  : bool) true)
               : bool)))
           : M (bool)
       | DOUBLE =>
          (or_boolM
             (bit_to_bool (access_vec_dec vaddr 0) >>= fun w__4 : bool =>
              returnm ((Bool.eqb (w__4  : bool) true)
               : bool))
             ((or_boolM
                 (bit_to_bool (access_vec_dec vaddr 1) >>= fun w__5 : bool =>
                  returnm ((Bool.eqb (w__5  : bool) true)
                   : bool))
                 (bit_to_bool (access_vec_dec vaddr 2) >>= fun w__6 : bool =>
                  returnm ((Bool.eqb (w__6  : bool) true)
                   : bool)))
              : M (bool)))
           : M (bool)
       end)
       : M (bool))
    : M (bool).

Definition maybe_aq_forwards (arg_ : bool) 
: string :=
   match arg_ with | true => ".aq" | false => "" end.

Definition maybe_aq_backwards (arg_ : string) 
: M (bool) :=
   (match arg_ with
    | ".aq" => returnm (true  : bool)
    | "" => returnm (false  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition maybe_aq_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_aq_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | ".aq" => true | "" => true | _ => false end.

Definition maybe_aq_matches_prefix (arg_ : string) 
: option ((bool * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1198_ := arg_ in
   if ((andb (string_startswith _stringappend_1198_ ".aq")
          (match (string_drop _stringappend_1198_ (build_ex (projT1 (string_length ".aq")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1198_ (build_ex (projT1 (string_length ".aq")))) with
     | s_ =>
        Some
          ((true, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                      (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1198_ "")
               (match (string_drop _stringappend_1198_ (build_ex (projT1 (string_length "")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1198_ (build_ex (projT1 (string_length "")))) with
     | s_ =>
        Some
          ((false, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                       (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition maybe_rl_forwards (arg_ : bool) 
: string :=
   match arg_ with | true => ".rl" | false => "" end.

Definition maybe_rl_backwards (arg_ : string) 
: M (bool) :=
   (match arg_ with
    | ".rl" => returnm (true  : bool)
    | "" => returnm (false  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition maybe_rl_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_rl_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | ".rl" => true | "" => true | _ => false end.

Definition maybe_rl_matches_prefix (arg_ : string) 
: option ((bool * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1196_ := arg_ in
   if ((andb (string_startswith _stringappend_1196_ ".rl")
          (match (string_drop _stringappend_1196_ (build_ex (projT1 (string_length ".rl")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1196_ (build_ex (projT1 (string_length ".rl")))) with
     | s_ =>
        Some
          ((true, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                      (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1196_ "")
               (match (string_drop _stringappend_1196_ (build_ex (projT1 (string_length "")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1196_ (build_ex (projT1 (string_length "")))) with
     | s_ =>
        Some
          ((false, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                       (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition maybe_u_forwards (arg_ : bool) 
: string :=
   match arg_ with | true => "u" | false => "" end.

Definition maybe_u_backwards (arg_ : string) 
: M (bool) :=
   (match arg_ with
    | "u" => returnm (true  : bool)
    | "" => returnm (false  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition maybe_u_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_u_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "u" => true | "" => true | _ => false end.

Definition maybe_u_matches_prefix (arg_ : string) 
: option ((bool * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1194_ := arg_ in
   if ((andb (string_startswith _stringappend_1194_ "u")
          (match (string_drop _stringappend_1194_ (build_ex (projT1 (string_length "u")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1194_ (build_ex (projT1 (string_length "u")))) with
     | s_ =>
        Some
          ((true, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                      (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1194_ "")
               (match (string_drop _stringappend_1194_ (build_ex (projT1 (string_length "")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1194_ (build_ex (projT1 (string_length "")))) with
     | s_ =>
        Some
          ((false, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                       (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition shiftw_mnemonic_forwards (arg_ : sop) 
: string :=
   match arg_ with | RISCV_SLLI => "slli" | RISCV_SRLI => "srli" | RISCV_SRAI => "srai" end.

Definition shiftw_mnemonic_backwards (arg_ : string) 
: M (sop) :=
   (match arg_ with
    | "slli" => returnm (RISCV_SLLI  : sop)
    | "srli" => returnm (RISCV_SRLI  : sop)
    | "srai" => returnm (RISCV_SRAI  : sop)
    | _ => exit tt  : M (sop)
    end)
    : M (sop).

Definition shiftw_mnemonic_forwards_matches (arg_ : sop) 
: bool :=
   match arg_ with | RISCV_SLLI => true | RISCV_SRLI => true | RISCV_SRAI => true end.

Definition shiftw_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "slli" => true | "srli" => true | "srai" => true | _ => false end.

Definition shiftw_mnemonic_matches_prefix (arg_ : string) 
: option ((sop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1191_ := arg_ in
   if ((andb (string_startswith _stringappend_1191_ "slli")
          (match (string_drop _stringappend_1191_ (build_ex (projT1 (string_length "slli")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1191_ (build_ex (projT1 (string_length "slli")))) with
     | s_ =>
        Some
          ((RISCV_SLLI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1191_ "srli")
               (match (string_drop _stringappend_1191_ (build_ex (projT1 (string_length "srli")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1191_ (build_ex (projT1 (string_length "srli")))) with
     | s_ =>
        Some
          ((RISCV_SRLI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1191_ "srai")
               (match (string_drop _stringappend_1191_ (build_ex (projT1 (string_length "srai")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1191_ (build_ex (projT1 (string_length "srai")))) with
     | s_ =>
        Some
          ((RISCV_SRAI, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition rtypew_mnemonic_forwards (arg_ : ropw) 
: string :=
   match arg_ with
   | RISCV_ADDW => "addw"
   | RISCV_SUBW => "subw"
   | RISCV_SLLW => "sllw"
   | RISCV_SRLW => "srlw"
   | RISCV_SRAW => "sraw"
   end.

Definition rtypew_mnemonic_backwards (arg_ : string) 
: M (ropw) :=
   (match arg_ with
    | "addw" => returnm (RISCV_ADDW  : ropw)
    | "subw" => returnm (RISCV_SUBW  : ropw)
    | "sllw" => returnm (RISCV_SLLW  : ropw)
    | "srlw" => returnm (RISCV_SRLW  : ropw)
    | "sraw" => returnm (RISCV_SRAW  : ropw)
    | _ => exit tt  : M (ropw)
    end)
    : M (ropw).

Definition rtypew_mnemonic_forwards_matches (arg_ : ropw) 
: bool :=
   match arg_ with
   | RISCV_ADDW => true
   | RISCV_SUBW => true
   | RISCV_SLLW => true
   | RISCV_SRLW => true
   | RISCV_SRAW => true
   end.

Definition rtypew_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "addw" => true
   | "subw" => true
   | "sllw" => true
   | "srlw" => true
   | "sraw" => true
   | _ => false
   end.

Definition rtypew_mnemonic_matches_prefix (arg_ : string) 
: option ((ropw * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1186_ := arg_ in
   if ((andb (string_startswith _stringappend_1186_ "addw")
          (match (string_drop _stringappend_1186_ (build_ex (projT1 (string_length "addw")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1186_ (build_ex (projT1 (string_length "addw")))) with
     | s_ =>
        Some
          ((RISCV_ADDW, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1186_ "subw")
               (match (string_drop _stringappend_1186_ (build_ex (projT1 (string_length "subw")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1186_ (build_ex (projT1 (string_length "subw")))) with
     | s_ =>
        Some
          ((RISCV_SUBW, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1186_ "sllw")
               (match (string_drop _stringappend_1186_ (build_ex (projT1 (string_length "sllw")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1186_ (build_ex (projT1 (string_length "sllw")))) with
     | s_ =>
        Some
          ((RISCV_SLLW, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1186_ "srlw")
               (match (string_drop _stringappend_1186_ (build_ex (projT1 (string_length "srlw")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1186_ (build_ex (projT1 (string_length "srlw")))) with
     | s_ =>
        Some
          ((RISCV_SRLW, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1186_ "sraw")
               (match (string_drop _stringappend_1186_ (build_ex (projT1 (string_length "sraw")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1186_ (build_ex (projT1 (string_length "sraw")))) with
     | s_ =>
        Some
          ((RISCV_SRAW, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                            (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition shiftiwop_mnemonic_forwards (arg_ : sopw) 
: string :=
   match arg_ with | RISCV_SLLIW => "slliw" | RISCV_SRLIW => "srliw" | RISCV_SRAIW => "sraiw" end.

Definition shiftiwop_mnemonic_backwards (arg_ : string) 
: M (sopw) :=
   (match arg_ with
    | "slliw" => returnm (RISCV_SLLIW  : sopw)
    | "srliw" => returnm (RISCV_SRLIW  : sopw)
    | "sraiw" => returnm (RISCV_SRAIW  : sopw)
    | _ => exit tt  : M (sopw)
    end)
    : M (sopw).

Definition shiftiwop_mnemonic_forwards_matches (arg_ : sopw) 
: bool :=
   match arg_ with | RISCV_SLLIW => true | RISCV_SRLIW => true | RISCV_SRAIW => true end.

Definition shiftiwop_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "slliw" => true | "srliw" => true | "sraiw" => true | _ => false end.

Definition shiftiwop_mnemonic_matches_prefix (arg_ : string) 
: option ((sopw * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1183_ := arg_ in
   if ((andb (string_startswith _stringappend_1183_ "slliw")
          (match (string_drop _stringappend_1183_ (build_ex (projT1 (string_length "slliw")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1183_ (build_ex (projT1 (string_length "slliw")))) with
     | s_ =>
        Some
          ((RISCV_SLLIW, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                             (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1183_ "srliw")
               (match (string_drop _stringappend_1183_ (build_ex (projT1 (string_length "srliw")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1183_ (build_ex (projT1 (string_length "srliw")))) with
     | s_ =>
        Some
          ((RISCV_SRLIW, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                             (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1183_ "sraiw")
               (match (string_drop _stringappend_1183_ (build_ex (projT1 (string_length "sraiw")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1183_ (build_ex (projT1 (string_length "sraiw")))) with
     | s_ =>
        Some
          ((RISCV_SRAIW, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                             (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition encdec_mul_op_forwards (arg0 : bool) (arg1 : bool) (arg2 : bool) 
: M (mword 3) :=
   let arg_ := (arg0, arg1, arg2) in
   (match arg_ with
    | (false, true, true) => returnm ((vec_of_bits [B0;B0;B0]  : mword 3)  : mword 3)
    | (true, true, true) => returnm ((vec_of_bits [B0;B0;B1]  : mword 3)  : mword 3)
    | (true, true, false) => returnm ((vec_of_bits [B0;B1;B0]  : mword 3)  : mword 3)
    | (true, false, false) => returnm ((vec_of_bits [B0;B1;B1]  : mword 3)  : mword 3)
    | _ => exit tt  : M (mword 3)
    end)
    : M (mword 3).

Definition encdec_mul_op_backwards (arg_ : mword 3) 
: (bool * bool * bool) :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B0]  : mword 3))) then (false, true, true)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1]  : mword 3))) then (true, true, true)
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B0]  : mword 3))) then (true, true, false)
   else (true, false, false).

Definition encdec_mul_op_forwards_matches (arg0 : bool) (arg1 : bool) (arg2 : bool) 
: bool :=
   let arg_ := (arg0, arg1, arg2) in
   match arg_ with
   | (false, true, true) => true
   | (true, true, true) => true
   | (true, true, false) => true
   | (true, false, false) => true
   | _ => false
   end.

Definition encdec_mul_op_backwards_matches (arg_ : mword 3) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B0]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B0]  : mword 3))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1]  : mword 3))) then true
   else false.

Definition mul_mnemonic_forwards (arg0 : bool) (arg1 : bool) (arg2 : bool) 
: M (string) :=
   let arg_ := (arg0, arg1, arg2) in
   (match arg_ with
    | (false, true, true) => returnm ("mul"  : string)
    | (true, true, true) => returnm ("mulh"  : string)
    | (true, true, false) => returnm ("mulhsu"  : string)
    | (true, false, false) => returnm ("mulhu"  : string)
    | _ => exit tt  : M (string)
    end)
    : M (string).

Definition mul_mnemonic_backwards (arg_ : string) 
: M ((bool * bool * bool)) :=
   (match arg_ with
    | "mul" => returnm (false, true, true)
    | "mulh" => returnm (true, true, true)
    | "mulhsu" => returnm (true, true, false)
    | "mulhu" => returnm (true, false, false)
    | _ => exit tt  : M ((bool * bool * bool))
    end)
    : M ((bool * bool * bool)).

Definition mul_mnemonic_forwards_matches (arg0 : bool) (arg1 : bool) (arg2 : bool) 
: bool :=
   let arg_ := (arg0, arg1, arg2) in
   match arg_ with
   | (false, true, true) => true
   | (true, true, true) => true
   | (true, true, false) => true
   | (true, false, false) => true
   | _ => false
   end.

Definition mul_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "mul" => true
   | "mulh" => true
   | "mulhsu" => true
   | "mulhu" => true
   | _ => false
   end.

Definition mul_mnemonic_matches_prefix (arg_ : string) 
: option (((bool * bool * bool) * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1179_ := arg_ in
   if ((andb (string_startswith _stringappend_1179_ "mul")
          (match (string_drop _stringappend_1179_ (build_ex (projT1 (string_length "mul")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1179_ (build_ex (projT1 (string_length "mul")))) with
     | s_ =>
        Some
          (((false, true, true), build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                                     (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1179_ "mulh")
               (match (string_drop _stringappend_1179_ (build_ex (projT1 (string_length "mulh")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1179_ (build_ex (projT1 (string_length "mulh")))) with
     | s_ =>
        Some
          (((true, true, true), build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                                    (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1179_ "mulhsu")
               (match (string_drop _stringappend_1179_ (build_ex (projT1 (string_length "mulhsu")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1179_ (build_ex (projT1 (string_length "mulhsu")))) with
     | s_ =>
        Some
          (((true, true, false), build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                                     (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1179_ "mulhu")
               (match (string_drop _stringappend_1179_ (build_ex (projT1 (string_length "mulhu")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1179_ (build_ex (projT1 (string_length "mulhu")))) with
     | s_ =>
        Some
          (((true, false, false), build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                                      (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition maybe_not_u_forwards (arg_ : bool) 
: string :=
   match arg_ with | false => "u" | true => "" end.

Definition maybe_not_u_backwards (arg_ : string) 
: M (bool) :=
   (match arg_ with
    | "u" => returnm (false  : bool)
    | "" => returnm (true  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition maybe_not_u_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | false => true | true => true end.

Definition maybe_not_u_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "u" => true | "" => true | _ => false end.

Definition maybe_not_u_matches_prefix (arg_ : string) 
: option ((bool * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1177_ := arg_ in
   if ((andb (string_startswith _stringappend_1177_ "u")
          (match (string_drop _stringappend_1177_ (build_ex (projT1 (string_length "u")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1177_ (build_ex (projT1 (string_length "u")))) with
     | s_ =>
        Some
          ((false, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                       (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1177_ "")
               (match (string_drop _stringappend_1177_ (build_ex (projT1 (string_length "")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1177_ (build_ex (projT1 (string_length "")))) with
     | s_ =>
        Some
          ((true, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                      (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition bit_maybe_r_forwards (arg_ : mword 1) 
: string :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B1]  : mword 1))) then "r"
   else "".

Definition bit_maybe_r_backwards (arg_ : string) 
: M (mword 1) :=
   (match arg_ with
    | "r" => returnm ((vec_of_bits [B1]  : mword 1)  : mword 1)
    | "" => returnm ((vec_of_bits [B0]  : mword 1)  : mword 1)
    | _ => exit tt  : M (mword 1)
    end)
    : M (mword 1).

Definition bit_maybe_r_forwards_matches (arg_ : mword 1) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B1]  : mword 1))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bit_maybe_r_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "r" => true | "" => true | _ => false end.

Definition bit_maybe_r_matches_prefix (arg_ : string) 
: option ((mword 1 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1175_ := arg_ in
   if ((andb (string_startswith _stringappend_1175_ "r")
          (match (string_drop _stringappend_1175_ (build_ex (projT1 (string_length "r")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1175_ (build_ex (projT1 (string_length "r")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1]  : mword 1), build_ex (projT1 (sub_nat
                                                               (build_ex (projT1 (string_length arg_)))
                                                               (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1175_ "")
               (match (string_drop _stringappend_1175_ (build_ex (projT1 (string_length "")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1175_ (build_ex (projT1 (string_length "")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0]  : mword 1), build_ex (projT1 (sub_nat
                                                               (build_ex (projT1 (string_length arg_)))
                                                               (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition bit_maybe_w_forwards (arg_ : mword 1) 
: string :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B1]  : mword 1))) then "w"
   else "".

Definition bit_maybe_w_backwards (arg_ : string) 
: M (mword 1) :=
   (match arg_ with
    | "w" => returnm ((vec_of_bits [B1]  : mword 1)  : mword 1)
    | "" => returnm ((vec_of_bits [B0]  : mword 1)  : mword 1)
    | _ => exit tt  : M (mword 1)
    end)
    : M (mword 1).

Definition bit_maybe_w_forwards_matches (arg_ : mword 1) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B1]  : mword 1))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bit_maybe_w_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "w" => true | "" => true | _ => false end.

Definition bit_maybe_w_matches_prefix (arg_ : string) 
: option ((mword 1 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1173_ := arg_ in
   if ((andb (string_startswith _stringappend_1173_ "w")
          (match (string_drop _stringappend_1173_ (build_ex (projT1 (string_length "w")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1173_ (build_ex (projT1 (string_length "w")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1]  : mword 1), build_ex (projT1 (sub_nat
                                                               (build_ex (projT1 (string_length arg_)))
                                                               (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1173_ "")
               (match (string_drop _stringappend_1173_ (build_ex (projT1 (string_length "")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1173_ (build_ex (projT1 (string_length "")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0]  : mword 1), build_ex (projT1 (sub_nat
                                                               (build_ex (projT1 (string_length arg_)))
                                                               (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition bit_maybe_i_forwards (arg_ : mword 1) 
: string :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B1]  : mword 1))) then "i"
   else "".

Definition bit_maybe_i_backwards (arg_ : string) 
: M (mword 1) :=
   (match arg_ with
    | "i" => returnm ((vec_of_bits [B1]  : mword 1)  : mword 1)
    | "" => returnm ((vec_of_bits [B0]  : mword 1)  : mword 1)
    | _ => exit tt  : M (mword 1)
    end)
    : M (mword 1).

Definition bit_maybe_i_forwards_matches (arg_ : mword 1) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B1]  : mword 1))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bit_maybe_i_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "i" => true | "" => true | _ => false end.

Definition bit_maybe_i_matches_prefix (arg_ : string) 
: option ((mword 1 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1171_ := arg_ in
   if ((andb (string_startswith _stringappend_1171_ "i")
          (match (string_drop _stringappend_1171_ (build_ex (projT1 (string_length "i")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1171_ (build_ex (projT1 (string_length "i")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1]  : mword 1), build_ex (projT1 (sub_nat
                                                               (build_ex (projT1 (string_length arg_)))
                                                               (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1171_ "")
               (match (string_drop _stringappend_1171_ (build_ex (projT1 (string_length "")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1171_ (build_ex (projT1 (string_length "")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0]  : mword 1), build_ex (projT1 (sub_nat
                                                               (build_ex (projT1 (string_length arg_)))
                                                               (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition bit_maybe_o_forwards (arg_ : mword 1) 
: string :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B1]  : mword 1))) then "o"
   else "".

Definition bit_maybe_o_backwards (arg_ : string) 
: M (mword 1) :=
   (match arg_ with
    | "o" => returnm ((vec_of_bits [B1]  : mword 1)  : mword 1)
    | "" => returnm ((vec_of_bits [B0]  : mword 1)  : mword 1)
    | _ => exit tt  : M (mword 1)
    end)
    : M (mword 1).

Definition bit_maybe_o_forwards_matches (arg_ : mword 1) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B1]  : mword 1))) then true
   else if ((eq_vec b__0 (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bit_maybe_o_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "o" => true | "" => true | _ => false end.

Definition bit_maybe_o_matches_prefix (arg_ : string) 
: option ((mword 1 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1169_ := arg_ in
   if ((andb (string_startswith _stringappend_1169_ "o")
          (match (string_drop _stringappend_1169_ (build_ex (projT1 (string_length "o")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1169_ (build_ex (projT1 (string_length "o")))) with
     | s_ =>
        Some
          (((vec_of_bits [B1]  : mword 1), build_ex (projT1 (sub_nat
                                                               (build_ex (projT1 (string_length arg_)))
                                                               (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1169_ "")
               (match (string_drop _stringappend_1169_ (build_ex (projT1 (string_length "")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1169_ (build_ex (projT1 (string_length "")))) with
     | s_ =>
        Some
          (((vec_of_bits [B0]  : mword 1), build_ex (projT1 (sub_nat
                                                               (build_ex (projT1 (string_length arg_)))
                                                               (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition fence_bits_forwards (arg_ : mword 4) 
: string :=
   match arg_ with
   | v__0 =>
      let i : bits 1 := subrange_vec_dec v__0 3 3 in
      let w : bits 1 := subrange_vec_dec v__0 0 0 in
      let r : bits 1 := subrange_vec_dec v__0 1 1 in
      let o : bits 1 := subrange_vec_dec v__0 2 2 in
      let i : bits 1 := subrange_vec_dec v__0 3 3 in
      string_append (bit_maybe_i_forwards i)
        (string_append (bit_maybe_o_forwards o)
           (string_append (bit_maybe_r_forwards r) (string_append (bit_maybe_w_forwards w) "")))
   end.

Definition fence_bits_backwards (arg_ : string) 
: M (mword 4) :=
   let _stringappend_1161_ := arg_ in
   (match (bit_maybe_i_matches_prefix _stringappend_1161_) with
    | Some (i,(existT _ _stringappend_1162_ _)) => returnm (i, build_ex _stringappend_1162_)
    | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
    end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(i, existT _ _stringappend_1162_ _) =>
   let _stringappend_1163_ := string_drop _stringappend_1161_ (build_ex _stringappend_1162_) in
   (match (bit_maybe_o_matches_prefix _stringappend_1163_) with
    | Some (o,(existT _ _stringappend_1164_ _)) => returnm (o, build_ex _stringappend_1164_)
    | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
    end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(o, existT _ _stringappend_1164_ _) =>
   let _stringappend_1165_ := string_drop _stringappend_1163_ (build_ex _stringappend_1164_) in
   (match (bit_maybe_r_matches_prefix _stringappend_1165_) with
    | Some (r,(existT _ _stringappend_1166_ _)) => returnm (r, build_ex _stringappend_1166_)
    | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
    end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(r, existT _ _stringappend_1166_ _) =>
   let _stringappend_1167_ := string_drop _stringappend_1165_ (build_ex _stringappend_1166_) in
   (match (bit_maybe_w_matches_prefix _stringappend_1167_) with
    | Some (w,(existT _ _stringappend_1168_ _)) => returnm (w, build_ex _stringappend_1168_)
    | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
    end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(w, existT _ _stringappend_1168_ _) =>
   (match (string_drop _stringappend_1167_ (build_ex _stringappend_1168_)) with
    | "" =>
       returnm ((concat_vec (i  : bits 1)
                   (concat_vec (o  : bits 1) (concat_vec (r  : bits 1) (w  : bits 1))))
        : mword (1 + 3))
    | _ => exit tt  : M (mword 4)
    end)
    : M (mword 4).

Definition fence_bits_forwards_matches (arg_ : mword 4) 
: bool :=
   match arg_ with | v__1 => true end.

Definition fence_bits_backwards_matches (arg_ : string) 
: M (bool) :=
   let _stringappend_1153_ := arg_ in
   (if ((match (bit_maybe_i_matches_prefix _stringappend_1153_) with
         | Some (i,(existT _ _stringappend_1154_ _)) =>
            let _stringappend_1155_ :=
              string_drop _stringappend_1153_ (build_ex _stringappend_1154_) in
            if ((match (bit_maybe_o_matches_prefix _stringappend_1155_) with
                 | Some (o,(existT _ _stringappend_1156_ _)) =>
                    let _stringappend_1157_ :=
                      string_drop _stringappend_1155_ (build_ex _stringappend_1156_) in
                    if ((match (bit_maybe_r_matches_prefix _stringappend_1157_) with
                         | Some (r,(existT _ _stringappend_1158_ _)) =>
                            let _stringappend_1159_ :=
                              string_drop _stringappend_1157_ (build_ex _stringappend_1158_) in
                            if ((match (bit_maybe_w_matches_prefix _stringappend_1159_) with
                                 | Some (w,(existT _ _stringappend_1160_ _)) =>
                                    match (string_drop _stringappend_1159_
                                             (build_ex _stringappend_1160_)) with
                                    | "" => true
                                    | _ => false
                                    end
                                 | None => false
                                 end)) then
                              true
                            else false
                         | None => false
                         end)) then
                      true
                    else false
                 | None => false
                 end)) then
              true
            else false
         | None => false
         end)) then
      (match (bit_maybe_i_matches_prefix _stringappend_1153_) with
       | Some (i,(existT _ _stringappend_1154_ _)) => returnm (i, build_ex _stringappend_1154_)
       | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(i, existT _ _stringappend_1154_ _) =>
      let _stringappend_1155_ := string_drop _stringappend_1153_ (build_ex _stringappend_1154_) in
      (match (bit_maybe_o_matches_prefix _stringappend_1155_) with
       | Some (o,(existT _ _stringappend_1156_ _)) => returnm (o, build_ex _stringappend_1156_)
       | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(o, existT _ _stringappend_1156_ _) =>
      let _stringappend_1157_ := string_drop _stringappend_1155_ (build_ex _stringappend_1156_) in
      (match (bit_maybe_r_matches_prefix _stringappend_1157_) with
       | Some (r,(existT _ _stringappend_1158_ _)) => returnm (r, build_ex _stringappend_1158_)
       | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(r, existT _ _stringappend_1158_ _) =>
      let _stringappend_1159_ := string_drop _stringappend_1157_ (build_ex _stringappend_1158_) in
      (match (bit_maybe_w_matches_prefix _stringappend_1159_) with
       | Some (w,(existT _ _stringappend_1160_ _)) => returnm (w, build_ex _stringappend_1160_)
       | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(w, existT _ _stringappend_1160_ _) =>
      (match (string_drop _stringappend_1159_ (build_ex _stringappend_1160_)) with
       | "" => returnm (true  : bool)
       | _ => exit tt  : M (bool)
       end)
       : M (bool)
    else returnm (false  : bool))
    : M (bool).

Definition fence_bits_matches_prefix (arg_ : string) 
: M (option ((mword 4 * {n : Z & ArithFact (n >= 0)}))) :=
   let _stringappend_1145_ := arg_ in
   (if ((match (bit_maybe_i_matches_prefix _stringappend_1145_) with
         | Some (i,(existT _ _stringappend_1146_ _)) =>
            let _stringappend_1147_ :=
              string_drop _stringappend_1145_ (build_ex _stringappend_1146_) in
            if ((match (bit_maybe_o_matches_prefix _stringappend_1147_) with
                 | Some (o,(existT _ _stringappend_1148_ _)) =>
                    let _stringappend_1149_ :=
                      string_drop _stringappend_1147_ (build_ex _stringappend_1148_) in
                    if ((match (bit_maybe_r_matches_prefix _stringappend_1149_) with
                         | Some (r,(existT _ _stringappend_1150_ _)) =>
                            let _stringappend_1151_ :=
                              string_drop _stringappend_1149_ (build_ex _stringappend_1150_) in
                            if ((match (bit_maybe_w_matches_prefix _stringappend_1151_) with
                                 | Some (w,(existT _ _stringappend_1152_ _)) =>
                                    match (string_drop _stringappend_1151_
                                             (build_ex _stringappend_1152_)) with
                                    | s_ => true
                                    end
                                 | None => false
                                 end)) then
                              true
                            else false
                         | None => false
                         end)) then
                      true
                    else false
                 | None => false
                 end)) then
              true
            else false
         | None => false
         end)) then
      (match (bit_maybe_i_matches_prefix _stringappend_1145_) with
       | Some (i,(existT _ _stringappend_1146_ _)) => returnm (i, build_ex _stringappend_1146_)
       | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(i, existT _ _stringappend_1146_ _) =>
      let _stringappend_1147_ := string_drop _stringappend_1145_ (build_ex _stringappend_1146_) in
      (match (bit_maybe_o_matches_prefix _stringappend_1147_) with
       | Some (o,(existT _ _stringappend_1148_ _)) => returnm (o, build_ex _stringappend_1148_)
       | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(o, existT _ _stringappend_1148_ _) =>
      let _stringappend_1149_ := string_drop _stringappend_1147_ (build_ex _stringappend_1148_) in
      (match (bit_maybe_r_matches_prefix _stringappend_1149_) with
       | Some (r,(existT _ _stringappend_1150_ _)) => returnm (r, build_ex _stringappend_1150_)
       | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(r, existT _ _stringappend_1150_ _) =>
      let _stringappend_1151_ := string_drop _stringappend_1149_ (build_ex _stringappend_1150_) in
      (match (bit_maybe_w_matches_prefix _stringappend_1151_) with
       | Some (w,(existT _ _stringappend_1152_ _)) => returnm (w, build_ex _stringappend_1152_)
       | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(w, existT _ _stringappend_1152_ _) =>
      returnm ((match (string_drop _stringappend_1151_ (build_ex _stringappend_1152_)) with
                | s_ =>
                   Some
                     ((concat_vec (i  : bits 1)
                         (concat_vec (o  : bits 1) (concat_vec (r  : bits 1) (w  : bits 1))), build_ex (projT1 (sub_nat
                                                                                                                  (build_ex (projT1 (string_length
                                                                                                                                       arg_)))
                                                                                                                  (build_ex (projT1 (string_length
                                                                                                                                       s_)))))))
                end)
       : option ((mword 4 * {n : Z & ArithFact (n >= 0)})))
    else returnm (None  : option ((mword 4 * {n : Z & ArithFact (n >= 0)}))))
    : M (option ((mword 4 * {n : Z & ArithFact (n >= 0)}))).

Definition aqrl_str (aq : bool) (rl : bool) 
: string :=
   match (aq, rl) with
   | (false, false) => ""
   | (false, true) => ".rl"
   | (true, false) => ".aq"
   | (true, true) => ".aqrl"
   end.

Definition lrsc_width_str (width : word_width) 
: string :=
   match width with | BYTE => ".b" | HALF => ".h" | WORD => ".w" | DOUBLE => ".d" end.

Definition process_loadres {n : Z} (rd : mword 5) (addr : mword 64) (value : MemoryOpResult (mword (8 * n))) (is_unsigned : bool) `{ArithFact ((0 + 1) <=
  n /\
  n <= 8)} 
: M (bool) :=
   (match (extend_value is_unsigned value) with
    | MemValue (result) =>
       let '_ := (load_reservation addr)  : unit in
       wX
         (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
          : {syn_n : Z & ArithFact (0 <= syn_n /\ (syn_n + 1) <= 32)})) result >>
       returnm (true
        : bool)
    | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
    end)
    : M (bool).

Definition encdec_amoop_forwards (arg_ : amoop) 
: mword 5 :=
   match arg_ with
   | AMOSWAP => (vec_of_bits [B0;B0;B0;B0;B1]  : mword 5)
   | AMOADD => (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
   | AMOXOR => (vec_of_bits [B0;B0;B1;B0;B0]  : mword 5)
   | AMOAND => (vec_of_bits [B0;B1;B1;B0;B0]  : mword 5)
   | AMOOR => (vec_of_bits [B0;B1;B0;B0;B0]  : mword 5)
   | AMOMIN => (vec_of_bits [B1;B0;B0;B0;B0]  : mword 5)
   | AMOMAX => (vec_of_bits [B1;B0;B1;B0;B0]  : mword 5)
   | AMOMINU => (vec_of_bits [B1;B1;B0;B0;B0]  : mword 5)
   | AMOMAXU => (vec_of_bits [B1;B1;B1;B0;B0]  : mword 5)
   end.

Definition encdec_amoop_backwards (arg_ : mword 5) 
: amoop :=
   let b__0 := arg_ in
   if sumbool_of_bool ((Z.eqb
                          (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                          (projT1 ((build_ex (projT1 (regbits_to_regno
                                                        (vec_of_bits [B0;B0;B0;B0;B1]  : mword 5))))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOSWAP
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOADD
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOXOR
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOAND
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOOR
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOMIN
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOMAX
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOMINU
   else AMOMAXU.

Definition encdec_amoop_forwards_matches (arg_ : amoop) 
: bool :=
   match arg_ with
   | AMOSWAP => true
   | AMOADD => true
   | AMOXOR => true
   | AMOAND => true
   | AMOOR => true
   | AMOMIN => true
   | AMOMAX => true
   | AMOMINU => true
   | AMOMAXU => true
   end.

Definition encdec_amoop_backwards_matches (arg_ : mword 5) 
: bool :=
   let b__0 := arg_ in
   if sumbool_of_bool ((Z.eqb
                          (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                          (projT1 ((build_ex (projT1 (regbits_to_regno
                                                        (vec_of_bits [B0;B0;B0;B0;B1]  : mword 5))))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B1;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B0;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno b__0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B1;B1;B1;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else false.

Definition amo_mnemonic_forwards (arg_ : amoop) 
: string :=
   match arg_ with
   | AMOSWAP => "amoswap"
   | AMOADD => "amoadd"
   | AMOXOR => "amoxor"
   | AMOAND => "amoand"
   | AMOOR => "amoor"
   | AMOMIN => "amomin"
   | AMOMAX => "amomax"
   | AMOMINU => "amominu"
   | AMOMAXU => "amomaxu"
   end.

Definition amo_mnemonic_backwards (arg_ : string) 
: M (amoop) :=
   (match arg_ with
    | "amoswap" => returnm (AMOSWAP  : amoop)
    | "amoadd" => returnm (AMOADD  : amoop)
    | "amoxor" => returnm (AMOXOR  : amoop)
    | "amoand" => returnm (AMOAND  : amoop)
    | "amoor" => returnm (AMOOR  : amoop)
    | "amomin" => returnm (AMOMIN  : amoop)
    | "amomax" => returnm (AMOMAX  : amoop)
    | "amominu" => returnm (AMOMINU  : amoop)
    | "amomaxu" => returnm (AMOMAXU  : amoop)
    | _ => exit tt  : M (amoop)
    end)
    : M (amoop).

Definition amo_mnemonic_forwards_matches (arg_ : amoop) 
: bool :=
   match arg_ with
   | AMOSWAP => true
   | AMOADD => true
   | AMOXOR => true
   | AMOAND => true
   | AMOOR => true
   | AMOMIN => true
   | AMOMAX => true
   | AMOMINU => true
   | AMOMAXU => true
   end.

Definition amo_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "amoswap" => true
   | "amoadd" => true
   | "amoxor" => true
   | "amoand" => true
   | "amoor" => true
   | "amomin" => true
   | "amomax" => true
   | "amominu" => true
   | "amomaxu" => true
   | _ => false
   end.

Definition amo_mnemonic_matches_prefix (arg_ : string) 
: option ((amoop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1136_ := arg_ in
   if ((andb (string_startswith _stringappend_1136_ "amoswap")
          (match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amoswap")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amoswap")))) with
     | s_ =>
        Some
          ((AMOSWAP, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                         (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1136_ "amoadd")
               (match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amoadd")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amoadd")))) with
     | s_ =>
        Some
          ((AMOADD, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                        (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1136_ "amoxor")
               (match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amoxor")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amoxor")))) with
     | s_ =>
        Some
          ((AMOXOR, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                        (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1136_ "amoand")
               (match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amoand")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amoand")))) with
     | s_ =>
        Some
          ((AMOAND, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                        (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1136_ "amoor")
               (match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amoor")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amoor")))) with
     | s_ =>
        Some
          ((AMOOR, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                       (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1136_ "amomin")
               (match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amomin")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amomin")))) with
     | s_ =>
        Some
          ((AMOMIN, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                        (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1136_ "amomax")
               (match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amomax")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amomax")))) with
     | s_ =>
        Some
          ((AMOMAX, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                        (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1136_ "amominu")
               (match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amominu")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amominu")))) with
     | s_ =>
        Some
          ((AMOMINU, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                         (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1136_ "amomaxu")
               (match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amomaxu")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1136_ (build_ex (projT1 (string_length "amomaxu")))) with
     | s_ =>
        Some
          ((AMOMAXU, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                         (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition encdec_csrop_forwards (arg_ : csrop) 
: mword 2 :=
   match arg_ with
   | CSRRW => (vec_of_bits [B0;B1]  : mword 2)
   | CSRRS => (vec_of_bits [B1;B0]  : mword 2)
   | CSRRC => (vec_of_bits [B1;B1]  : mword 2)
   end.

Definition encdec_csrop_backwards (arg_ : mword 2) 
: csrop :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then CSRRW
   else if ((eq_vec b__0 (vec_of_bits [B1;B0]  : mword 2))) then CSRRS
   else CSRRC.

Definition encdec_csrop_forwards_matches (arg_ : csrop) 
: bool :=
   match arg_ with | CSRRW => true | CSRRS => true | CSRRC => true end.

Definition encdec_csrop_backwards_matches (arg_ : mword 2) 
: bool :=
   let b__0 := arg_ in
   if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B0]  : mword 2))) then true
   else if ((eq_vec b__0 (vec_of_bits [B1;B1]  : mword 2))) then true
   else false.

Definition readCSR (csr : mword 12) 
: M (mword 64) :=
   let b__0 := csr in
   (if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12))) then
      (read_reg mvendorid_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12))) then
      (read_reg marchid_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12))) then
      (read_reg mimpid_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12))) then
      (read_reg mhartid_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      read_reg mstatus_ref >>= fun w__4 : Mstatus => returnm ((_get_Mstatus_bits w__4)  : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      read_reg misa_ref >>= fun w__5 : Misa => returnm ((_get_Misa_bits w__5)  : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg medeleg_ref >>= fun w__6 : Medeleg => returnm ((_get_Medeleg_bits w__6)  : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      read_reg mideleg_ref >>= fun w__7 : Minterrupts =>
      returnm ((_get_Minterrupts_bits w__7)
       : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mie_ref >>= fun w__8 : Minterrupts =>
      returnm ((_get_Minterrupts_bits w__8)
       : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
      read_reg mtvec_ref >>= fun w__9 : Mtvec => returnm ((_get_Mtvec_bits w__9)  : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
      read_reg mcounteren_ref >>= fun w__10 : Counteren =>
      returnm ((EXTZ 64 (_get_Counteren_bits w__10))
       : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg mscratch_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      (read_reg mepc_ref  : M (mword 64)) >>= fun w__12 : xlenbits =>
      pc_alignment_mask tt >>= fun w__13 : mword 64 => returnm ((and_vec w__12 w__13)  : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg mcause_ref >>= fun w__14 : Mcause => returnm ((_get_Mcause_bits w__14)  : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      (read_reg mtval_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mip_ref >>= fun w__16 : Minterrupts =>
      returnm ((_get_Minterrupts_bits w__16)
       : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg pmpcfg0_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then
      (read_reg pmpaddr0_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      read_reg mstatus_ref >>= fun w__19 : Mstatus =>
      returnm ((_get_Sstatus_bits (lower_mstatus w__19))
       : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg sedeleg_ref >>= fun w__20 : Sedeleg =>
      returnm ((_get_Sedeleg_bits w__20)
       : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      read_reg sideleg_ref >>= fun w__21 : Sinterrupts =>
      returnm ((_get_Sinterrupts_bits w__21)
       : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mie_ref >>= fun w__22 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__23 : Minterrupts =>
      returnm ((_get_Sinterrupts_bits (lower_mie w__22 w__23))
       : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
      read_reg stvec_ref >>= fun w__24 : Mtvec => returnm ((_get_Mtvec_bits w__24)  : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
      read_reg scounteren_ref >>= fun w__25 : Counteren =>
      returnm ((EXTZ 64 (_get_Counteren_bits w__25))
       : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg sscratch_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      (read_reg sepc_ref  : M (mword 64)) >>= fun w__27 : xlenbits =>
      pc_alignment_mask tt >>= fun w__28 : mword 64 => returnm ((and_vec w__27 w__28)  : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg scause_ref >>= fun w__29 : Mcause => returnm ((_get_Mcause_bits w__29)  : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      (read_reg stval_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mip_ref >>= fun w__31 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__32 : Minterrupts =>
      returnm ((_get_Sinterrupts_bits (lower_mip w__31 w__32))
       : mword 64)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg satp_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg mcycle_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      (read_reg mtime_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      (read_reg minstret_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg tselect_ref  : M (mword 64)) >>= fun w__37 : xlenbits =>
      returnm ((not_vec w__37)
       : mword 64)
    else
      let '_ := (print_bits "unhandled read to CSR " csr)  : unit in
      returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0]
                 : mword 64)
       : mword 64)) >>= fun res : xlenbits =>
   let '_ :=
     (print_endline
        (String.append "CSR "
           (String.append ((csr_name csr)  : string) (String.append " -> " (string_of_bits res)))))
      : unit in
   returnm (res
    : mword 64).

Definition writeCSR (csr : mword 12) (value : mword 64) 
: M (unit) :=
   let b__0 := csr in
   (if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      read_reg mstatus_ref >>= fun w__0 : Mstatus =>
      write_reg mstatus_ref (legalize_mstatus w__0 value) >>
      read_reg mstatus_ref >>= fun w__1 : Mstatus =>
      returnm ((Some
                  (_get_Mstatus_bits w__1))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      read_reg misa_ref >>= fun w__2 : Misa =>
      legalize_misa w__2 value >>= fun w__3 : Misa =>
      write_reg misa_ref w__3 >>
      read_reg misa_ref >>= fun w__4 : Misa =>
      returnm ((Some
                  (_get_Misa_bits w__4))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg medeleg_ref >>= fun w__5 : Medeleg =>
      write_reg medeleg_ref (legalize_medeleg w__5 value) >>
      read_reg medeleg_ref >>= fun w__6 : Medeleg =>
      returnm ((Some
                  (_get_Medeleg_bits w__6))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      read_reg mideleg_ref >>= fun w__7 : Minterrupts =>
      write_reg mideleg_ref (legalize_mideleg w__7 value) >>
      read_reg mideleg_ref >>= fun w__8 : Minterrupts =>
      returnm ((Some
                  (_get_Minterrupts_bits w__8))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mie_ref >>= fun w__9 : Minterrupts =>
      write_reg mie_ref (legalize_mie w__9 value) >>
      read_reg mie_ref >>= fun w__10 : Minterrupts =>
      returnm ((Some
                  (_get_Minterrupts_bits w__10))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
      read_reg mtvec_ref >>= fun w__11 : Mtvec =>
      write_reg mtvec_ref (legalize_tvec w__11 value) >>
      read_reg mtvec_ref >>= fun w__12 : Mtvec =>
      returnm ((Some
                  (_get_Mtvec_bits w__12))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
      read_reg mcounteren_ref >>= fun w__13 : Counteren =>
      legalize_mcounteren w__13 value >>= fun w__14 : Counteren =>
      write_reg mcounteren_ref w__14 >>
      read_reg mcounteren_ref >>= fun w__15 : Counteren =>
      returnm ((Some
                  (EXTZ 64 (_get_Counteren_bits w__15)))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      write_reg mscratch_ref value >>
      (read_reg mscratch_ref  : M (mword 64)) >>= fun w__16 : xlenbits =>
      returnm ((Some
                  (w__16))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      legalize_xepc value >>= fun w__17 : mword 64 =>
      write_reg mepc_ref w__17 >>
      (read_reg mepc_ref  : M (mword 64)) >>= fun w__18 : xlenbits =>
      returnm ((Some
                  (w__18))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      _set_Mcause_bits mcause_ref value >>
      read_reg mcause_ref >>= fun w__19 : Mcause =>
      returnm ((Some
                  (_get_Mcause_bits w__19))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      write_reg mtval_ref value >>
      (read_reg mtval_ref  : M (mword 64)) >>= fun w__20 : xlenbits =>
      returnm ((Some
                  (w__20))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mip_ref >>= fun w__21 : Minterrupts =>
      write_reg mip_ref (legalize_mip w__21 value) >>
      read_reg mip_ref >>= fun w__22 : Minterrupts =>
      returnm ((Some
                  (_get_Minterrupts_bits w__22))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
      write_reg pmpcfg0_ref value >>
      (read_reg pmpcfg0_ref  : M (mword 64)) >>= fun w__23 : xlenbits =>
      returnm ((Some
                  (w__23))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then
      write_reg pmpaddr0_ref value >>
      (read_reg pmpaddr0_ref  : M (mword 64)) >>= fun w__24 : xlenbits =>
      returnm ((Some
                  (w__24))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      read_reg mstatus_ref >>= fun w__25 : Mstatus =>
      write_reg mstatus_ref (legalize_sstatus w__25 value) >>
      read_reg mstatus_ref >>= fun w__26 : Mstatus =>
      returnm ((Some
                  (_get_Mstatus_bits w__26))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg sedeleg_ref >>= fun w__27 : Sedeleg =>
      write_reg sedeleg_ref (legalize_sedeleg w__27 value) >>
      read_reg sedeleg_ref >>= fun w__28 : Sedeleg =>
      returnm ((Some
                  (_get_Sedeleg_bits w__28))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      _set_Sinterrupts_bits sideleg_ref value >>
      read_reg sideleg_ref >>= fun w__29 : Sinterrupts =>
      returnm ((Some
                  (_get_Sinterrupts_bits w__29))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mie_ref >>= fun w__30 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__31 : Minterrupts =>
      write_reg mie_ref (legalize_sie w__30 w__31 value) >>
      read_reg mie_ref >>= fun w__32 : Minterrupts =>
      returnm ((Some
                  (_get_Minterrupts_bits w__32))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
      read_reg stvec_ref >>= fun w__33 : Mtvec =>
      write_reg stvec_ref (legalize_tvec w__33 value) >>
      read_reg stvec_ref >>= fun w__34 : Mtvec =>
      returnm ((Some
                  (_get_Mtvec_bits w__34))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
      read_reg scounteren_ref >>= fun w__35 : Counteren =>
      legalize_scounteren w__35 value >>= fun w__36 : Counteren =>
      write_reg scounteren_ref w__36 >>
      read_reg scounteren_ref >>= fun w__37 : Counteren =>
      returnm ((Some
                  (EXTZ 64 (_get_Counteren_bits w__37)))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      write_reg sscratch_ref value >>
      (read_reg sscratch_ref  : M (mword 64)) >>= fun w__38 : xlenbits =>
      returnm ((Some
                  (w__38))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      legalize_xepc value >>= fun w__39 : mword 64 =>
      write_reg sepc_ref w__39 >>
      (read_reg sepc_ref  : M (mword 64)) >>= fun w__40 : xlenbits =>
      returnm ((Some
                  (w__40))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      _set_Mcause_bits scause_ref value >>
      read_reg scause_ref >>= fun w__41 : Mcause =>
      returnm ((Some
                  (_get_Mcause_bits w__41))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      write_reg stval_ref value >>
      (read_reg stval_ref  : M (mword 64)) >>= fun w__42 : xlenbits =>
      returnm ((Some
                  (w__42))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mip_ref >>= fun w__43 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__44 : Minterrupts =>
      write_reg mip_ref (legalize_sip w__43 w__44 value) >>
      read_reg mip_ref >>= fun w__45 : Minterrupts =>
      returnm ((Some
                  (_get_Minterrupts_bits w__45))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      cur_Architecture tt >>= fun w__46 : Architecture =>
      (read_reg satp_ref  : M (mword 64)) >>= fun w__47 : xlenbits =>
      write_reg satp_ref (legalize_satp w__46 w__47 value) >>
      (read_reg satp_ref  : M (mword 64)) >>= fun w__48 : xlenbits =>
      returnm ((Some
                  (w__48))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
      write_reg tselect_ref value >>
      (read_reg tselect_ref  : M (mword 64)) >>= fun w__49 : xlenbits =>
      returnm ((Some
                  (w__49))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      write_reg mcycle_ref value >>
      (read_reg mcycle_ref  : M (mword 64)) >>= fun w__50 : xlenbits =>
      returnm ((Some
                  (w__50))
       : option (mword 64))
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      write_reg minstret_ref value >>
      write_reg minstret_written_ref true >>
      (read_reg minstret_ref  : M (mword 64)) >>= fun w__51 : xlenbits =>
      returnm ((Some
                  (w__51))
       : option (mword 64))
    else returnm (None  : option (mword 64))) >>= fun res : option xlenbits =>
   returnm ((match res with
             | Some (v) =>
                print_endline
                  (String.append "CSR "
                     (String.append ((csr_name csr)  : string)
                        (String.append " <- "
                           (String.append (string_of_bits v)
                              (String.append " (input: " (String.append (string_of_bits value) ")"))))))
             | None => print_bits "unhandled write to CSR " csr
             end)
    : unit).

Definition maybe_i_forwards (arg_ : bool) 
: string :=
   match arg_ with | true => "i" | false => "" end.

Definition maybe_i_backwards (arg_ : string) 
: M (bool) :=
   (match arg_ with
    | "i" => returnm (true  : bool)
    | "" => returnm (false  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition maybe_i_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_i_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "i" => true | "" => true | _ => false end.

Definition maybe_i_matches_prefix (arg_ : string) 
: option ((bool * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1134_ := arg_ in
   if ((andb (string_startswith _stringappend_1134_ "i")
          (match (string_drop _stringappend_1134_ (build_ex (projT1 (string_length "i")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1134_ (build_ex (projT1 (string_length "i")))) with
     | s_ =>
        Some
          ((true, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                      (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1134_ "")
               (match (string_drop _stringappend_1134_ (build_ex (projT1 (string_length "")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1134_ (build_ex (projT1 (string_length "")))) with
     | s_ =>
        Some
          ((false, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                       (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition csr_mnemonic_forwards (arg_ : csrop) 
: string :=
   match arg_ with | CSRRW => "csrrw" | CSRRS => "csrrs" | CSRRC => "csrrc" end.

Definition csr_mnemonic_backwards (arg_ : string) 
: M (csrop) :=
   (match arg_ with
    | "csrrw" => returnm (CSRRW  : csrop)
    | "csrrs" => returnm (CSRRS  : csrop)
    | "csrrc" => returnm (CSRRC  : csrop)
    | _ => exit tt  : M (csrop)
    end)
    : M (csrop).

Definition csr_mnemonic_forwards_matches (arg_ : csrop) 
: bool :=
   match arg_ with | CSRRW => true | CSRRS => true | CSRRC => true end.

Definition csr_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "csrrw" => true | "csrrs" => true | "csrrc" => true | _ => false end.

Definition csr_mnemonic_matches_prefix (arg_ : string) 
: option ((csrop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1131_ := arg_ in
   if ((andb (string_startswith _stringappend_1131_ "csrrw")
          (match (string_drop _stringappend_1131_ (build_ex (projT1 (string_length "csrrw")))) with
           | s_ => true
           end))) then
     match (string_drop _stringappend_1131_ (build_ex (projT1 (string_length "csrrw")))) with
     | s_ =>
        Some
          ((CSRRW, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                       (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1131_ "csrrs")
               (match (string_drop _stringappend_1131_ (build_ex (projT1 (string_length "csrrs")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1131_ (build_ex (projT1 (string_length "csrrs")))) with
     | s_ =>
        Some
          ((CSRRS, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                       (build_ex (projT1 (string_length s_)))))))
     end
   else if ((andb (string_startswith _stringappend_1131_ "csrrc")
               (match (string_drop _stringappend_1131_ (build_ex (projT1 (string_length "csrrc")))) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1131_ (build_ex (projT1 (string_length "csrrc")))) with
     | s_ =>
        Some
          ((CSRRC, build_ex (projT1 (sub_nat (build_ex (projT1 (string_length arg_)))
                                       (build_ex (projT1 (string_length s_)))))))
     end
   else None.

Definition decodeCompressed (v__2 : mword 16) 
: option ast :=
   if sumbool_of_bool ((andb
                          (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B0;B0]  : mword 3))
                          (andb
                             (Z.eqb
                                (projT1 ((build_ex (projT1 (regbits_to_regno
                                                              (subrange_vec_dec v__2 11 7))))
                                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                                (projT1 ((build_ex (projT1 (regbits_to_regno
                                                              (vec_of_bits [B0;B0;B0;B0;B0]
                                                                : mword 5))))
                                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                             (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))))
   then
     let nzi1 : bits 1 := subrange_vec_dec v__2 12 12 in
     let nzi0 : bits 5 := subrange_vec_dec v__2 6 2 in
     if sumbool_of_bool ((andb (eq_vec nzi1 (vec_of_bits [B0]  : mword 1))
                            (Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno nzi0)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno
                                                             (vec_of_bits [B0;B0;B0;B0;B0]
                                                               : mword 5))))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       Some
         (NOP
            (tt))
     else None
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B0;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
     let rd : cregbits := subrange_vec_dec v__2 4 2 in
     let nz96 : bits 4 := subrange_vec_dec v__2 10 7 in
     let nz54 : bits 2 := subrange_vec_dec v__2 12 11 in
     let nz3 : bits 1 := subrange_vec_dec v__2 5 5 in
     let nz2 : bits 1 := subrange_vec_dec v__2 6 6 in
     let nzimm := (concat_vec nz96 (concat_vec nz54 (concat_vec nz3 nz2)))  : bits 8 in
     if ((eq_vec nzimm (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8))) then None
     else Some (C_ADDI4SPN (rd, nzimm))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
     let ui6 : bits 1 := subrange_vec_dec v__2 5 5 in
     let ui53 : bits 3 := subrange_vec_dec v__2 12 10 in
     let ui2 : bits 1 := subrange_vec_dec v__2 6 6 in
     let rs1 : cregbits := subrange_vec_dec v__2 9 7 in
     let rd : cregbits := subrange_vec_dec v__2 4 2 in
     let uimm := (concat_vec ui6 (concat_vec ui53 ui2))  : bits 5 in
     Some
       (C_LW
          (uimm, rs1, rd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
     let ui76 : bits 2 := subrange_vec_dec v__2 6 5 in
     let ui53 : bits 3 := subrange_vec_dec v__2 12 10 in
     let rs1 : cregbits := subrange_vec_dec v__2 9 7 in
     let rd : cregbits := subrange_vec_dec v__2 4 2 in
     let uimm := (concat_vec ui76 ui53)  : bits 5 in
     Some
       (C_LD
          (uimm, rs1, rd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
     let ui6 : bits 1 := subrange_vec_dec v__2 5 5 in
     let ui53 : bits 3 := subrange_vec_dec v__2 12 10 in
     let ui2 : bits 1 := subrange_vec_dec v__2 6 6 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     let rs1 : cregbits := subrange_vec_dec v__2 9 7 in
     let uimm := (concat_vec ui6 (concat_vec ui53 ui2))  : bits 5 in
     Some
       (C_SW
          (uimm, rs1, rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
     let ui76 : bits 2 := subrange_vec_dec v__2 6 5 in
     let ui53 : bits 3 := subrange_vec_dec v__2 12 10 in
     let rs2 : bits 3 := subrange_vec_dec v__2 4 2 in
     let rs1 : bits 3 := subrange_vec_dec v__2 9 7 in
     let uimm := (concat_vec ui76 ui53)  : bits 5 in
     Some
       (C_SD
          (uimm, rs1, rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B0;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let rsd : regbits := subrange_vec_dec v__2 11 7 in
     let nzi5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let nzi40 : bits 5 := subrange_vec_dec v__2 6 2 in
     let nzi := (concat_vec nzi5 nzi40)  : bits 6 in
     if sumbool_of_bool ((orb (eq_vec nzi (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))
                            (Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rsd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       None
     else Some (C_ADDI (nzi, rsd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B0;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let rsd : regbits := subrange_vec_dec v__2 11 7 in
     let imm5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let imm40 : bits 5 := subrange_vec_dec v__2 6 2 in
     Some
       (C_ADDIW
          (concat_vec imm5 imm40, rsd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let rd : regbits := subrange_vec_dec v__2 11 7 in
     let imm5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let imm40 : bits 5 := subrange_vec_dec v__2 6 2 in
     if sumbool_of_bool ((Z.eqb
                            (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                            (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
       None
     else Some (C_LI (concat_vec imm5 imm40, rd))
   else if sumbool_of_bool ((andb
                               (eq_vec (subrange_vec_dec v__2 15 13)
                                  (vec_of_bits [B0;B1;B1]  : mword 3))
                               (andb
                                  (Z.eqb
                                     (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                   (subrange_vec_dec v__2 11 7))))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                                     (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                   (vec_of_bits [B0;B0;B0;B1;B0]
                                                                     : mword 5))))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                                  (eq_vec (subrange_vec_dec v__2 1 0)
                                     (vec_of_bits [B0;B1]  : mword 2))))) then
     let nzi9 : bits 1 := subrange_vec_dec v__2 12 12 in
     let nzi87 : bits 2 := subrange_vec_dec v__2 4 3 in
     let nzi6 : bits 1 := subrange_vec_dec v__2 5 5 in
     let nzi5 : bits 1 := subrange_vec_dec v__2 2 2 in
     let nzi4 : bits 1 := subrange_vec_dec v__2 6 6 in
     let nzimm := concat_vec nzi9 (concat_vec nzi87 (concat_vec nzi6 (concat_vec nzi5 nzi4))) in
     if ((eq_vec nzimm (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))) then None
     else Some (C_ADDI16SP (nzimm))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let rd : regbits := subrange_vec_dec v__2 11 7 in
     let imm17 : bits 1 := subrange_vec_dec v__2 12 12 in
     let imm1612 : bits 5 := subrange_vec_dec v__2 6 2 in
     if sumbool_of_bool ((orb
                            (Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                            (Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno sp)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       None
     else Some (C_LUI (concat_vec imm17 imm1612, rd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B0;B0]  : mword 3))
               (andb (eq_vec (subrange_vec_dec v__2 11 10) (vec_of_bits [B0;B0]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let nzui5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let nzui40 : bits 5 := subrange_vec_dec v__2 6 2 in
     let shamt : bits 6 := concat_vec nzui5 nzui40 in
     if ((eq_vec shamt (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))) then None
     else Some (C_SRLI (shamt, rsd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B0;B0]  : mword 3))
               (andb (eq_vec (subrange_vec_dec v__2 11 10) (vec_of_bits [B0;B1]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let nzui5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let nzui40 : bits 5 := subrange_vec_dec v__2 6 2 in
     let shamt : bits 6 := concat_vec nzui5 nzui40 in
     if ((eq_vec shamt (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))) then None
     else Some (C_SRAI (shamt, rsd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B0;B0]  : mword 3))
               (andb (eq_vec (subrange_vec_dec v__2 11 10) (vec_of_bits [B1;B0]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let i5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let i40 : bits 5 := subrange_vec_dec v__2 6 2 in
     Some
       (C_ANDI
          (concat_vec i5 i40, rsd))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B0;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B0;B0]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some
       (C_SUB
          (rsd, rs2))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B0;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B0;B1]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some
       (C_XOR
          (rsd, rs2))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B0;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B1;B0]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some
       (C_OR
          (rsd, rs2))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B0;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B1;B1]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some
       (C_AND
          (rsd, rs2))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B1;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B0;B0]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some
       (C_SUBW
          (rsd, rs2))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B1;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B0;B1]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some
       (C_ADDW
          (rsd, rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B0;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let i98 : bits 2 := subrange_vec_dec v__2 10 9 in
     let i7 : bits 1 := subrange_vec_dec v__2 6 6 in
     let i6 : bits 1 := subrange_vec_dec v__2 7 7 in
     let i5 : bits 1 := subrange_vec_dec v__2 2 2 in
     let i4 : bits 1 := subrange_vec_dec v__2 11 11 in
     let i31 : bits 3 := subrange_vec_dec v__2 5 3 in
     let i11 : bits 1 := subrange_vec_dec v__2 12 12 in
     let i10 : bits 1 := subrange_vec_dec v__2 8 8 in
     Some
       (C_J
          (concat_vec i11
             (concat_vec i10
                (concat_vec i98 (concat_vec i7 (concat_vec i6 (concat_vec i5 (concat_vec i4 i31))))))))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let rs : cregbits := subrange_vec_dec v__2 9 7 in
     let i8 : bits 1 := subrange_vec_dec v__2 12 12 in
     let i76 : bits 2 := subrange_vec_dec v__2 6 5 in
     let i5 : bits 1 := subrange_vec_dec v__2 2 2 in
     let i43 : bits 2 := subrange_vec_dec v__2 11 10 in
     let i21 : bits 2 := subrange_vec_dec v__2 4 3 in
     Some
       (C_BEQZ
          (concat_vec i8 (concat_vec i76 (concat_vec i5 (concat_vec i43 i21))), rs))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let rs : cregbits := subrange_vec_dec v__2 9 7 in
     let i8 : bits 1 := subrange_vec_dec v__2 12 12 in
     let i76 : bits 2 := subrange_vec_dec v__2 6 5 in
     let i5 : bits 1 := subrange_vec_dec v__2 2 2 in
     let i43 : bits 2 := subrange_vec_dec v__2 11 10 in
     let i21 : bits 2 := subrange_vec_dec v__2 4 3 in
     Some
       (C_BNEZ
          (concat_vec i8 (concat_vec i76 (concat_vec i5 (concat_vec i43 i21))), rs))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B0;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let rsd : regbits := subrange_vec_dec v__2 11 7 in
     let nzui5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let nzui40 : bits 5 := subrange_vec_dec v__2 6 2 in
     let shamt : bits 6 := concat_vec nzui5 nzui40 in
     if sumbool_of_bool ((orb (eq_vec shamt (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))
                            (Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rsd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       None
     else Some (C_SLLI (shamt, rsd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let ui76 : bits 2 := subrange_vec_dec v__2 3 2 in
     let ui5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let ui42 : bits 3 := subrange_vec_dec v__2 6 4 in
     let rd : regbits := subrange_vec_dec v__2 11 7 in
     let uimm : bits 6 := concat_vec ui76 (concat_vec ui5 ui42) in
     if sumbool_of_bool ((Z.eqb
                            (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                            (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
       None
     else Some (C_LWSP (uimm, rd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let ui86 : bits 3 := subrange_vec_dec v__2 4 2 in
     let ui5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let ui43 : bits 2 := subrange_vec_dec v__2 6 5 in
     let rd : regbits := subrange_vec_dec v__2 11 7 in
     let uimm : bits 6 := concat_vec ui86 (concat_vec ui5 ui43) in
     if sumbool_of_bool ((Z.eqb
                            (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                            (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
       None
     else Some (C_LDSP (uimm, rd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let ui76 : bits 2 := subrange_vec_dec v__2 8 7 in
     let ui52 : bits 4 := subrange_vec_dec v__2 12 9 in
     let rs2 : regbits := subrange_vec_dec v__2 6 2 in
     let uimm : bits 6 := concat_vec ui76 ui52 in
     Some
       (C_SWSP
          (uimm, rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let ui86 : bits 3 := subrange_vec_dec v__2 9 7 in
     let ui53 : bits 3 := subrange_vec_dec v__2 12 10 in
     let rs2 : regbits := subrange_vec_dec v__2 6 2 in
     let uimm : bits 6 := concat_vec ui86 ui53 in
     Some
       (C_SDSP
          (uimm, rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 12) (vec_of_bits [B1;B0;B0;B0]  : mword 4))
               (eq_vec (subrange_vec_dec v__2 6 0) (vec_of_bits [B0;B0;B0;B0;B0;B1;B0]  : mword 7))))
   then
     let rs1 : regbits := subrange_vec_dec v__2 11 7 in
     if sumbool_of_bool ((Z.eqb
                            (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                            (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
       None
     else Some (C_JR (rs1))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 12) (vec_of_bits [B1;B0;B0;B1]  : mword 4))
               (eq_vec (subrange_vec_dec v__2 6 0) (vec_of_bits [B0;B0;B0;B0;B0;B1;B0]  : mword 7))))
   then
     let rs1 : regbits := subrange_vec_dec v__2 11 7 in
     if sumbool_of_bool ((Z.eqb
                            (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                            (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
       None
     else Some (C_JALR (rs1))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 12) (vec_of_bits [B1;B0;B0;B0]  : mword 4))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let rs2 : regbits := subrange_vec_dec v__2 6 2 in
     let rd : regbits := subrange_vec_dec v__2 11 7 in
     if sumbool_of_bool ((orb
                            (Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                            (Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       None
     else Some (C_MV (rd, rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 12) (vec_of_bits [B1;B0;B0;B1]  : mword 4))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let rsd : regbits := subrange_vec_dec v__2 11 7 in
     let rs2 : regbits := subrange_vec_dec v__2 6 2 in
     if sumbool_of_bool ((orb
                            (Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rsd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                            (Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((build_ex (projT1 (regbits_to_regno zreg)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       None
     else Some (C_ADD (rsd, rs2))
   else if ((eq_vec v__2 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 16)))
   then
     Some
       (C_ILLEGAL
          (tt))
   else None.

Definition execute_WFI '(tt : unit) 
: M (bool) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (match w__0 with
    | Machine => returnm (true  : bool)
    | Supervisor =>
       read_reg mstatus_ref >>= fun w__1 : Mstatus =>
       (if ((eq_vec (_get_Mstatus_TW w__1) ((bool_to_bits true)  : mword 1))) then
          handle_illegal tt >> returnm (false  : bool)
        else returnm (true  : bool))
        : M (bool)
    | User => handle_illegal tt >> returnm (false  : bool)
    end)
    : M (bool).

Definition execute_UTYPE (imm : mword 20) (rd : mword 5) (op : uop) 
: M (bool) :=
   let off : xlenbits :=
     EXTS 64 (concat_vec imm (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)) in
   match op with
   | RISCV_LUI => returnm (off  : xlenbits)
   | RISCV_AUIPC =>
      (read_reg PC_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
      returnm ((add_vec w__0 off)
       : mword 64)
   end >>= fun ret : xlenbits =>
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) ret >>
   returnm (true
    : bool).

Definition execute_THREAD_START '(tt : unit)  : bool := true.

Definition execute_STORECON (aq : bool) (rl : bool) (rs2 : mword 5) (rs1 : mword 5) (width : word_width) (rd : mword 5) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun vaddr : xlenbits =>
   match width with
   | BYTE => returnm (true  : bool)
   | HALF =>
      cast_unit_vec (access_vec_dec vaddr 0) >>= fun w__0 : mword 1 =>
      returnm ((eq_vec (w__0  : mword 1) (vec_of_bits [B0]  : mword 1))
       : bool)
   | WORD =>
      returnm ((eq_vec (subrange_vec_dec vaddr 1 0) (vec_of_bits [B0;B0]  : mword 2))  : bool)
   | DOUBLE =>
      returnm ((eq_vec (subrange_vec_dec vaddr 2 0) (vec_of_bits [B0;B0;B0]  : mword 3))  : bool)
   end >>= fun aligned : bool =>
   (if ((negb aligned)) then handle_mem_exception vaddr E_SAMO_Addr_Align >> returnm (false  : bool)
    else
      match_reservation vaddr >>= fun w__1 : bool =>
      (if ((Bool.eqb w__1 false)) then
         wX
           (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
            : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
           (EXTZ 64 (vec_of_bits [B1]  : mword 1)) >>
         returnm (true
          : bool)
       else
         translateAddr vaddr Write Data >>= fun w__2 : TR_Result =>
         (match w__2 with
          | TR_Failure (e) => handle_mem_exception vaddr e >> returnm (false  : bool)
          | TR_Address (addr) =>
             match width with
             | WORD => (mem_write_ea addr 4 aq rl true)  : M (MemoryOpResult unit)
             | DOUBLE => (mem_write_ea addr 8 aq rl true)  : M (MemoryOpResult unit)
             | _ => (internal_error "STORECON expected word or double")  : M (MemoryOpResult unit)
             end >>= fun eares : MemoryOpResult unit =>
             (match eares with
              | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
              | MemValue (_) =>
                 rX
                   (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
                 match width with
                 | WORD =>
                    (mem_write_value addr 4 (subrange_vec_dec rs2_val 31 0) aq rl true)
                     : M (MemoryOpResult bool)
                 | DOUBLE => (mem_write_value addr 8 rs2_val aq rl true)  : M (MemoryOpResult bool)
                 | _ =>
                    (internal_error "STORECON expected word or double")  : M (MemoryOpResult bool)
                 end >>= fun res : MemoryOpResult bool =>
                 (match res with
                  | MemValue (true) =>
                     wX
                       (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                        : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                       (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
                     let '_ := (cancel_reservation tt)  : unit in
                     returnm (true
                      : bool)
                  | MemValue (false) =>
                     wX
                       (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                        : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                       (EXTZ 64 (vec_of_bits [B1]  : mword 1)) >>
                     let '_ := (cancel_reservation tt)  : unit in
                     returnm (true
                      : bool)
                  | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
                  end)
                  : M (bool)
              end)
              : M (bool)
          end)
          : M (bool))
       : M (bool))
    : M (bool).

Definition execute_STORE (imm : mword 12) (rs2 : mword 5) (rs1 : mword 5) (width : word_width) (aq : bool) (rl : bool) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let vaddr : xlenbits := add_vec w__0 (EXTS 64 imm) in
   check_misaligned vaddr width >>= fun w__1 : bool =>
   (if (w__1) then handle_mem_exception vaddr E_SAMO_Addr_Align >> returnm (false  : bool)
    else
      translateAddr vaddr Write Data >>= fun w__2 : TR_Result =>
      (match w__2 with
       | TR_Failure (e) => handle_mem_exception vaddr e >> returnm (false  : bool)
       | TR_Address (addr) =>
          match width with
          | BYTE => (mem_write_ea addr 1 aq rl false)  : M (MemoryOpResult unit)
          | HALF => (mem_write_ea addr 2 aq rl false)  : M (MemoryOpResult unit)
          | WORD => (mem_write_ea addr 4 aq rl false)  : M (MemoryOpResult unit)
          | DOUBLE => (mem_write_ea addr 8 aq rl false)  : M (MemoryOpResult unit)
          end >>= fun eares : MemoryOpResult unit =>
          (match eares with
           | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
           | MemValue (_) =>
              rX
                (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
              match width with
              | BYTE =>
                 (mem_write_value addr 1 (subrange_vec_dec rs2_val 7 0) aq rl false)
                  : M (MemoryOpResult bool)
              | HALF =>
                 (mem_write_value addr 2 (subrange_vec_dec rs2_val 15 0) aq rl false)
                  : M (MemoryOpResult bool)
              | WORD =>
                 (mem_write_value addr 4 (subrange_vec_dec rs2_val 31 0) aq rl false)
                  : M (MemoryOpResult bool)
              | DOUBLE => (mem_write_value addr 8 rs2_val aq rl false)  : M (MemoryOpResult bool)
              end >>= fun res : MemoryOpResult bool =>
              (match res with
               | MemValue (true) => returnm (true  : bool)
               | MemValue (false) =>
                  (internal_error "store got false from mem_write_value")  : M (bool)
               | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
               end)
               : M (bool)
           end)
           : M (bool)
       end)
       : M (bool))
    : M (bool).

Definition execute_STOP_FETCHING '(tt : unit)  : bool := true.

Definition execute_SRET '(tt : unit) 
: M (bool) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   match w__0 with
   | User => (handle_illegal tt)  : M (unit)
   | Supervisor =>
      read_reg mstatus_ref >>= fun w__1 : Mstatus =>
      (if ((eq_vec (_get_Mstatus_TSR w__1) ((bool_to_bits true)  : mword 1))) then
         (handle_illegal tt)
          : M (unit)
       else
         read_reg cur_privilege_ref >>= fun w__2 : Privilege =>
         (read_reg PC_ref  : M (mword 64)) >>= fun w__3 : xlenbits =>
         handle_exception w__2 (CTL_SRET (tt)) w__3 >>= fun w__4 : mword 64 =>
         write_reg nextPC_ref w__4
          : M (unit))
       : M (unit)
   | Machine =>
      read_reg cur_privilege_ref >>= fun w__5 : Privilege =>
      (read_reg PC_ref  : M (mword 64)) >>= fun w__6 : xlenbits =>
      handle_exception w__5 (CTL_SRET (tt)) w__6 >>= fun w__7 : mword 64 =>
      write_reg nextPC_ref w__7
       : M (unit)
   end >>
   returnm (false
    : bool).

Definition execute_SHIFTW (shamt : mword 5) (rs1 : mword 5) (rd : mword 5) (op : sop) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   let result : bits 32 :=
     match op with
     | RISCV_SLLI => shift_bits_left rs1_val shamt
     | RISCV_SRLI => shift_bits_right rs1_val shamt
     | RISCV_SRAI => shift_right_arith32 rs1_val shamt
     end in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) (EXTS 64 result) >>
   returnm (true
    : bool).

Definition execute_SHIFTIWOP (shamt : mword 5) (rs1 : mword 5) (rd : mword 5) (op : sopw) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   let result : xlenbits :=
     match op with
     | RISCV_SLLIW => EXTS 64 (shift_bits_left (subrange_vec_dec rs1_val 31 0) shamt)
     | RISCV_SRLIW => EXTS 64 (shift_bits_right (subrange_vec_dec rs1_val 31 0) shamt)
     | RISCV_SRAIW => EXTS 64 (shift_right_arith32 (subrange_vec_dec rs1_val 31 0) shamt)
     end in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Definition execute_SHIFTIOP (shamt : mword 6) (rs1 : mword 5) (rd : mword 5) (op : sop) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   let result : xlenbits :=
     match op with
     | RISCV_SLLI => shift_bits_left rs1_val shamt
     | RISCV_SRLI => shift_bits_right rs1_val shamt
     | RISCV_SRAI => shift_right_arith64 rs1_val shamt
     end in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Definition execute_SFENCE_VMA (rs1 : mword 5) (rs2 : mword 5) 
: M (bool) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (if ((eq_vec ((privLevel_to_bits w__0)  : mword 2) ((privLevel_to_bits User)  : mword 2))) then
      handle_illegal tt >> returnm (false  : bool)
    else
      read_reg mstatus_ref >>= fun w__1 : Mstatus =>
      read_reg mstatus_ref >>= fun w__2 : Mstatus =>
      let p__16 := (architecture (_get_Mstatus_SXL w__1), _get_Mstatus_TVM w__2) in
      (match p__16 with
       | (Some (RV64), v_0) =>
          (if ((eq_vec v_0 ((bool_to_bits true)  : mword 1))) then
             handle_illegal tt >> returnm (false  : bool)
           else if ((eq_vec v_0 ((bool_to_bits false)  : mword 1))) then
             (if sumbool_of_bool ((Z.eqb
                                     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
                returnm (None
                 : option (mword 39))
              else
                rX
                  (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                   : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__3 : mword 64 =>
                returnm ((Some
                            (subrange_vec_dec w__3 38 0))
                 : option (mword 39))) >>= fun addr : option vaddr39 =>
             (if sumbool_of_bool ((Z.eqb
                                     (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
                returnm (None
                 : option (mword 16))
              else
                rX
                  (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                   : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__4 : mword 64 =>
                returnm ((Some
                            (subrange_vec_dec w__4 15 0))
                 : option (mword 16))) >>= fun asid : option asid64 =>
             flushTLB asid addr >> returnm (true  : bool)
           else
             (match (Some (RV64), v_0) with
              | (g__14, g__15) => (internal_error "unimplemented sfence architecture")  : M (bool)
              end)
              : M (bool))
           : M (bool)
       | (g__14, g__15) => (internal_error "unimplemented sfence architecture")  : M (bool)
       end)
       : M (bool))
    : M (bool).

Definition execute_RTYPEW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (op : ropw) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__1 : mword 64 =>
   let rs2_val := subrange_vec_dec w__1 31 0 in
   let result : bits 32 :=
     match op with
     | RISCV_ADDW => add_vec rs1_val rs2_val
     | RISCV_SUBW => sub_vec rs1_val rs2_val
     | RISCV_SLLW => shift_bits_left rs1_val (subrange_vec_dec rs2_val 4 0)
     | RISCV_SRLW => shift_bits_right rs1_val (subrange_vec_dec rs2_val 4 0)
     | RISCV_SRAW => shift_right_arith32 rs1_val (subrange_vec_dec rs2_val 4 0)
     end in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) (EXTS 64 result) >>
   returnm (true
    : bool).

Definition execute_RTYPE (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (op : rop) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
   let result : xlenbits :=
     match op with
     | RISCV_ADD => add_vec rs1_val rs2_val
     | RISCV_SUB => sub_vec rs1_val rs2_val
     | RISCV_SLL => shift_bits_left rs1_val (subrange_vec_dec rs2_val 5 0)
     | RISCV_SLT => EXTZ 64 ((bool_to_bits (zopz0zI_s rs1_val rs2_val))  : mword 1)
     | RISCV_SLTU => EXTZ 64 ((bool_to_bits (zopz0zI_u rs1_val rs2_val))  : mword 1)
     | RISCV_XOR => xor_vec rs1_val rs2_val
     | RISCV_SRL => shift_bits_right rs1_val (subrange_vec_dec rs2_val 5 0)
     | RISCV_SRA => shift_right_arith64 rs1_val (subrange_vec_dec rs2_val 5 0)
     | RISCV_OR => or_vec rs1_val rs2_val
     | RISCV_AND => and_vec rs1_val rs2_val
     end in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Definition execute_RISCV_JALR (imm : mword 12) (rs1 : mword 5) (rd : mword 5) 
: M (bool) :=
   (read_reg nextPC_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) w__0 >>
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__1 : mword 64 =>
   let newPC : xlenbits := add_vec w__1 (EXTS 64 imm) in
   write_reg nextPC_ref (concat_vec (subrange_vec_dec newPC 63 1) (vec_of_bits [B0]  : mword 1)) >>
   returnm (true
    : bool).

Definition execute_RISCV_JAL (imm : mword 21) (rd : mword 5) 
: M (bool) :=
   (read_reg PC_ref  : M (mword 64)) >>= fun pc : xlenbits =>
   (read_reg nextPC_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) w__0 >>
   let offset : xlenbits := EXTS 64 imm in
   write_reg nextPC_ref (add_vec pc offset) >> returnm (true  : bool).

Definition execute_REMW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__1 : mword 64 =>
   let rs2_val := subrange_vec_dec w__1 31 0 in
   let rs1_int : Z := if (s) then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
   let rs2_int : Z := if (s) then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
   let r : Z :=
     if sumbool_of_bool ((Z.eqb rs2_int 0)) then rs1_int
     else rem_round_zero rs1_int rs2_int in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) (EXTS 64 (to_bits 32 r)) >>
   returnm (true
    : bool).

Definition execute_REM (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
   let rs1_int : Z := if (s) then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
   let rs2_int : Z := if (s) then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
   let r : Z :=
     if sumbool_of_bool ((Z.eqb rs2_int 0)) then rs1_int
     else rem_round_zero rs1_int rs2_int in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) (to_bits xlen r) >>
   returnm (true
    : bool).

Definition execute_NOP '(tt : unit)  : bool := true.

Definition execute_MULW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__1 : mword 64 =>
   let rs2_val := subrange_vec_dec w__1 31 0 in
   let rs1_int : Z := projT1 (sint rs1_val) in
   let rs2_int : Z := projT1 (sint rs2_val) in
   let result32 := subrange_vec_dec (to_bits 64 (Z.mul rs1_int rs2_int)) 31 0 in
   let result : xlenbits := EXTS 64 result32 in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Definition execute_MUL (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (high : bool) (signed1 : bool) (signed2 : bool) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
   let rs1_int : Z := if (signed1) then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
   let rs2_int : Z := if (signed2) then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
   let result128 := to_bits 128 (Z.mul rs1_int rs2_int) in
   let result :=
     if (high) then subrange_vec_dec result128 127 64
     else subrange_vec_dec result128 63 0 in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Definition execute_MRET '(tt : unit) 
: M (bool) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (if ((eq_vec ((privLevel_to_bits w__0)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)))
    then
      read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
      (read_reg PC_ref  : M (mword 64)) >>= fun w__2 : xlenbits =>
      handle_exception w__1 (CTL_MRET (tt)) w__2 >>= fun w__3 : mword 64 =>
      write_reg nextPC_ref w__3
       : M (unit)
    else (handle_illegal tt)  : M (unit)) >>
   returnm (false
    : bool).

Definition execute_LOADRES (aq : bool) (rl : bool) (rs1 : mword 5) (width : word_width) (rd : mword 5) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun vaddr : xlenbits =>
   match width with
   | BYTE => returnm (true  : bool)
   | HALF =>
      cast_unit_vec (access_vec_dec vaddr 0) >>= fun w__0 : mword 1 =>
      returnm ((eq_vec (w__0  : mword 1) (vec_of_bits [B0]  : mword 1))
       : bool)
   | WORD =>
      returnm ((eq_vec (subrange_vec_dec vaddr 1 0) (vec_of_bits [B0;B0]  : mword 2))  : bool)
   | DOUBLE =>
      returnm ((eq_vec (subrange_vec_dec vaddr 2 0) (vec_of_bits [B0;B0;B0]  : mword 3))  : bool)
   end >>= fun aligned : bool =>
   (if ((negb aligned)) then handle_mem_exception vaddr E_Load_Addr_Align >> returnm (false  : bool)
    else
      translateAddr vaddr Read Data >>= fun w__1 : TR_Result =>
      (match w__1 with
       | TR_Failure (e) => handle_mem_exception vaddr e >> returnm (false  : bool)
       | TR_Address (addr) =>
          (match width with
           | WORD =>
              mem_read addr 4 aq rl true >>= fun w__2 : MemoryOpResult (mword (8 * 4)) =>
              (process_loadres rd vaddr w__2 false)
               : M (bool)
           | DOUBLE =>
              mem_read addr 8 aq rl true >>= fun w__4 : MemoryOpResult (mword (8 * 8)) =>
              (process_loadres rd vaddr w__4 false)
               : M (bool)
           | _ => (internal_error "LOADRES expected WORD or DOUBLE")  : M (bool)
           end)
           : M (bool)
       end)
       : M (bool))
    : M (bool).

Definition execute_LOAD (imm : mword 12) (rs1 : mword 5) (rd : mword 5) (is_unsigned : bool) (width : word_width) (aq : bool) (rl : bool) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let vaddr : xlenbits := add_vec w__0 (EXTS 64 imm) in
   check_misaligned vaddr width >>= fun w__1 : bool =>
   (if (w__1) then handle_mem_exception vaddr E_Load_Addr_Align >> returnm (false  : bool)
    else
      translateAddr vaddr Read Data >>= fun w__2 : TR_Result =>
      (match w__2 with
       | TR_Failure (e) => handle_mem_exception vaddr e >> returnm (false  : bool)
       | TR_Address (addr) =>
          (match width with
           | BYTE =>
              mem_read addr 1 aq rl false >>= fun w__3 : MemoryOpResult (mword (8 * 1)) =>
              (process_load rd vaddr w__3 is_unsigned)
               : M (bool)
           | HALF =>
              mem_read addr 2 aq rl false >>= fun w__5 : MemoryOpResult (mword (8 * 2)) =>
              (process_load rd vaddr w__5 is_unsigned)
               : M (bool)
           | WORD =>
              mem_read addr 4 aq rl false >>= fun w__7 : MemoryOpResult (mword (8 * 4)) =>
              (process_load rd vaddr w__7 is_unsigned)
               : M (bool)
           | DOUBLE =>
              mem_read addr 8 aq rl false >>= fun w__9 : MemoryOpResult (mword (8 * 8)) =>
              (process_load rd vaddr w__9 is_unsigned)
               : M (bool)
           end)
           : M (bool)
       end)
       : M (bool))
    : M (bool).

Definition execute_ITYPE (imm : mword 12) (rs1 : mword 5) (rd : mword 5) (op : iop) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   let immext : xlenbits := EXTS 64 imm in
   let result : xlenbits :=
     match op with
     | RISCV_ADDI => add_vec rs1_val immext
     | RISCV_SLTI => EXTZ 64 ((bool_to_bits (zopz0zI_s rs1_val immext))  : mword 1)
     | RISCV_SLTIU => EXTZ 64 ((bool_to_bits (zopz0zI_u rs1_val immext))  : mword 1)
     | RISCV_XORI => xor_vec rs1_val immext
     | RISCV_ORI => or_vec rs1_val immext
     | RISCV_ANDI => and_vec rs1_val immext
     end in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Definition execute_ILLEGAL (s : mword 32) 
: M (bool) :=
   handle_illegal tt >> returnm (false  : bool).

Definition execute_FENCEI '(tt : unit)  : bool := true.

Definition execute_FENCE (pred : mword 4) (succ : mword 4) 
: M (bool) :=
   match (pred, succ) with
   | (v__132, v__133) =>
      (if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B1]  : mword 2))
              (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
         (MEM_fence_rw_rw tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B0]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
         (MEM_fence_r_rw tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B0]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
         (MEM_fence_r_r tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B1]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
         (MEM_fence_rw_w tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B0;B1]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
         (MEM_fence_w_w tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B0;B1]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
         (MEM_fence_w_rw tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B1]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
         (MEM_fence_rw_r tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B0]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
         (MEM_fence_r_w tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B0;B1]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
         (MEM_fence_w_r tt)
          : M (unit)
       else
         returnm ((if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B0;B0]  : mword 2))
                          (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B0;B0]  : mword 2))))
                   then
                     tt
                   else
                     let '_ := (print_endline "FIXME: unsupported fence")  : unit in
                     tt)
          : unit))
       : M (unit)
   end >>
   returnm (true
    : bool).

Definition execute_ECALL '(tt : unit) 
: M (bool) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   let t : sync_exception :=
     {| sync_exception_trap :=
          (match w__0 with
           | User => E_U_EnvCall
           | Supervisor => E_S_EnvCall
           | Machine => E_M_EnvCall
           end); 
        sync_exception_excinfo := (None  : option xlenbits) |} in
   read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
   (read_reg PC_ref  : M (mword 64)) >>= fun w__2 : xlenbits =>
   handle_exception w__1 (CTL_TRAP (t)) w__2 >>= fun w__3 : mword 64 =>
   write_reg nextPC_ref w__3 >> returnm (false  : bool).

Definition execute_EBREAK '(tt : unit) 
: M (bool) :=
   (read_reg PC_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   handle_mem_exception w__0 E_Breakpoint >> returnm (false  : bool).

Definition execute_DIVW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__1 : mword 64 =>
   let rs2_val := subrange_vec_dec w__1 31 0 in
   let rs1_int : Z := if (s) then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
   let rs2_int : Z := if (s) then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
   let q : Z := if sumbool_of_bool ((Z.eqb rs2_int 0)) then -1 else quot_round_zero rs1_int rs2_int in
   let q' : Z :=
     if sumbool_of_bool ((andb s
                            (Z.gtb q (projT1 (sub_range (build_ex (projT1 (pow2 31))) (build_ex 1))))))
     then
       projT1 (sub_range (build_ex 0)
                 (build_ex (projT1 ((build_ex (projT1 (ex_int (pow 2 31))))
                  : {n : Z & ArithFact (True)}))))
     else q in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) (EXTS 64 (to_bits 32 q')) >>
   returnm (true
    : bool).

Definition execute_DIV (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
   let rs1_int : Z := if (s) then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
   let rs2_int : Z := if (s) then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
   let q : Z := if sumbool_of_bool ((Z.eqb rs2_int 0)) then -1 else quot_round_zero rs1_int rs2_int in
   let q' : Z := if sumbool_of_bool ((andb s (Z.gtb q xlen_max_signed))) then xlen_min_signed else q in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) (to_bits xlen q') >>
   returnm (true
    : bool).

Definition execute_C_ILLEGAL '(tt : unit) 
: M (bool) :=
   handle_illegal tt >> returnm (false  : bool).

Definition execute_C_ADDIW (imm : mword 6) (rsd : mword 5) 
: M (bool) :=
   let imm : bits 32 := EXTS 32 imm in
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rsd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs_val =>
   let res : bits 32 := add_vec (subrange_vec_dec rs_val 31 0) imm in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rsd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) (EXTS 64 res) >>
   returnm (true
    : bool).

Definition execute_CSR (csr : mword 12) (rs1 : mword 5) (rd : mword 5) (is_imm : bool) (op : csrop) 
: M (bool) :=
   (if (is_imm) then returnm ((EXTZ 64 rs1)  : mword 64)
    else
      (rX
         (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
          : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
       : M (mword 64)) >>= fun rs1_val : xlenbits =>
   let isWrite : bool :=
     match op with
     | CSRRW => true
     | _ =>
        if (is_imm) then neq_range (build_ex (projT1 (uint rs1_val))) (build_ex 0)
        else neq_range (build_ex (projT1 (uint rs1))) (build_ex 0)
     end in
   read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
   check_CSR csr w__1 isWrite >>= fun w__2 : bool =>
   (if ((negb w__2)) then handle_illegal tt >> returnm (false  : bool)
    else
      readCSR csr >>= fun csr_val =>
      (if (isWrite) then
         let new_val : xlenbits :=
           match op with
           | CSRRW => rs1_val
           | CSRRS => or_vec csr_val rs1_val
           | CSRRC => and_vec csr_val (not_vec rs1_val)
           end in
         (writeCSR csr new_val)
          : M (unit)
       else returnm (tt  : unit)) >>
      wX
        (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
         : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) csr_val >>
      returnm (true
       : bool))
    : M (bool).

Definition execute_BTYPE (imm : mword 13) (rs2 : mword 5) (rs1 : mword 5) (op : bop) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
   let taken : bool :=
     match op with
     | RISCV_BEQ => eq_vec rs1_val rs2_val
     | RISCV_BNE => neq_vec rs1_val rs2_val
     | RISCV_BLT => zopz0zI_s rs1_val rs2_val
     | RISCV_BGE => zopz0zKzJ_s rs1_val rs2_val
     | RISCV_BLTU => zopz0zI_u rs1_val rs2_val
     | RISCV_BGEU => zopz0zKzJ_u rs1_val rs2_val
     end in
   (if (taken) then
      (read_reg PC_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
      write_reg nextPC_ref (add_vec w__0 (EXTS 64 imm))
       : M (unit)
    else returnm (tt  : unit)) >>
   returnm (true
    : bool).

Definition execute_AMO (op : amoop) (aq : bool) (rl : bool) (rs2 : mword 5) (rs1 : mword 5) (width : word_width) (rd : mword 5) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun vaddr : xlenbits =>
   translateAddr vaddr ReadWrite Data >>= fun w__0 : TR_Result =>
   (match w__0 with
    | TR_Failure (e) => handle_mem_exception vaddr e >> returnm (false  : bool)
    | TR_Address (addr) =>
       match width with
       | WORD => (mem_write_ea addr 4 (andb aq rl) rl true)  : M (MemoryOpResult unit)
       | DOUBLE => (mem_write_ea addr 8 (andb aq rl) rl true)  : M (MemoryOpResult unit)
       | _ => (internal_error "AMO expected WORD or DOUBLE")  : M (MemoryOpResult unit)
       end >>= fun eares : MemoryOpResult unit =>
       (match eares with
        | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
        | MemValue (_) =>
           match width with
           | WORD =>
              mem_read addr 4 aq (andb aq rl) true >>= fun w__4 : MemoryOpResult (mword (8 * 4)) =>
              returnm ((extend_value false w__4)
               : MemoryOpResult (mword 64))
           | DOUBLE =>
              mem_read addr 8 aq (andb aq rl) true >>= fun w__5 : MemoryOpResult (mword (8 * 8)) =>
              returnm ((extend_value false w__5)
               : MemoryOpResult (mword 64))
           | _ => (internal_error "AMO expected WORD or DOUBLE")  : M (MemoryOpResult (mword 64))
           end >>= fun rval : MemoryOpResult xlenbits =>
           (match rval with
            | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
            | MemValue (loaded) =>
               rX
                 (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val : xlenbits =>
               let result : xlenbits :=
                 match op with
                 | AMOSWAP => rs2_val
                 | AMOADD => add_vec rs2_val loaded
                 | AMOXOR => xor_vec rs2_val loaded
                 | AMOAND => and_vec rs2_val loaded
                 | AMOOR => or_vec rs2_val loaded
                 | AMOMIN => vector64 (Z.min (projT1 (sint rs2_val)) (projT1 (sint loaded)))
                 | AMOMAX => vector64 (Z.max (projT1 (sint rs2_val)) (projT1 (sint loaded)))
                 | AMOMINU =>
                    vector64
                      (projT1 (min_nat (build_ex (projT1 (uint rs2_val)))
                                 (build_ex (projT1 (uint loaded)))))
                 | AMOMAXU =>
                    vector64
                      (projT1 (max_nat (build_ex (projT1 (uint rs2_val)))
                                 (build_ex (projT1 (uint loaded)))))
                 end in
               match width with
               | WORD =>
                  (mem_write_value addr 4 (subrange_vec_dec result 31 0) (andb aq rl) rl true)
                   : M (MemoryOpResult bool)
               | DOUBLE =>
                  (mem_write_value addr 8 result (andb aq rl) rl true)  : M (MemoryOpResult bool)
               | _ => (internal_error "AMO expected WORD or DOUBLE")  : M (MemoryOpResult bool)
               end >>= fun wval : MemoryOpResult bool =>
               (match wval with
                | MemValue (true) =>
                   wX
                     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) loaded >>
                   returnm (true
                    : bool)
                | MemValue (false) =>
                   (internal_error "AMO got false from mem_write_value")  : M (bool)
                | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
                end)
                : M (bool)
            end)
            : M (bool)
        end)
        : M (bool)
    end)
    : M (bool).

Definition execute_ADDIW (imm : mword 12) (rs1 : mword 5) (rd : mword 5) 
: M (bool) :=
   rX
     (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let result : xlenbits := add_vec (EXTS 64 imm) w__0 in
   wX
     (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) (EXTS 64 (subrange_vec_dec result 31 0)) >>
   returnm (true
    : bool).

Definition expand_ast (i : ast) : ast :=
match i with
   | C_ADDI4SPN (rdc,nzimm) =>
      let imm : bits 12 :=
        concat_vec (vec_of_bits [B0;B0]  : mword 2)
          (concat_vec nzimm (vec_of_bits [B0;B0]  : mword 2)) in
      let rd := creg2reg_bits rdc in
      ( (ITYPE (imm, sp, rd, RISCV_ADDI)))
       
   | C_LW (uimm,rsc,rdc) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0]  : mword 2)) in
      let rd := creg2reg_bits rdc in
      let rs := creg2reg_bits rsc in
      ( (LOAD (imm, rs, rd, false, WORD, false, false)))
       
   | C_LD (uimm,rsc,rdc) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0;B0]  : mword 3)) in
      let rd := creg2reg_bits rdc in
      let rs := creg2reg_bits rsc in
      ( (LOAD (imm, rs, rd, false, DOUBLE, false, false)))
       
   | C_SW (uimm,rsc1,rsc2) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0]  : mword 2)) in
      let rs1 := creg2reg_bits rsc1 in
      let rs2 := creg2reg_bits rsc2 in
      ( (STORE (imm, rs2, rs1, WORD, false, false)))
       
   | C_SD (uimm,rsc1,rsc2) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0;B0]  : mword 3)) in
      let rs1 := creg2reg_bits rsc1 in
      let rs2 := creg2reg_bits rsc2 in
      ( (STORE (imm, rs2, rs1, DOUBLE, false, false)))
       
   | C_ADDI (nzi,rsd) =>
      let imm : bits 12 := EXTS 12 nzi in
      ( (ITYPE (imm, rsd, rsd, RISCV_ADDI)))
       
   | C_JAL (imm) =>
      ( (RISCV_JAL (EXTS 21 (concat_vec imm (vec_of_bits [B0]  : mword 1)), ra)))  
   | C_LI (imm,rd) =>
      let imm : bits 12 := EXTS 12 imm in
      ( (ITYPE (imm, zreg, rd, RISCV_ADDI)))
       
   | C_ADDI16SP (imm) =>
      let imm : bits 12 := EXTS 12 (concat_vec imm (vec_of_bits [B0;B0;B0;B0]  : mword 4)) in
      ( (ITYPE (imm, sp, sp, RISCV_ADDI)))
       
   | C_LUI (imm,rd) =>
      let res : bits 20 := EXTS 20 imm in
      ( (UTYPE (res, rd, RISCV_LUI)))
       
   | C_SRLI (shamt,rsd) =>
      let rsd := creg2reg_bits rsd in
      ( (SHIFTIOP (shamt, rsd, rsd, RISCV_SRLI)))
       
   | C_SRAI (shamt,rsd) =>
      let rsd := creg2reg_bits rsd in
      ( (SHIFTIOP (shamt, rsd, rsd, RISCV_SRAI)))
       
   | C_ANDI (imm,rsd) =>
      let rsd := creg2reg_bits rsd in
      ( (ITYPE (EXTS 12 imm, rsd, rsd, RISCV_ANDI)))
       
   | C_SUB (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPE (rs2, rsd, rsd, RISCV_SUB)))
       
   | C_XOR (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPE (rs2, rsd, rsd, RISCV_XOR)))
       
   | C_OR (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPE (rs2, rsd, rsd, RISCV_OR)))
       
   | C_AND (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPE (rs2, rsd, rsd, RISCV_AND)))
       
   | C_SUBW (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPEW (rs2, rsd, rsd, RISCV_SUBW)))
       
   | C_ADDW (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPEW (rs2, rsd, rsd, RISCV_ADDW)))
       
   | C_J (imm) =>
      ( (RISCV_JAL (EXTS 21 (concat_vec imm (vec_of_bits [B0]  : mword 1)), zreg)))
       
   | C_BEQZ (imm,rs) =>
      (
         (BTYPE
            (EXTS 13 (concat_vec imm (vec_of_bits [B0]  : mword 1)), zreg, creg2reg_bits rs,
            RISCV_BEQ)))
       
   | C_BNEZ (imm,rs) =>
      (
         (BTYPE
            (EXTS 13 (concat_vec imm (vec_of_bits [B0]  : mword 1)), zreg, creg2reg_bits rs,
            RISCV_BNE)))
       
   | C_SLLI (shamt,rsd) => ( (SHIFTIOP (shamt, rsd, rsd, RISCV_SLLI)))  
   | C_LWSP (uimm,rd) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0]  : mword 2)) in
      ( (LOAD (imm, sp, rd, false, WORD, false, false)))
       
   | C_LDSP (uimm,rd) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0;B0]  : mword 3)) in
      ( (LOAD (imm, sp, rd, false, DOUBLE, false, false)))
       
   | C_SWSP (uimm,rs2) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0]  : mword 2)) in
      ( (STORE (imm, rs2, sp, WORD, false, false)))
       
   | C_SDSP (uimm,rs2) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0;B0]  : mword 3)) in
      ( (STORE (imm, rs2, sp, DOUBLE, false, false)))
       
   | C_JR (rs1) =>
      ( (RISCV_JALR (EXTZ 12 (vec_of_bits [B0]  : mword 1), rs1, zreg)))  
   | C_JALR (rs1) =>
      ( (RISCV_JALR (EXTZ 12 (vec_of_bits [B0]  : mword 1), rs1, ra)))  
   | C_MV (rd,rs2) => ( (RTYPE (rs2, zreg, rd, RISCV_ADD)))  
   | C_ADD (rsd,rs2) => ( (RTYPE (rs2, rsd, rsd, RISCV_ADD)))  
| i => i
end.

Fixpoint execute (merge_var : ast) 
: M (bool) :=
let merge_var := expand_ast merge_var in
   match merge_var with
   | UTYPE (imm,rd,op) => (execute_UTYPE imm rd op)  : M (bool)
   | RISCV_JAL (imm,rd) => (execute_RISCV_JAL imm rd)  : M (bool)
   | RISCV_JALR (imm,rs1,rd) => (execute_RISCV_JALR imm rs1 rd)  : M (bool)
   | BTYPE (imm,rs2,rs1,op) => (execute_BTYPE imm rs2 rs1 op)  : M (bool)
   | ITYPE (imm,rs1,rd,op) => (execute_ITYPE imm rs1 rd op)  : M (bool)
   | SHIFTIOP (shamt,rs1,rd,op) => (execute_SHIFTIOP shamt rs1 rd op)  : M (bool)
   | RTYPE (rs2,rs1,rd,op) => (execute_RTYPE rs2 rs1 rd op)  : M (bool)
   | LOAD (imm,rs1,rd,is_unsigned,width,aq,rl) =>
      (execute_LOAD imm rs1 rd is_unsigned width aq rl)  : M (bool)
   | STORE (imm,rs2,rs1,width,aq,rl) => (execute_STORE imm rs2 rs1 width aq rl)  : M (bool)
   | ADDIW (imm,rs1,rd) => (execute_ADDIW imm rs1 rd)  : M (bool)
   | SHIFTW (shamt,rs1,rd,op) => (execute_SHIFTW shamt rs1 rd op)  : M (bool)
   | RTYPEW (rs2,rs1,rd,op) => (execute_RTYPEW rs2 rs1 rd op)  : M (bool)
   | SHIFTIWOP (shamt,rs1,rd,op) => (execute_SHIFTIWOP shamt rs1 rd op)  : M (bool)
   | MUL (rs2,rs1,rd,high,signed1,signed2) =>
      (execute_MUL rs2 rs1 rd high signed1 signed2)  : M (bool)
   | DIV (rs2,rs1,rd,s) => (execute_DIV rs2 rs1 rd s)  : M (bool)
   | REM (rs2,rs1,rd,s) => (execute_REM rs2 rs1 rd s)  : M (bool)
   | MULW (rs2,rs1,rd) => (execute_MULW rs2 rs1 rd)  : M (bool)
   | DIVW (rs2,rs1,rd,s) => (execute_DIVW rs2 rs1 rd s)  : M (bool)
   | REMW (rs2,rs1,rd,s) => (execute_REMW rs2 rs1 rd s)  : M (bool)
   | FENCE (pred,succ) => (execute_FENCE pred succ)  : M (bool)
   | FENCEI (arg0) => returnm ((execute_FENCEI arg0)  : bool)
   | ECALL (arg0) => (execute_ECALL arg0)  : M (bool)
   | MRET (arg0) => (execute_MRET arg0)  : M (bool)
   | SRET (arg0) => (execute_SRET arg0)  : M (bool)
   | EBREAK (arg0) => (execute_EBREAK arg0)  : M (bool)
   | WFI (arg0) => (execute_WFI arg0)  : M (bool)
   | SFENCE_VMA (rs1,rs2) => (execute_SFENCE_VMA rs1 rs2)  : M (bool)
   | LOADRES (aq,rl,rs1,width,rd) => (execute_LOADRES aq rl rs1 width rd)  : M (bool)
   | STORECON (aq,rl,rs2,rs1,width,rd) => (execute_STORECON aq rl rs2 rs1 width rd)  : M (bool)
   | AMO (op,aq,rl,rs2,rs1,width,rd) => (execute_AMO op aq rl rs2 rs1 width rd)  : M (bool)
   | CSR (csr,rs1,rd,is_imm,op) => (execute_CSR csr rs1 rd is_imm op)  : M (bool)
   | NOP (arg0) => returnm ((execute_NOP arg0)  : bool)
   | C_ADDIW (imm,rsd) => (execute_C_ADDIW imm rsd)  : M (bool)
   | STOP_FETCHING (arg0) => returnm ((execute_STOP_FETCHING arg0)  : bool)
   | THREAD_START (arg0) => returnm ((execute_THREAD_START arg0)  : bool)
   | ILLEGAL (s) => (execute_ILLEGAL s)  : M (bool)
   | C_ILLEGAL (arg0) => (execute_C_ILLEGAL arg0)  : M (bool)
| _ => Fail "Unexpanded instruction"
   end.

Definition assembly_forwards (arg_ : ast) 
: M (string) :=
   (match arg_ with
    | UTYPE (imm,rd,op) =>
       returnm ((string_append (utype_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt) (string_append (string_of_bits imm) "")))))
        : string)
    | RISCV_JAL (imm,rd) =>
       returnm ((string_append "jal"
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt) (string_append (string_of_bits imm) "")))))
        : string)
    | RISCV_JALR (imm,rs1,rd) =>
       returnm ((string_append "jalr"
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (string_of_bits imm) "")))))))
        : string)
    | BTYPE (imm,rs2,rs1,op) =>
       returnm ((string_append (btype_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rs1)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs2)
                               (string_append (sep_forwards tt)
                                  (string_append (string_of_bits imm) "")))))))
        : string)
    | ITYPE (imm,rs1,rd,op) =>
       returnm ((string_append (itype_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (string_of_bits imm) "")))))))
        : string)
    | SHIFTIOP (shamt,rs1,rd,op) =>
       returnm ((string_append (shiftiop_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (string_of_bits shamt) ""))))))
        : string)
    | RTYPE (rs2,rs1,rd,op) =>
       returnm ((string_append (rtype_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs2) "")))))))
        : string)
    | LOAD (imm,rs1,rd,is_unsigned,size,aq,rl) =>
       returnm ((string_append "l"
                   (string_append (size_mnemonic_forwards size)
                      (string_append (maybe_u_forwards is_unsigned)
                         (string_append (maybe_aq_forwards aq)
                            (string_append (maybe_rl_forwards rl)
                               (string_append (spc_forwards tt)
                                  (string_append (reg_name_forwards rd)
                                     (string_append (sep_forwards tt)
                                        (string_append (reg_name_forwards rs1)
                                           (string_append (sep_forwards tt)
                                              (string_append (string_of_bits imm) "")))))))))))
        : string)
    | STORE (imm,rs1,rd,size,aq,rl) =>
       returnm ((string_append "s"
                   (string_append (size_mnemonic_forwards size)
                      (string_append (maybe_aq_forwards aq)
                         (string_append (maybe_rl_forwards rl)
                            (string_append (spc_forwards tt)
                               (string_append (reg_name_forwards rd)
                                  (string_append (sep_forwards tt)
                                     (string_append (reg_name_forwards rs1)
                                        (string_append (sep_forwards tt)
                                           (string_append (string_of_bits imm) ""))))))))))
        : string)
    | ADDIW (imm,rs1,rd) =>
       returnm ((string_append "addiw"
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (string_of_bits imm) "")))))))
        : string)
    | SHIFTW (shamt,rs1,rd,op) =>
       returnm ((string_append (shiftw_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (string_of_bits shamt) "")))))))
        : string)
    | RTYPEW (rs2,rs1,rd,op) =>
       returnm ((string_append (rtypew_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs2) "")))))))
        : string)
    | SHIFTIWOP (shamt,rs1,rd,op) =>
       returnm ((string_append (shiftiwop_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (string_of_bits shamt) ""))))))
        : string)
    | MUL (rs2,rs1,rd,high,signed1,signed2) =>
       mul_mnemonic_forwards high signed1 signed2 >>= fun w__0 : string =>
       returnm ((string_append w__0
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs2) "")))))))
        : string)
    | DIV (rs2,rs1,rd,s) =>
       returnm ((string_append "div"
                   (string_append (maybe_not_u_forwards s)
                      (string_append (spc_forwards tt)
                         (string_append (reg_name_forwards rd)
                            (string_append (sep_forwards tt)
                               (string_append (reg_name_forwards rs1)
                                  (string_append (sep_forwards tt)
                                     (string_append (reg_name_forwards rs2) ""))))))))
        : string)
    | REM (rs2,rs1,rd,s) =>
       returnm ((string_append "rem"
                   (string_append (maybe_not_u_forwards s)
                      (string_append (spc_forwards tt)
                         (string_append (reg_name_forwards rd)
                            (string_append (sep_forwards tt)
                               (string_append (reg_name_forwards rs1)
                                  (string_append (sep_forwards tt)
                                     (string_append (reg_name_forwards rs2) ""))))))))
        : string)
    | MULW (rs2,rs1,rd) =>
       returnm ((string_append "mulw"
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs2) "")))))))
        : string)
    | DIVW (rs2,rs1,rd,s) =>
       returnm ((string_append "div"
                   (string_append (maybe_not_u_forwards s)
                      (string_append "w"
                         (string_append (spc_forwards tt)
                            (string_append (reg_name_forwards rd)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs1)
                                     (string_append (sep_forwards tt)
                                        (string_append (reg_name_forwards rs2) "")))))))))
        : string)
    | REMW (rs2,rs1,rd,s) =>
       returnm ((string_append "rem"
                   (string_append (maybe_not_u_forwards s)
                      (string_append "w"
                         (string_append (spc_forwards tt)
                            (string_append (reg_name_forwards rd)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs1)
                                     (string_append (sep_forwards tt)
                                        (string_append (reg_name_forwards rs2) "")))))))))
        : string)
    | FENCE (pred,succ) =>
       returnm ((string_append "fence"
                   (string_append (spc_forwards tt)
                      (string_append (fence_bits_forwards pred)
                         (string_append (sep_forwards tt)
                            (string_append (fence_bits_forwards succ) "")))))
        : string)
    | FENCEI (tt) => returnm ("fence.i"  : string)
    | ECALL (tt) => returnm ("ecall"  : string)
    | MRET (tt) => returnm ("mret"  : string)
    | SRET (tt) => returnm ("sret"  : string)
    | EBREAK (tt) => returnm ("ebreak"  : string)
    | WFI (tt) => returnm ("wfi"  : string)
    | SFENCE_VMA (rs1,rs2) =>
       returnm ((string_append "sfence.vma"
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rs1)
                         (string_append (sep_forwards tt) (string_append (reg_name_forwards rs2) "")))))
        : string)
    | LOADRES (aq,rl,rs1,size,rd) =>
       returnm ((string_append "lr."
                   (string_append (maybe_aq_forwards aq)
                      (string_append (maybe_rl_forwards rl)
                         (string_append (size_mnemonic_forwards size)
                            (string_append (spc_forwards tt)
                               (string_append (reg_name_forwards rd)
                                  (string_append (sep_forwards tt)
                                     (string_append (reg_name_forwards rs1) ""))))))))
        : string)
    | STORECON (aq,rl,rs2,rs1,size,rd) =>
       returnm ((string_append "sc."
                   (string_append (maybe_aq_forwards aq)
                      (string_append (maybe_rl_forwards rl)
                         (string_append (size_mnemonic_forwards size)
                            (string_append (spc_forwards tt)
                               (string_append (reg_name_forwards rd)
                                  (string_append (sep_forwards tt)
                                     (string_append (reg_name_forwards rs1)
                                        (string_append (sep_forwards tt)
                                           (string_append (reg_name_forwards rs2) ""))))))))))
        : string)
    | AMO (op,aq,rl,rs2,rs1,width,rd) =>
       returnm ((string_append (amo_mnemonic_forwards op)
                   (string_append "."
                      (string_append (size_mnemonic_forwards width)
                         (string_append (maybe_aq_forwards aq)
                            (string_append (maybe_rl_forwards rl)
                               (string_append (spc_forwards tt)
                                  (string_append (reg_name_forwards rd)
                                     (string_append (sep_forwards tt)
                                        (string_append (reg_name_forwards rs1)
                                           (string_append (sep_forwards tt)
                                              (string_append (reg_name_forwards rs2) "")))))))))))
        : string)
    | CSR (csr,rs1,rd,true,op) =>
       returnm ((string_append (csr_mnemonic_forwards op)
                   (string_append "i"
                      (string_append (spc_forwards tt)
                         (string_append (reg_name_forwards rd)
                            (string_append (sep_forwards tt)
                               (string_append (string_of_bits rs1)
                                  (string_append (sep_forwards tt)
                                     (string_append (csr_name_map_forwards csr) ""))))))))
        : string)
    | CSR (csr,rs1,rd,false,op) =>
       returnm ((string_append (csr_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (csr_name_map_forwards csr) "")))))))
        : string)
    | ILLEGAL (s) =>
       returnm ((string_append "illegal"
                   (string_append (spc_forwards tt) (string_append (string_of_bits s) "")))
        : string)
    | _ => exit tt  : M (string)
    end)
    : M (string).
(*
Definition assembly_backwards (arg_ : string) 
: M (ast) :=
   let _stringappend_756_ := arg_ in
   match (utype_mnemonic_matches_prefix _stringappend_756_) with
   | Some (op,(existT _ _stringappend_757_ _)) =>
      let _stringappend_758_ := string_drop _stringappend_756_ (build_ex _stringappend_757_) in
      match (spc_matches_prefix _stringappend_758_) with
      | Some (tt,(existT _ _stringappend_759_ _)) =>
         let _stringappend_760_ := string_drop _stringappend_758_ (build_ex _stringappend_759_) in
         match (reg_name_matches_prefix _stringappend_760_) with
         | Some (rd,(existT _ _stringappend_761_ _)) =>
            let _stringappend_762_ := string_drop _stringappend_760_ (build_ex _stringappend_761_) in
            sep_matches_prefix _stringappend_762_ >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            returnm ((if ((match w__0 with
                           | Some (tt,(existT _ _stringappend_763_ _)) =>
                              let _stringappend_764_ :=
                                string_drop _stringappend_762_ (build_ex _stringappend_763_) in
                              if ((match (hex_bits_20_matches_prefix _stringappend_764_) with
                                   | Some (imm,(existT _ _stringappend_765_ _)) =>
                                      match (string_drop _stringappend_764_
                                               (build_ex _stringappend_765_)) with
                                      | "" => true
                                      | _ => false
                                      end
                                   | None => false
                                   end)) then
                                true
                              else false
                           | None => false
                           end)) then
                        true
                      else false)
             : bool)
         | None => returnm (false  : bool)
         end >>= fun w__1 : bool =>
         returnm ((if (w__1) then true
                   else false)
          : bool)
      | None => returnm (false  : bool)
      end >>= fun w__2 : bool =>
      returnm ((if (w__2) then true
                else false)
       : bool)
   | None => returnm (false  : bool)
   end >>= fun w__3 : bool =>
   (if (w__3) then
      (match (utype_mnemonic_matches_prefix _stringappend_756_) with
       | Some (op,(existT _ _stringappend_757_ _)) => returnm (op, build_ex _stringappend_757_)
       | _ => exit tt  : M ((uop * {n : Z & ArithFact (n >= 0)}))
       end : M ((uop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_757_ _) =>
      let _stringappend_758_ := string_drop _stringappend_756_ (build_ex _stringappend_757_) in
      (match (spc_matches_prefix _stringappend_758_) with
       | Some (tt,(existT _ _stringappend_759_ _)) => returnm (tt, build_ex _stringappend_759_)
       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_759_ _) =>
      let _stringappend_760_ := string_drop _stringappend_758_ (build_ex _stringappend_759_) in
      (match (reg_name_matches_prefix _stringappend_760_) with
       | Some (rd,(existT _ _stringappend_761_ _)) => returnm (rd, build_ex _stringappend_761_)
       | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_761_ _) =>
      let _stringappend_762_ := string_drop _stringappend_760_ (build_ex _stringappend_761_) in
      sep_matches_prefix _stringappend_762_ >>= fun w__10 : option ((unit * {n : Z & ArithFact (n >=
        0)})) =>
      (match w__10 with
       | Some (tt,(existT _ _stringappend_763_ _)) => returnm (tt, build_ex _stringappend_763_)
       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_763_ _) =>
      let _stringappend_764_ := string_drop _stringappend_762_ (build_ex _stringappend_763_) in
      (match (hex_bits_20_matches_prefix _stringappend_764_) with
       | Some (imm,(existT _ _stringappend_765_ _)) => returnm (imm, build_ex _stringappend_765_)
       | _ => exit tt  : M ((mword 20 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 20 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_765_ _) =>
      (match (string_drop _stringappend_764_ (build_ex _stringappend_765_)) with
       | "" => returnm ((UTYPE (imm, rd, op))  : ast )
       | _ => exit tt  : M (ast)
       end)
       : M (ast)
    else
      and_boolM (returnm ((string_startswith _stringappend_756_ "jal")  : bool))
        (let _stringappend_767_ :=
          string_drop _stringappend_756_ (build_ex (projT1 (string_length "jal"))) in
        match (spc_matches_prefix _stringappend_767_) with
        | Some (tt,(existT _ _stringappend_768_ _)) =>
           let _stringappend_769_ := string_drop _stringappend_767_ (build_ex _stringappend_768_) in
           match (reg_name_matches_prefix _stringappend_769_) with
           | Some (rd,(existT _ _stringappend_770_ _)) =>
              let _stringappend_771_ := string_drop _stringappend_769_ (build_ex _stringappend_770_) in
              sep_matches_prefix _stringappend_771_ >>= fun w__17 : option ((unit * {n : Z & ArithFact (n >=
                0)})) =>
              returnm ((if ((match w__17 with
                             | Some (tt,(existT _ _stringappend_772_ _)) =>
                                let _stringappend_773_ :=
                                  string_drop _stringappend_771_ (build_ex _stringappend_772_) in
                                if ((match (hex_bits_21_matches_prefix _stringappend_773_) with
                                     | Some (imm,(existT _ _stringappend_774_ _)) =>
                                        match (string_drop _stringappend_773_
                                                 (build_ex _stringappend_774_)) with
                                        | "" => true
                                        | _ => false
                                        end
                                     | None => false
                                     end)) then
                                  true
                                else false
                             | None => false
                             end)) then
                          true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__18 : bool =>
           returnm ((if (w__18) then true
                     else false)
            : bool)
        | None => returnm (false  : bool)
        end >>= fun w__19 : bool =>
        returnm ((if (w__19) then true
                  else false)
         : bool)) >>= fun w__20 : bool =>
      (if (w__20) then
         let _stringappend_767_ :=
           string_drop _stringappend_756_ (build_ex (projT1 (string_length "jal"))) in
         (match (spc_matches_prefix _stringappend_767_) with
          | Some (tt,(existT _ _stringappend_768_ _)) => returnm (tt, build_ex _stringappend_768_)
          | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
          end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_768_ _) =>
         let _stringappend_769_ := string_drop _stringappend_767_ (build_ex _stringappend_768_) in
         (match (reg_name_matches_prefix _stringappend_769_) with
          | Some (rd,(existT _ _stringappend_770_ _)) => returnm (rd, build_ex _stringappend_770_)
          | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
          end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_770_ _) =>
         let _stringappend_771_ := string_drop _stringappend_769_ (build_ex _stringappend_770_) in
         sep_matches_prefix _stringappend_771_ >>= fun w__25 : option ((unit * {n : Z & ArithFact (n >=
           0)})) =>
         (match w__25 with
          | Some (tt,(existT _ _stringappend_772_ _)) => returnm (tt, build_ex _stringappend_772_)
          | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
          end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_772_ _) =>
         let _stringappend_773_ := string_drop _stringappend_771_ (build_ex _stringappend_772_) in
         (match (hex_bits_21_matches_prefix _stringappend_773_) with
          | Some (imm,(existT _ _stringappend_774_ _)) => returnm (imm, build_ex _stringappend_774_)
          | _ => exit tt  : M ((mword 21 * {n : Z & ArithFact (n >= 0)}))
          end : M ((mword 21 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_774_ _) =>
         (match (string_drop _stringappend_773_ (build_ex _stringappend_774_)) with
          | "" => returnm ((RISCV_JAL (imm, rd))  : ast )
          | _ => exit tt  : M (ast)
          end)
          : M (ast)
       else
         and_boolM (returnm ((string_startswith _stringappend_756_ "jalr")  : bool))
           (let _stringappend_776_ :=
             string_drop _stringappend_756_ (build_ex (projT1 (string_length "jalr"))) in
           match (spc_matches_prefix _stringappend_776_) with
           | Some (tt,(existT _ _stringappend_777_ _)) =>
              let _stringappend_778_ := string_drop _stringappend_776_ (build_ex _stringappend_777_) in
              match (reg_name_matches_prefix _stringappend_778_) with
              | Some (rd,(existT _ _stringappend_779_ _)) =>
                 let _stringappend_780_ :=
                   string_drop _stringappend_778_ (build_ex _stringappend_779_) in
                 sep_matches_prefix _stringappend_780_ >>= fun w__32 : option ((unit * {n : Z & ArithFact (n >=
                   0)})) =>
                 match w__32 with
                 | Some (tt,(existT _ _stringappend_781_ _)) =>
                    let _stringappend_782_ :=
                      string_drop _stringappend_780_ (build_ex _stringappend_781_) in
                    match (reg_name_matches_prefix _stringappend_782_) with
                    | Some (rs1,(existT _ _stringappend_783_ _)) =>
                       let _stringappend_784_ :=
                         string_drop _stringappend_782_ (build_ex _stringappend_783_) in
                       sep_matches_prefix _stringappend_784_ >>= fun w__33 : option ((unit * {n : Z & ArithFact (n >=
                         0)})) =>
                       returnm ((if ((match w__33 with
                                      | Some (tt,(existT _ _stringappend_785_ _)) =>
                                         let _stringappend_786_ :=
                                           string_drop _stringappend_784_
                                             (build_ex _stringappend_785_) in
                                         if ((match (hex_bits_12_matches_prefix _stringappend_786_) with
                                              | Some (imm,(existT _ _stringappend_787_ _)) =>
                                                 match (string_drop _stringappend_786_
                                                          (build_ex _stringappend_787_)) with
                                                 | "" => true
                                                 | _ => false
                                                 end
                                              | None => false
                                              end)) then
                                           true
                                         else false
                                      | None => false
                                      end)) then
                                   true
                                 else false)
                        : bool)
                    | None => returnm (false  : bool)
                    end >>= fun w__34 : bool =>
                    returnm ((if (w__34) then true
                              else false)
                     : bool)
                 | None => returnm (false  : bool)
                 end >>= fun w__35 : bool =>
                 returnm ((if (w__35) then true
                           else false)
                  : bool)
              | None => returnm (false  : bool)
              end >>= fun w__36 : bool =>
              returnm ((if (w__36) then true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__37 : bool =>
           returnm ((if (w__37) then true
                     else false)
            : bool)) >>= fun w__38 : bool =>
         (if (w__38) then
            let _stringappend_776_ :=
              string_drop _stringappend_756_ (build_ex (projT1 (string_length "jalr"))) in
            (match (spc_matches_prefix _stringappend_776_) with
             | Some (tt,(existT _ _stringappend_777_ _)) =>
                returnm (tt, build_ex _stringappend_777_)
             | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
             end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_777_ _) =>
            let _stringappend_778_ := string_drop _stringappend_776_ (build_ex _stringappend_777_) in
            (match (reg_name_matches_prefix _stringappend_778_) with
             | Some (rd,(existT _ _stringappend_779_ _)) =>
                returnm (rd, build_ex _stringappend_779_)
             | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
             end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_779_ _) =>
            let _stringappend_780_ := string_drop _stringappend_778_ (build_ex _stringappend_779_) in
            sep_matches_prefix _stringappend_780_ >>= fun w__43 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            (match w__43 with
             | Some (tt,(existT _ _stringappend_781_ _)) =>
                returnm (tt, build_ex _stringappend_781_)
             | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
             end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_781_ _) =>
            let _stringappend_782_ := string_drop _stringappend_780_ (build_ex _stringappend_781_) in
            (match (reg_name_matches_prefix _stringappend_782_) with
             | Some (rs1,(existT _ _stringappend_783_ _)) =>
                returnm (rs1, build_ex _stringappend_783_)
             | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
             end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_783_ _) =>
            let _stringappend_784_ := string_drop _stringappend_782_ (build_ex _stringappend_783_) in
            sep_matches_prefix _stringappend_784_ >>= fun w__48 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            (match w__48 with
             | Some (tt,(existT _ _stringappend_785_ _)) =>
                returnm (tt, build_ex _stringappend_785_)
             | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
             end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_785_ _) =>
            let _stringappend_786_ := string_drop _stringappend_784_ (build_ex _stringappend_785_) in
            (match (hex_bits_12_matches_prefix _stringappend_786_) with
             | Some (imm,(existT _ _stringappend_787_ _)) =>
                returnm (imm, build_ex _stringappend_787_)
             | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
             end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_787_ _) =>
            (match (string_drop _stringappend_786_ (build_ex _stringappend_787_)) with
             | "" => returnm ((RISCV_JALR (imm, rs1, rd))  : ast )
             | _ => exit tt  : M (ast)
             end)
             : M (ast)
          else
            match (btype_mnemonic_matches_prefix _stringappend_756_) with
            | Some (op,(existT _ _stringappend_789_ _)) =>
               let _stringappend_790_ :=
                 string_drop _stringappend_756_ (build_ex _stringappend_789_) in
               match (spc_matches_prefix _stringappend_790_) with
               | Some (tt,(existT _ _stringappend_791_ _)) =>
                  let _stringappend_792_ :=
                    string_drop _stringappend_790_ (build_ex _stringappend_791_) in
                  match (reg_name_matches_prefix _stringappend_792_) with
                  | Some (rs1,(existT _ _stringappend_793_ _)) =>
                     let _stringappend_794_ :=
                       string_drop _stringappend_792_ (build_ex _stringappend_793_) in
                     sep_matches_prefix _stringappend_794_ >>= fun w__55 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     match w__55 with
                     | Some (tt,(existT _ _stringappend_795_ _)) =>
                        let _stringappend_796_ :=
                          string_drop _stringappend_794_ (build_ex _stringappend_795_) in
                        match (reg_name_matches_prefix _stringappend_796_) with
                        | Some (rs2,(existT _ _stringappend_797_ _)) =>
                           let _stringappend_798_ :=
                             string_drop _stringappend_796_ (build_ex _stringappend_797_) in
                           sep_matches_prefix _stringappend_798_ >>= fun w__56 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__56 with
                                          | Some (tt,(existT _ _stringappend_799_ _)) =>
                                             let _stringappend_800_ :=
                                               string_drop _stringappend_798_
                                                 (build_ex _stringappend_799_) in
                                             if ((match (hex_bits_13_matches_prefix
                                                           _stringappend_800_) with
                                                  | Some (imm,(existT _ _stringappend_801_ _)) =>
                                                     match (string_drop _stringappend_800_
                                                              (build_ex _stringappend_801_)) with
                                                     | "" => true
                                                     | _ => false
                                                     end
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__57 : bool =>
                        returnm ((if (w__57) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__58 : bool =>
                     returnm ((if (w__58) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__59 : bool =>
                  returnm ((if (w__59) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__60 : bool =>
               returnm ((if (w__60) then true
                         else false)
                : bool)
            | None => returnm (false  : bool)
            end >>= fun w__61 : bool =>
            (if (w__61) then
               (match (btype_mnemonic_matches_prefix _stringappend_756_) with
                | Some (op,(existT _ _stringappend_789_ _)) =>
                   returnm (op, build_ex _stringappend_789_)
                | _ => exit tt  : M ((bop * {n : Z & ArithFact (n >= 0)}))
                end : M ((bop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_789_ _) =>
               let _stringappend_790_ :=
                 string_drop _stringappend_756_ (build_ex _stringappend_789_) in
               (match (spc_matches_prefix _stringappend_790_) with
                | Some (tt,(existT _ _stringappend_791_ _)) =>
                   returnm (tt, build_ex _stringappend_791_)
                | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_791_ _) =>
               let _stringappend_792_ :=
                 string_drop _stringappend_790_ (build_ex _stringappend_791_) in
               (match (reg_name_matches_prefix _stringappend_792_) with
                | Some (rs1,(existT _ _stringappend_793_ _)) =>
                   returnm (rs1, build_ex _stringappend_793_)
                | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_793_ _) =>
               let _stringappend_794_ :=
                 string_drop _stringappend_792_ (build_ex _stringappend_793_) in
               sep_matches_prefix _stringappend_794_ >>= fun w__68 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               (match w__68 with
                | Some (tt,(existT _ _stringappend_795_ _)) =>
                   returnm (tt, build_ex _stringappend_795_)
                | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_795_ _) =>
               let _stringappend_796_ :=
                 string_drop _stringappend_794_ (build_ex _stringappend_795_) in
               (match (reg_name_matches_prefix _stringappend_796_) with
                | Some (rs2,(existT _ _stringappend_797_ _)) =>
                   returnm (rs2, build_ex _stringappend_797_)
                | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_797_ _) =>
               let _stringappend_798_ :=
                 string_drop _stringappend_796_ (build_ex _stringappend_797_) in
               sep_matches_prefix _stringappend_798_ >>= fun w__73 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               (match w__73 with
                | Some (tt,(existT _ _stringappend_799_ _)) =>
                   returnm (tt, build_ex _stringappend_799_)
                | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_799_ _) =>
               let _stringappend_800_ :=
                 string_drop _stringappend_798_ (build_ex _stringappend_799_) in
               (match (hex_bits_13_matches_prefix _stringappend_800_) with
                | Some (imm,(existT _ _stringappend_801_ _)) =>
                   returnm (imm, build_ex _stringappend_801_)
                | _ => exit tt  : M ((mword 13 * {n : Z & ArithFact (n >= 0)}))
                end : M ((mword 13 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_801_ _) =>
               (match (string_drop _stringappend_800_ (build_ex _stringappend_801_)) with
                | "" => returnm ((BTYPE (imm, rs2, rs1, op))  : ast )
                | _ => exit tt  : M (ast)
                end)
                : M (ast)
             else
               match (itype_mnemonic_matches_prefix _stringappend_756_) with
               | Some (op,(existT _ _stringappend_803_ _)) =>
                  let _stringappend_804_ :=
                    string_drop _stringappend_756_ (build_ex _stringappend_803_) in
                  match (spc_matches_prefix _stringappend_804_) with
                  | Some (tt,(existT _ _stringappend_805_ _)) =>
                     let _stringappend_806_ :=
                       string_drop _stringappend_804_ (build_ex _stringappend_805_) in
                     match (reg_name_matches_prefix _stringappend_806_) with
                     | Some (rd,(existT _ _stringappend_807_ _)) =>
                        let _stringappend_808_ :=
                          string_drop _stringappend_806_ (build_ex _stringappend_807_) in
                        sep_matches_prefix _stringappend_808_ >>= fun w__80 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__80 with
                        | Some (tt,(existT _ _stringappend_809_ _)) =>
                           let _stringappend_810_ :=
                             string_drop _stringappend_808_ (build_ex _stringappend_809_) in
                           match (reg_name_matches_prefix _stringappend_810_) with
                           | Some (rs1,(existT _ _stringappend_811_ _)) =>
                              let _stringappend_812_ :=
                                string_drop _stringappend_810_ (build_ex _stringappend_811_) in
                              sep_matches_prefix _stringappend_812_ >>= fun w__81 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              returnm ((if ((match w__81 with
                                             | Some (tt,(existT _ _stringappend_813_ _)) =>
                                                let _stringappend_814_ :=
                                                  string_drop _stringappend_812_
                                                    (build_ex _stringappend_813_) in
                                                if ((match (hex_bits_12_matches_prefix
                                                              _stringappend_814_) with
                                                     | Some (imm,(existT _ _stringappend_815_ _)) =>
                                                        match (string_drop _stringappend_814_
                                                                 (build_ex _stringappend_815_)) with
                                                        | "" => true
                                                        | _ => false
                                                        end
                                                     | None => false
                                                     end)) then
                                                  true
                                                else false
                                             | None => false
                                             end)) then
                                          true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__82 : bool =>
                           returnm ((if (w__82) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__83 : bool =>
                        returnm ((if (w__83) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__84 : bool =>
                     returnm ((if (w__84) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__85 : bool =>
                  returnm ((if (w__85) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__86 : bool =>
               (if (w__86) then
                  (match (itype_mnemonic_matches_prefix _stringappend_756_) with
                   | Some (op,(existT _ _stringappend_803_ _)) =>
                      returnm (op, build_ex _stringappend_803_)
                   | _ => exit tt  : M ((iop * {n : Z & ArithFact (n >= 0)}))
                   end : M ((iop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_803_ _) =>
                  let _stringappend_804_ :=
                    string_drop _stringappend_756_ (build_ex _stringappend_803_) in
                  (match (spc_matches_prefix _stringappend_804_) with
                   | Some (tt,(existT _ _stringappend_805_ _)) =>
                      returnm (tt, build_ex _stringappend_805_)
                   | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                   end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_805_ _) =>
                  let _stringappend_806_ :=
                    string_drop _stringappend_804_ (build_ex _stringappend_805_) in
                  (match (reg_name_matches_prefix _stringappend_806_) with
                   | Some (rd,(existT _ _stringappend_807_ _)) =>
                      returnm (rd, build_ex _stringappend_807_)
                   | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                   end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_807_ _) =>
                  let _stringappend_808_ :=
                    string_drop _stringappend_806_ (build_ex _stringappend_807_) in
                  sep_matches_prefix _stringappend_808_ >>= fun w__93 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  (match w__93 with
                   | Some (tt,(existT _ _stringappend_809_ _)) =>
                      returnm (tt, build_ex _stringappend_809_)
                   | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                   end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_809_ _) =>
                  let _stringappend_810_ :=
                    string_drop _stringappend_808_ (build_ex _stringappend_809_) in
                  (match (reg_name_matches_prefix _stringappend_810_) with
                   | Some (rs1,(existT _ _stringappend_811_ _)) =>
                      returnm (rs1, build_ex _stringappend_811_)
                   | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                   end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_811_ _) =>
                  let _stringappend_812_ :=
                    string_drop _stringappend_810_ (build_ex _stringappend_811_) in
                  sep_matches_prefix _stringappend_812_ >>= fun w__98 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  (match w__98 with
                   | Some (tt,(existT _ _stringappend_813_ _)) =>
                      returnm (tt, build_ex _stringappend_813_)
                   | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                   end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_813_ _) =>
                  let _stringappend_814_ :=
                    string_drop _stringappend_812_ (build_ex _stringappend_813_) in
                  (match (hex_bits_12_matches_prefix _stringappend_814_) with
                   | Some (imm,(existT _ _stringappend_815_ _)) =>
                      returnm (imm, build_ex _stringappend_815_)
                   | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                   end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_815_ _) =>
                  (match (string_drop _stringappend_814_ (build_ex _stringappend_815_)) with
                   | "" => returnm ((ITYPE (imm, rs1, rd, op))  : ast )
                   | _ => exit tt  : M (ast)
                   end)
                   : M (ast)
                else
                  match (shiftiop_mnemonic_matches_prefix _stringappend_756_) with
                  | Some (op,(existT _ _stringappend_817_ _)) =>
                     let _stringappend_818_ :=
                       string_drop _stringappend_756_ (build_ex _stringappend_817_) in
                     match (spc_matches_prefix _stringappend_818_) with
                     | Some (tt,(existT _ _stringappend_819_ _)) =>
                        let _stringappend_820_ :=
                          string_drop _stringappend_818_ (build_ex _stringappend_819_) in
                        match (reg_name_matches_prefix _stringappend_820_) with
                        | Some (rd,(existT _ _stringappend_821_ _)) =>
                           let _stringappend_822_ :=
                             string_drop _stringappend_820_ (build_ex _stringappend_821_) in
                           sep_matches_prefix _stringappend_822_ >>= fun w__105 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__105 with
                                          | Some (tt,(existT _ _stringappend_823_ _)) =>
                                             let _stringappend_824_ :=
                                               string_drop _stringappend_822_
                                                 (build_ex _stringappend_823_) in
                                             if ((match (reg_name_matches_prefix _stringappend_824_) with
                                                  | Some (rs1,(existT _ _stringappend_825_ _)) =>
                                                     let _stringappend_826_ :=
                                                       string_drop _stringappend_824_
                                                         (build_ex _stringappend_825_) in
                                                     if ((match (hex_bits_6_matches_prefix
                                                                   _stringappend_826_) with
                                                          | Some
                                                            (shamt,(existT _ _stringappend_827_ _)) =>
                                                             match (string_drop _stringappend_826_
                                                                      (build_ex _stringappend_827_)) with
                                                             | "" => true
                                                             | _ => false
                                                             end
                                                          | None => false
                                                          end)) then
                                                       true
                                                     else false
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__106 : bool =>
                        returnm ((if (w__106) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__107 : bool =>
                     returnm ((if (w__107) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__108 : bool =>
                  (if (w__108) then
                     (match (shiftiop_mnemonic_matches_prefix _stringappend_756_) with
                      | Some (op,(existT _ _stringappend_817_ _)) =>
                         returnm (op, build_ex _stringappend_817_)
                      | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                      end : M ((sop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_817_ _) =>
                     let _stringappend_818_ :=
                       string_drop _stringappend_756_ (build_ex _stringappend_817_) in
                     (match (spc_matches_prefix _stringappend_818_) with
                      | Some (tt,(existT _ _stringappend_819_ _)) =>
                         returnm (tt, build_ex _stringappend_819_)
                      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                      end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_819_ _) =>
                     let _stringappend_820_ :=
                       string_drop _stringappend_818_ (build_ex _stringappend_819_) in
                     (match (reg_name_matches_prefix _stringappend_820_) with
                      | Some (rd,(existT _ _stringappend_821_ _)) =>
                         returnm (rd, build_ex _stringappend_821_)
                      | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                      end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_821_ _) =>
                     let _stringappend_822_ :=
                       string_drop _stringappend_820_ (build_ex _stringappend_821_) in
                     sep_matches_prefix _stringappend_822_ >>= fun w__115 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     (match w__115 with
                      | Some (tt,(existT _ _stringappend_823_ _)) =>
                         returnm (tt, build_ex _stringappend_823_)
                      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                      end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_823_ _) =>
                     let _stringappend_824_ :=
                       string_drop _stringappend_822_ (build_ex _stringappend_823_) in
                     (match (reg_name_matches_prefix _stringappend_824_) with
                      | Some (rs1,(existT _ _stringappend_825_ _)) =>
                         returnm (rs1, build_ex _stringappend_825_)
                      | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                      end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_825_ _) =>
                     let _stringappend_826_ :=
                       string_drop _stringappend_824_ (build_ex _stringappend_825_) in
                     (match (hex_bits_6_matches_prefix _stringappend_826_) with
                      | Some (shamt,(existT _ _stringappend_827_ _)) =>
                         returnm (shamt, build_ex _stringappend_827_)
                      | _ => exit tt  : M ((mword 6 * {n : Z & ArithFact (n >= 0)}))
                      end : M ((mword 6 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(shamt, existT _ _stringappend_827_ _) =>
                     (match (string_drop _stringappend_826_ (build_ex _stringappend_827_)) with
                      | "" => returnm ((SHIFTIOP (shamt, rs1, rd, op))  : ast )
                      | _ => exit tt  : M (ast)
                      end)
                      : M (ast)
                   else
                     match (rtype_mnemonic_matches_prefix _stringappend_756_) with
                     | Some (op,(existT _ _stringappend_829_ _)) =>
                        let _stringappend_830_ :=
                          string_drop _stringappend_756_ (build_ex _stringappend_829_) in
                        match (spc_matches_prefix _stringappend_830_) with
                        | Some (tt,(existT _ _stringappend_831_ _)) =>
                           let _stringappend_832_ :=
                             string_drop _stringappend_830_ (build_ex _stringappend_831_) in
                           match (reg_name_matches_prefix _stringappend_832_) with
                           | Some (rd,(existT _ _stringappend_833_ _)) =>
                              let _stringappend_834_ :=
                                string_drop _stringappend_832_ (build_ex _stringappend_833_) in
                              sep_matches_prefix _stringappend_834_ >>= fun w__124 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__124 with
                              | Some (tt,(existT _ _stringappend_835_ _)) =>
                                 let _stringappend_836_ :=
                                   string_drop _stringappend_834_ (build_ex _stringappend_835_) in
                                 match (reg_name_matches_prefix _stringappend_836_) with
                                 | Some (rs1,(existT _ _stringappend_837_ _)) =>
                                    let _stringappend_838_ :=
                                      string_drop _stringappend_836_ (build_ex _stringappend_837_) in
                                    sep_matches_prefix _stringappend_838_ >>= fun w__125 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    returnm ((if ((match w__125 with
                                                   | Some (tt,(existT _ _stringappend_839_ _)) =>
                                                      let _stringappend_840_ :=
                                                        string_drop _stringappend_838_
                                                          (build_ex _stringappend_839_) in
                                                      if ((match (reg_name_matches_prefix
                                                                    _stringappend_840_) with
                                                           | Some
                                                             (rs2,(existT _ _stringappend_841_ _)) =>
                                                              match (string_drop _stringappend_840_
                                                                       (build_ex _stringappend_841_)) with
                                                              | "" => true
                                                              | _ => false
                                                              end
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false
                                                   | None => false
                                                   end)) then
                                                true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__126 : bool =>
                                 returnm ((if (w__126) then true
                                           else false)
                                  : bool)
                              | None => returnm (false  : bool)
                              end >>= fun w__127 : bool =>
                              returnm ((if (w__127) then true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__128 : bool =>
                           returnm ((if (w__128) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__129 : bool =>
                        returnm ((if (w__129) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__130 : bool =>
                     (if (w__130) then
                        (match (rtype_mnemonic_matches_prefix _stringappend_756_) with
                         | Some (op,(existT _ _stringappend_829_ _)) =>
                            returnm (op, build_ex _stringappend_829_)
                         | _ => exit tt  : M ((rop * {n : Z & ArithFact (n >= 0)}))
                         end : M ((rop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_829_ _) =>
                        let _stringappend_830_ :=
                          string_drop _stringappend_756_ (build_ex _stringappend_829_) in
                        (match (spc_matches_prefix _stringappend_830_) with
                         | Some (tt,(existT _ _stringappend_831_ _)) =>
                            returnm (tt, build_ex _stringappend_831_)
                         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                         end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_831_ _) =>
                        let _stringappend_832_ :=
                          string_drop _stringappend_830_ (build_ex _stringappend_831_) in
                        (match (reg_name_matches_prefix _stringappend_832_) with
                         | Some (rd,(existT _ _stringappend_833_ _)) =>
                            returnm (rd, build_ex _stringappend_833_)
                         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                         end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_833_ _) =>
                        let _stringappend_834_ :=
                          string_drop _stringappend_832_ (build_ex _stringappend_833_) in
                        sep_matches_prefix _stringappend_834_ >>= fun w__137 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        (match w__137 with
                         | Some (tt,(existT _ _stringappend_835_ _)) =>
                            returnm (tt, build_ex _stringappend_835_)
                         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                         end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_835_ _) =>
                        let _stringappend_836_ :=
                          string_drop _stringappend_834_ (build_ex _stringappend_835_) in
                        (match (reg_name_matches_prefix _stringappend_836_) with
                         | Some (rs1,(existT _ _stringappend_837_ _)) =>
                            returnm (rs1, build_ex _stringappend_837_)
                         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                         end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_837_ _) =>
                        let _stringappend_838_ :=
                          string_drop _stringappend_836_ (build_ex _stringappend_837_) in
                        sep_matches_prefix _stringappend_838_ >>= fun w__142 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        (match w__142 with
                         | Some (tt,(existT _ _stringappend_839_ _)) =>
                            returnm (tt, build_ex _stringappend_839_)
                         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                         end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_839_ _) =>
                        let _stringappend_840_ :=
                          string_drop _stringappend_838_ (build_ex _stringappend_839_) in
                        (match (reg_name_matches_prefix _stringappend_840_) with
                         | Some (rs2,(existT _ _stringappend_841_ _)) =>
                            returnm (rs2, build_ex _stringappend_841_)
                         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                         end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_841_ _) =>
                        (match (string_drop _stringappend_840_ (build_ex _stringappend_841_)) with
                         | "" => returnm ((RTYPE (rs2, rs1, rd, op))  : ast )
                         | _ => exit tt  : M (ast)
                         end)
                         : M (ast)
                      else
                        and_boolM (returnm ((string_startswith _stringappend_756_ "l")  : bool))
                          (let _stringappend_843_ :=
                            string_drop _stringappend_756_ (build_ex (projT1 (string_length "l"))) in
                          match (size_mnemonic_matches_prefix _stringappend_843_) with
                          | Some (size,(existT _ _stringappend_844_ _)) =>
                             let _stringappend_845_ :=
                               string_drop _stringappend_843_ (build_ex _stringappend_844_) in
                             match (maybe_u_matches_prefix _stringappend_845_) with
                             | Some (is_unsigned,(existT _ _stringappend_846_ _)) =>
                                let _stringappend_847_ :=
                                  string_drop _stringappend_845_ (build_ex _stringappend_846_) in
                                match (maybe_aq_matches_prefix _stringappend_847_) with
                                | Some (aq,(existT _ _stringappend_848_ _)) =>
                                   let _stringappend_849_ :=
                                     string_drop _stringappend_847_ (build_ex _stringappend_848_) in
                                   match (maybe_rl_matches_prefix _stringappend_849_) with
                                   | Some (rl,(existT _ _stringappend_850_ _)) =>
                                      let _stringappend_851_ :=
                                        string_drop _stringappend_849_ (build_ex _stringappend_850_) in
                                      match (spc_matches_prefix _stringappend_851_) with
                                      | Some (tt,(existT _ _stringappend_852_ _)) =>
                                         let _stringappend_853_ :=
                                           string_drop _stringappend_851_
                                             (build_ex _stringappend_852_) in
                                         match (reg_name_matches_prefix _stringappend_853_) with
                                         | Some (rd,(existT _ _stringappend_854_ _)) =>
                                            let _stringappend_855_ :=
                                              string_drop _stringappend_853_
                                                (build_ex _stringappend_854_) in
                                            sep_matches_prefix _stringappend_855_ >>= fun w__149 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__149 with
                                            | Some (tt,(existT _ _stringappend_856_ _)) =>
                                               let _stringappend_857_ :=
                                                 string_drop _stringappend_855_
                                                   (build_ex _stringappend_856_) in
                                               match (reg_name_matches_prefix _stringappend_857_) with
                                               | Some (rs1,(existT _ _stringappend_858_ _)) =>
                                                  let _stringappend_859_ :=
                                                    string_drop _stringappend_857_
                                                      (build_ex _stringappend_858_) in
                                                  sep_matches_prefix _stringappend_859_ >>= fun w__150 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__150 with
                                                                 | Some
                                                                   (tt,(existT _ _stringappend_860_ _)) =>
                                                                    let _stringappend_861_ :=
                                                                      string_drop _stringappend_859_
                                                                        (build_ex _stringappend_860_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_861_) with
                                                                         | Some
                                                                           (imm,(existT _ _stringappend_862_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_861_
                                                                                     (build_ex _stringappend_862_)) with
                                                                            | "" => true
                                                                            | _ => false
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__151 : bool =>
                                               returnm ((if (w__151) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__152 : bool =>
                                            returnm ((if (w__152) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__153 : bool =>
                                         returnm ((if (w__153) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__154 : bool =>
                                      returnm ((if (w__154) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__155 : bool =>
                                   returnm ((if (w__155) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__156 : bool =>
                                returnm ((if (w__156) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__157 : bool =>
                             returnm ((if (w__157) then true
                                       else false)
                              : bool)
                          | None => returnm (false  : bool)
                          end >>= fun w__158 : bool =>
                          returnm ((if (w__158) then true
                                    else false)
                           : bool)) >>= fun w__159 : bool =>
                        (if (w__159) then
                           let _stringappend_843_ :=
                             string_drop _stringappend_756_ (build_ex (projT1 (string_length "l"))) in
                           (match (size_mnemonic_matches_prefix _stringappend_843_) with
                            | Some (size,(existT _ _stringappend_844_ _)) =>
                               returnm (size, build_ex _stringappend_844_)
                            | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                            end : M ((word_width * {n : Z & ArithFact (n >= 0)}))) >>= fun '(size, existT _ _stringappend_844_ _) =>
                           let _stringappend_845_ :=
                             string_drop _stringappend_843_ (build_ex _stringappend_844_) in
                           (match (maybe_u_matches_prefix _stringappend_845_) with
                            | Some (is_unsigned,(existT _ _stringappend_846_ _)) =>
                               returnm (is_unsigned, build_ex _stringappend_846_)
                            | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                            end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(is_unsigned, existT _ _stringappend_846_ _) =>
                           let _stringappend_847_ :=
                             string_drop _stringappend_845_ (build_ex _stringappend_846_) in
                           (match (maybe_aq_matches_prefix _stringappend_847_) with
                            | Some (aq,(existT _ _stringappend_848_ _)) =>
                               returnm (aq, build_ex _stringappend_848_)
                            | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                            end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(aq, existT _ _stringappend_848_ _) =>
                           let _stringappend_849_ :=
                             string_drop _stringappend_847_ (build_ex _stringappend_848_) in
                           (match (maybe_rl_matches_prefix _stringappend_849_) with
                            | Some (rl,(existT _ _stringappend_850_ _)) =>
                               returnm (rl, build_ex _stringappend_850_)
                            | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                            end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rl, existT _ _stringappend_850_ _) =>
                           let _stringappend_851_ :=
                             string_drop _stringappend_849_ (build_ex _stringappend_850_) in
                           (match (spc_matches_prefix _stringappend_851_) with
                            | Some (tt,(existT _ _stringappend_852_ _)) =>
                               returnm (tt, build_ex _stringappend_852_)
                            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                            end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_852_ _) =>
                           let _stringappend_853_ :=
                             string_drop _stringappend_851_ (build_ex _stringappend_852_) in
                           (match (reg_name_matches_prefix _stringappend_853_) with
                            | Some (rd,(existT _ _stringappend_854_ _)) =>
                               returnm (rd, build_ex _stringappend_854_)
                            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                            end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_854_ _) =>
                           let _stringappend_855_ :=
                             string_drop _stringappend_853_ (build_ex _stringappend_854_) in
                           sep_matches_prefix _stringappend_855_ >>= fun w__172 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           (match w__172 with
                            | Some (tt,(existT _ _stringappend_856_ _)) =>
                               returnm (tt, build_ex _stringappend_856_)
                            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                            end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_856_ _) =>
                           let _stringappend_857_ :=
                             string_drop _stringappend_855_ (build_ex _stringappend_856_) in
                           (match (reg_name_matches_prefix _stringappend_857_) with
                            | Some (rs1,(existT _ _stringappend_858_ _)) =>
                               returnm (rs1, build_ex _stringappend_858_)
                            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                            end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_858_ _) =>
                           let _stringappend_859_ :=
                             string_drop _stringappend_857_ (build_ex _stringappend_858_) in
                           sep_matches_prefix _stringappend_859_ >>= fun w__177 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           (match w__177 with
                            | Some (tt,(existT _ _stringappend_860_ _)) =>
                               returnm (tt, build_ex _stringappend_860_)
                            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                            end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_860_ _) =>
                           let _stringappend_861_ :=
                             string_drop _stringappend_859_ (build_ex _stringappend_860_) in
                           (match (hex_bits_12_matches_prefix _stringappend_861_) with
                            | Some (imm,(existT _ _stringappend_862_ _)) =>
                               returnm (imm, build_ex _stringappend_862_)
                            | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                            end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_862_ _) =>
                           (match (string_drop _stringappend_861_ (build_ex _stringappend_862_)) with
                            | "" =>
                               returnm ((LOAD (imm, rs1, rd, is_unsigned, size, aq, rl))  : ast )
                            | _ => exit tt  : M (ast)
                            end)
                            : M (ast)
                         else
                           and_boolM (returnm ((string_startswith _stringappend_756_ "s")  : bool))
                             (let _stringappend_864_ :=
                               string_drop _stringappend_756_
                                 (build_ex (projT1 (string_length "s"))) in
                             match (size_mnemonic_matches_prefix _stringappend_864_) with
                             | Some (size,(existT _ _stringappend_865_ _)) =>
                                let _stringappend_866_ :=
                                  string_drop _stringappend_864_ (build_ex _stringappend_865_) in
                                match (maybe_aq_matches_prefix _stringappend_866_) with
                                | Some (aq,(existT _ _stringappend_867_ _)) =>
                                   let _stringappend_868_ :=
                                     string_drop _stringappend_866_ (build_ex _stringappend_867_) in
                                   match (maybe_rl_matches_prefix _stringappend_868_) with
                                   | Some (rl,(existT _ _stringappend_869_ _)) =>
                                      let _stringappend_870_ :=
                                        string_drop _stringappend_868_ (build_ex _stringappend_869_) in
                                      match (spc_matches_prefix _stringappend_870_) with
                                      | Some (tt,(existT _ _stringappend_871_ _)) =>
                                         let _stringappend_872_ :=
                                           string_drop _stringappend_870_
                                             (build_ex _stringappend_871_) in
                                         match (reg_name_matches_prefix _stringappend_872_) with
                                         | Some (rd,(existT _ _stringappend_873_ _)) =>
                                            let _stringappend_874_ :=
                                              string_drop _stringappend_872_
                                                (build_ex _stringappend_873_) in
                                            sep_matches_prefix _stringappend_874_ >>= fun w__184 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__184 with
                                            | Some (tt,(existT _ _stringappend_875_ _)) =>
                                               let _stringappend_876_ :=
                                                 string_drop _stringappend_874_
                                                   (build_ex _stringappend_875_) in
                                               match (reg_name_matches_prefix _stringappend_876_) with
                                               | Some (rs1,(existT _ _stringappend_877_ _)) =>
                                                  let _stringappend_878_ :=
                                                    string_drop _stringappend_876_
                                                      (build_ex _stringappend_877_) in
                                                  sep_matches_prefix _stringappend_878_ >>= fun w__185 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__185 with
                                                                 | Some
                                                                   (tt,(existT _ _stringappend_879_ _)) =>
                                                                    let _stringappend_880_ :=
                                                                      string_drop _stringappend_878_
                                                                        (build_ex _stringappend_879_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_880_) with
                                                                         | Some
                                                                           (imm,(existT _ _stringappend_881_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_880_
                                                                                     (build_ex _stringappend_881_)) with
                                                                            | "" => true
                                                                            | _ => false
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__186 : bool =>
                                               returnm ((if (w__186) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__187 : bool =>
                                            returnm ((if (w__187) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__188 : bool =>
                                         returnm ((if (w__188) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__189 : bool =>
                                      returnm ((if (w__189) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__190 : bool =>
                                   returnm ((if (w__190) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__191 : bool =>
                                returnm ((if (w__191) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__192 : bool =>
                             returnm ((if (w__192) then true
                                       else false)
                              : bool)) >>= fun w__193 : bool =>
                           (if (w__193) then
                              let _stringappend_864_ :=
                                string_drop _stringappend_756_
                                  (build_ex (projT1 (string_length "s"))) in
                              (match (size_mnemonic_matches_prefix _stringappend_864_) with
                               | Some (size,(existT _ _stringappend_865_ _)) =>
                                  returnm (size, build_ex _stringappend_865_)
                               | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                               end : M ((word_width * {n : Z & ArithFact (n >= 0)}))) >>= fun '(size, existT _ _stringappend_865_ _) =>
                              let _stringappend_866_ :=
                                string_drop _stringappend_864_ (build_ex _stringappend_865_) in
                              (match (maybe_aq_matches_prefix _stringappend_866_) with
                               | Some (aq,(existT _ _stringappend_867_ _)) =>
                                  returnm (aq, build_ex _stringappend_867_)
                               | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                               end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(aq, existT _ _stringappend_867_ _) =>
                              let _stringappend_868_ :=
                                string_drop _stringappend_866_ (build_ex _stringappend_867_) in
                              (match (maybe_rl_matches_prefix _stringappend_868_) with
                               | Some (rl,(existT _ _stringappend_869_ _)) =>
                                  returnm (rl, build_ex _stringappend_869_)
                               | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                               end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rl, existT _ _stringappend_869_ _) =>
                              let _stringappend_870_ :=
                                string_drop _stringappend_868_ (build_ex _stringappend_869_) in
                              (match (spc_matches_prefix _stringappend_870_) with
                               | Some (tt,(existT _ _stringappend_871_ _)) =>
                                  returnm (tt, build_ex _stringappend_871_)
                               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                               end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_871_ _) =>
                              let _stringappend_872_ :=
                                string_drop _stringappend_870_ (build_ex _stringappend_871_) in
                              (match (reg_name_matches_prefix _stringappend_872_) with
                               | Some (rd,(existT _ _stringappend_873_ _)) =>
                                  returnm (rd, build_ex _stringappend_873_)
                               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                               end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_873_ _) =>
                              let _stringappend_874_ :=
                                string_drop _stringappend_872_ (build_ex _stringappend_873_) in
                              sep_matches_prefix _stringappend_874_ >>= fun w__204 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              (match w__204 with
                               | Some (tt,(existT _ _stringappend_875_ _)) =>
                                  returnm (tt, build_ex _stringappend_875_)
                               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                               end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_875_ _) =>
                              let _stringappend_876_ :=
                                string_drop _stringappend_874_ (build_ex _stringappend_875_) in
                              (match (reg_name_matches_prefix _stringappend_876_) with
                               | Some (rs1,(existT _ _stringappend_877_ _)) =>
                                  returnm (rs1, build_ex _stringappend_877_)
                               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                               end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_877_ _) =>
                              let _stringappend_878_ :=
                                string_drop _stringappend_876_ (build_ex _stringappend_877_) in
                              sep_matches_prefix _stringappend_878_ >>= fun w__209 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              (match w__209 with
                               | Some (tt,(existT _ _stringappend_879_ _)) =>
                                  returnm (tt, build_ex _stringappend_879_)
                               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                               end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_879_ _) =>
                              let _stringappend_880_ :=
                                string_drop _stringappend_878_ (build_ex _stringappend_879_) in
                              (match (hex_bits_12_matches_prefix _stringappend_880_) with
                               | Some (imm,(existT _ _stringappend_881_ _)) =>
                                  returnm (imm, build_ex _stringappend_881_)
                               | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                               end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_881_ _) =>
                              (match (string_drop _stringappend_880_ (build_ex _stringappend_881_)) with
                               | "" => returnm ((STORE (imm, rs1, rd, size, aq, rl))  : ast )
                               | _ => exit tt  : M (ast)
                               end)
                               : M (ast)
                            else
                              and_boolM
                                (returnm ((string_startswith _stringappend_756_ "addiw")
                                  : bool))
                                (let _stringappend_883_ :=
                                  string_drop _stringappend_756_
                                    (build_ex (projT1 (string_length "addiw"))) in
                                match (spc_matches_prefix _stringappend_883_) with
                                | Some (tt,(existT _ _stringappend_884_ _)) =>
                                   let _stringappend_885_ :=
                                     string_drop _stringappend_883_ (build_ex _stringappend_884_) in
                                   match (reg_name_matches_prefix _stringappend_885_) with
                                   | Some (rd,(existT _ _stringappend_886_ _)) =>
                                      let _stringappend_887_ :=
                                        string_drop _stringappend_885_ (build_ex _stringappend_886_) in
                                      sep_matches_prefix _stringappend_887_ >>= fun w__216 : option ((unit * {n : Z & ArithFact (n >=
                                        0)})) =>
                                      match w__216 with
                                      | Some (tt,(existT _ _stringappend_888_ _)) =>
                                         let _stringappend_889_ :=
                                           string_drop _stringappend_887_
                                             (build_ex _stringappend_888_) in
                                         match (reg_name_matches_prefix _stringappend_889_) with
                                         | Some (rs1,(existT _ _stringappend_890_ _)) =>
                                            let _stringappend_891_ :=
                                              string_drop _stringappend_889_
                                                (build_ex _stringappend_890_) in
                                            sep_matches_prefix _stringappend_891_ >>= fun w__217 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            returnm ((if ((match w__217 with
                                                           | Some
                                                             (tt,(existT _ _stringappend_892_ _)) =>
                                                              let _stringappend_893_ :=
                                                                string_drop _stringappend_891_
                                                                  (build_ex _stringappend_892_) in
                                                              if ((match (hex_bits_12_matches_prefix
                                                                            _stringappend_893_) with
                                                                   | Some
                                                                     (imm,(existT _ _stringappend_894_ _)) =>
                                                                      match (string_drop
                                                                               _stringappend_893_
                                                                               (build_ex _stringappend_894_)) with
                                                                      | "" => true
                                                                      | _ => false
                                                                      end
                                                                   | None => false
                                                                   end)) then
                                                                true
                                                              else false
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__218 : bool =>
                                         returnm ((if (w__218) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__219 : bool =>
                                      returnm ((if (w__219) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__220 : bool =>
                                   returnm ((if (w__220) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__221 : bool =>
                                returnm ((if (w__221) then true
                                          else false)
                                 : bool)) >>= fun w__222 : bool =>
                              (if (w__222) then
                                 let _stringappend_883_ :=
                                   string_drop _stringappend_756_
                                     (build_ex (projT1 (string_length "addiw"))) in
                                 (match (spc_matches_prefix _stringappend_883_) with
                                  | Some (tt,(existT _ _stringappend_884_ _)) =>
                                     returnm (tt, build_ex _stringappend_884_)
                                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_884_ _) =>
                                 let _stringappend_885_ :=
                                   string_drop _stringappend_883_ (build_ex _stringappend_884_) in
                                 (match (reg_name_matches_prefix _stringappend_885_) with
                                  | Some (rd,(existT _ _stringappend_886_ _)) =>
                                     returnm (rd, build_ex _stringappend_886_)
                                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_886_ _) =>
                                 let _stringappend_887_ :=
                                   string_drop _stringappend_885_ (build_ex _stringappend_886_) in
                                 sep_matches_prefix _stringappend_887_ >>= fun w__227 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 (match w__227 with
                                  | Some (tt,(existT _ _stringappend_888_ _)) =>
                                     returnm (tt, build_ex _stringappend_888_)
                                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_888_ _) =>
                                 let _stringappend_889_ :=
                                   string_drop _stringappend_887_ (build_ex _stringappend_888_) in
                                 (match (reg_name_matches_prefix _stringappend_889_) with
                                  | Some (rs1,(existT _ _stringappend_890_ _)) =>
                                     returnm (rs1, build_ex _stringappend_890_)
                                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_890_ _) =>
                                 let _stringappend_891_ :=
                                   string_drop _stringappend_889_ (build_ex _stringappend_890_) in
                                 sep_matches_prefix _stringappend_891_ >>= fun w__232 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 (match w__232 with
                                  | Some (tt,(existT _ _stringappend_892_ _)) =>
                                     returnm (tt, build_ex _stringappend_892_)
                                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_892_ _) =>
                                 let _stringappend_893_ :=
                                   string_drop _stringappend_891_ (build_ex _stringappend_892_) in
                                 (match (hex_bits_12_matches_prefix _stringappend_893_) with
                                  | Some (imm,(existT _ _stringappend_894_ _)) =>
                                     returnm (imm, build_ex _stringappend_894_)
                                  | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_894_ _) =>
                                 (match (string_drop _stringappend_893_
                                           (build_ex _stringappend_894_)) with
                                  | "" => returnm ((ADDIW (imm, rs1, rd))  : ast )
                                  | _ => exit tt  : M (ast)
                                  end)
                                  : M (ast)
                               else
                                 match (shiftw_mnemonic_matches_prefix _stringappend_756_) with
                                 | Some (op,(existT _ _stringappend_896_ _)) =>
                                    let _stringappend_897_ :=
                                      string_drop _stringappend_756_ (build_ex _stringappend_896_) in
                                    match (spc_matches_prefix _stringappend_897_) with
                                    | Some (tt,(existT _ _stringappend_898_ _)) =>
                                       let _stringappend_899_ :=
                                         string_drop _stringappend_897_
                                           (build_ex _stringappend_898_) in
                                       match (reg_name_matches_prefix _stringappend_899_) with
                                       | Some (rd,(existT _ _stringappend_900_ _)) =>
                                          let _stringappend_901_ :=
                                            string_drop _stringappend_899_
                                              (build_ex _stringappend_900_) in
                                          sep_matches_prefix _stringappend_901_ >>= fun w__239 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          match w__239 with
                                          | Some (tt,(existT _ _stringappend_902_ _)) =>
                                             let _stringappend_903_ :=
                                               string_drop _stringappend_901_
                                                 (build_ex _stringappend_902_) in
                                             match (reg_name_matches_prefix _stringappend_903_) with
                                             | Some (rs1,(existT _ _stringappend_904_ _)) =>
                                                let _stringappend_905_ :=
                                                  string_drop _stringappend_903_
                                                    (build_ex _stringappend_904_) in
                                                sep_matches_prefix _stringappend_905_ >>= fun w__240 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__240 with
                                                               | Some
                                                                 (tt,(existT _ _stringappend_906_ _)) =>
                                                                  let _stringappend_907_ :=
                                                                    string_drop _stringappend_905_
                                                                      (build_ex _stringappend_906_) in
                                                                  if ((match (hex_bits_5_matches_prefix
                                                                                _stringappend_907_) with
                                                                       | Some
                                                                         (shamt,(existT _ _stringappend_908_ _)) =>
                                                                          match (string_drop
                                                                                   _stringappend_907_
                                                                                   (build_ex _stringappend_908_)) with
                                                                          | "" => true
                                                                          | _ => false
                                                                          end
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__241 : bool =>
                                             returnm ((if (w__241) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__242 : bool =>
                                          returnm ((if (w__242) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__243 : bool =>
                                       returnm ((if (w__243) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__244 : bool =>
                                    returnm ((if (w__244) then true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__245 : bool =>
                                 (if (w__245) then
                                    (match (shiftw_mnemonic_matches_prefix _stringappend_756_) with
                                     | Some (op,(existT _ _stringappend_896_ _)) =>
                                        returnm (op, build_ex _stringappend_896_)
                                     | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((sop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_896_ _) =>
                                    let _stringappend_897_ :=
                                      string_drop _stringappend_756_ (build_ex _stringappend_896_) in
                                    (match (spc_matches_prefix _stringappend_897_) with
                                     | Some (tt,(existT _ _stringappend_898_ _)) =>
                                        returnm (tt, build_ex _stringappend_898_)
                                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_898_ _) =>
                                    let _stringappend_899_ :=
                                      string_drop _stringappend_897_ (build_ex _stringappend_898_) in
                                    (match (reg_name_matches_prefix _stringappend_899_) with
                                     | Some (rd,(existT _ _stringappend_900_ _)) =>
                                        returnm (rd, build_ex _stringappend_900_)
                                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_900_ _) =>
                                    let _stringappend_901_ :=
                                      string_drop _stringappend_899_ (build_ex _stringappend_900_) in
                                    sep_matches_prefix _stringappend_901_ >>= fun w__252 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    (match w__252 with
                                     | Some (tt,(existT _ _stringappend_902_ _)) =>
                                        returnm (tt, build_ex _stringappend_902_)
                                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_902_ _) =>
                                    let _stringappend_903_ :=
                                      string_drop _stringappend_901_ (build_ex _stringappend_902_) in
                                    (match (reg_name_matches_prefix _stringappend_903_) with
                                     | Some (rs1,(existT _ _stringappend_904_ _)) =>
                                        returnm (rs1, build_ex _stringappend_904_)
                                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_904_ _) =>
                                    let _stringappend_905_ :=
                                      string_drop _stringappend_903_ (build_ex _stringappend_904_) in
                                    sep_matches_prefix _stringappend_905_ >>= fun w__257 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    (match w__257 with
                                     | Some (tt,(existT _ _stringappend_906_ _)) =>
                                        returnm (tt, build_ex _stringappend_906_)
                                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_906_ _) =>
                                    let _stringappend_907_ :=
                                      string_drop _stringappend_905_ (build_ex _stringappend_906_) in
                                    (match (hex_bits_5_matches_prefix _stringappend_907_) with
                                     | Some (shamt,(existT _ _stringappend_908_ _)) =>
                                        returnm (shamt, build_ex _stringappend_908_)
                                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(shamt, existT _ _stringappend_908_ _) =>
                                    (match (string_drop _stringappend_907_
                                              (build_ex _stringappend_908_)) with
                                     | "" => returnm ((SHIFTW (shamt, rs1, rd, op))  : ast )
                                     | _ => exit tt  : M (ast)
                                     end)
                                     : M (ast)
                                  else
                                    match (rtypew_mnemonic_matches_prefix _stringappend_756_) with
                                    | Some (op,(existT _ _stringappend_910_ _)) =>
                                       let _stringappend_911_ :=
                                         string_drop _stringappend_756_
                                           (build_ex _stringappend_910_) in
                                       match (spc_matches_prefix _stringappend_911_) with
                                       | Some (tt,(existT _ _stringappend_912_ _)) =>
                                          let _stringappend_913_ :=
                                            string_drop _stringappend_911_
                                              (build_ex _stringappend_912_) in
                                          match (reg_name_matches_prefix _stringappend_913_) with
                                          | Some (rd,(existT _ _stringappend_914_ _)) =>
                                             let _stringappend_915_ :=
                                               string_drop _stringappend_913_
                                                 (build_ex _stringappend_914_) in
                                             sep_matches_prefix _stringappend_915_ >>= fun w__264 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__264 with
                                             | Some (tt,(existT _ _stringappend_916_ _)) =>
                                                let _stringappend_917_ :=
                                                  string_drop _stringappend_915_
                                                    (build_ex _stringappend_916_) in
                                                match (reg_name_matches_prefix _stringappend_917_) with
                                                | Some (rs1,(existT _ _stringappend_918_ _)) =>
                                                   let _stringappend_919_ :=
                                                     string_drop _stringappend_917_
                                                       (build_ex _stringappend_918_) in
                                                   sep_matches_prefix _stringappend_919_ >>= fun w__265 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   returnm ((if ((match w__265 with
                                                                  | Some
                                                                    (tt,(existT _ _stringappend_920_ _)) =>
                                                                     let _stringappend_921_ :=
                                                                       string_drop
                                                                         _stringappend_919_
                                                                         (build_ex _stringappend_920_) in
                                                                     if ((match (reg_name_matches_prefix
                                                                                   _stringappend_921_) with
                                                                          | Some
                                                                            (rs2,(existT _ _stringappend_922_ _)) =>
                                                                             match (string_drop
                                                                                      _stringappend_921_
                                                                                      (build_ex _stringappend_922_)) with
                                                                             | "" => true
                                                                             | _ => false
                                                                             end
                                                                          | None => false
                                                                          end)) then
                                                                       true
                                                                     else false
                                                                  | None => false
                                                                  end)) then
                                                               true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__266 : bool =>
                                                returnm ((if (w__266) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__267 : bool =>
                                             returnm ((if (w__267) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__268 : bool =>
                                          returnm ((if (w__268) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__269 : bool =>
                                       returnm ((if (w__269) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__270 : bool =>
                                    (if (w__270) then
                                       (match (rtypew_mnemonic_matches_prefix _stringappend_756_) with
                                        | Some (op,(existT _ _stringappend_910_ _)) =>
                                           returnm (op, build_ex _stringappend_910_)
                                        | _ => exit tt  : M ((ropw * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((ropw * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_910_ _) =>
                                       let _stringappend_911_ :=
                                         string_drop _stringappend_756_
                                           (build_ex _stringappend_910_) in
                                       (match (spc_matches_prefix _stringappend_911_) with
                                        | Some (tt,(existT _ _stringappend_912_ _)) =>
                                           returnm (tt, build_ex _stringappend_912_)
                                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_912_ _) =>
                                       let _stringappend_913_ :=
                                         string_drop _stringappend_911_
                                           (build_ex _stringappend_912_) in
                                       (match (reg_name_matches_prefix _stringappend_913_) with
                                        | Some (rd,(existT _ _stringappend_914_ _)) =>
                                           returnm (rd, build_ex _stringappend_914_)
                                        | _ =>
                                           exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_914_ _) =>
                                       let _stringappend_915_ :=
                                         string_drop _stringappend_913_
                                           (build_ex _stringappend_914_) in
                                       sep_matches_prefix _stringappend_915_ >>= fun w__277 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       (match w__277 with
                                        | Some (tt,(existT _ _stringappend_916_ _)) =>
                                           returnm (tt, build_ex _stringappend_916_)
                                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_916_ _) =>
                                       let _stringappend_917_ :=
                                         string_drop _stringappend_915_
                                           (build_ex _stringappend_916_) in
                                       (match (reg_name_matches_prefix _stringappend_917_) with
                                        | Some (rs1,(existT _ _stringappend_918_ _)) =>
                                           returnm (rs1, build_ex _stringappend_918_)
                                        | _ =>
                                           exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_918_ _) =>
                                       let _stringappend_919_ :=
                                         string_drop _stringappend_917_
                                           (build_ex _stringappend_918_) in
                                       sep_matches_prefix _stringappend_919_ >>= fun w__282 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       (match w__282 with
                                        | Some (tt,(existT _ _stringappend_920_ _)) =>
                                           returnm (tt, build_ex _stringappend_920_)
                                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_920_ _) =>
                                       let _stringappend_921_ :=
                                         string_drop _stringappend_919_
                                           (build_ex _stringappend_920_) in
                                       (match (reg_name_matches_prefix _stringappend_921_) with
                                        | Some (rs2,(existT _ _stringappend_922_ _)) =>
                                           returnm (rs2, build_ex _stringappend_922_)
                                        | _ =>
                                           exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_922_ _) =>
                                       (match (string_drop _stringappend_921_
                                                 (build_ex _stringappend_922_)) with
                                        | "" => returnm ((RTYPEW (rs2, rs1, rd, op))  : ast )
                                        | _ => exit tt  : M (ast)
                                        end)
                                        : M (ast)
                                     else
                                       match (shiftiwop_mnemonic_matches_prefix _stringappend_756_) with
                                       | Some (op,(existT _ _stringappend_924_ _)) =>
                                          let _stringappend_925_ :=
                                            string_drop _stringappend_756_
                                              (build_ex _stringappend_924_) in
                                          match (spc_matches_prefix _stringappend_925_) with
                                          | Some (tt,(existT _ _stringappend_926_ _)) =>
                                             let _stringappend_927_ :=
                                               string_drop _stringappend_925_
                                                 (build_ex _stringappend_926_) in
                                             match (reg_name_matches_prefix _stringappend_927_) with
                                             | Some (rd,(existT _ _stringappend_928_ _)) =>
                                                let _stringappend_929_ :=
                                                  string_drop _stringappend_927_
                                                    (build_ex _stringappend_928_) in
                                                sep_matches_prefix _stringappend_929_ >>= fun w__289 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__289 with
                                                               | Some
                                                                 (tt,(existT _ _stringappend_930_ _)) =>
                                                                  let _stringappend_931_ :=
                                                                    string_drop _stringappend_929_
                                                                      (build_ex _stringappend_930_) in
                                                                  if ((match (reg_name_matches_prefix
                                                                                _stringappend_931_) with
                                                                       | Some
                                                                         (rs1,(existT _ _stringappend_932_ _)) =>
                                                                          let _stringappend_933_ :=
                                                                            string_drop
                                                                              _stringappend_931_
                                                                              (build_ex _stringappend_932_) in
                                                                          if ((match (hex_bits_5_matches_prefix
                                                                                        _stringappend_933_) with
                                                                               | Some
                                                                                 (shamt,(existT _ _stringappend_934_ _)) =>
                                                                                  match (string_drop
                                                                                           _stringappend_933_
                                                                                           (build_ex _stringappend_934_)) with
                                                                                  | "" => true
                                                                                  | _ => false
                                                                                  end
                                                                               | None => false
                                                                               end)) then
                                                                            true
                                                                          else false
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__290 : bool =>
                                             returnm ((if (w__290) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__291 : bool =>
                                          returnm ((if (w__291) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__292 : bool =>
                                       (if (w__292) then
                                          (match (shiftiwop_mnemonic_matches_prefix
                                                    _stringappend_756_) with
                                           | Some (op,(existT _ _stringappend_924_ _)) =>
                                              returnm (op, build_ex _stringappend_924_)
                                           | _ =>
                                              exit tt  : M ((sopw * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((sopw * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_924_ _) =>
                                          let _stringappend_925_ :=
                                            string_drop _stringappend_756_
                                              (build_ex _stringappend_924_) in
                                          (match (spc_matches_prefix _stringappend_925_) with
                                           | Some (tt,(existT _ _stringappend_926_ _)) =>
                                              returnm (tt, build_ex _stringappend_926_)
                                           | _ =>
                                              exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_926_ _) =>
                                          let _stringappend_927_ :=
                                            string_drop _stringappend_925_
                                              (build_ex _stringappend_926_) in
                                          (match (reg_name_matches_prefix _stringappend_927_) with
                                           | Some (rd,(existT _ _stringappend_928_ _)) =>
                                              returnm (rd, build_ex _stringappend_928_)
                                           | _ =>
                                              exit tt
                                               : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_928_ _) =>
                                          let _stringappend_929_ :=
                                            string_drop _stringappend_927_
                                              (build_ex _stringappend_928_) in
                                          sep_matches_prefix _stringappend_929_ >>= fun w__299 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          (match w__299 with
                                           | Some (tt,(existT _ _stringappend_930_ _)) =>
                                              returnm (tt, build_ex _stringappend_930_)
                                           | _ =>
                                              exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_930_ _) =>
                                          let _stringappend_931_ :=
                                            string_drop _stringappend_929_
                                              (build_ex _stringappend_930_) in
                                          (match (reg_name_matches_prefix _stringappend_931_) with
                                           | Some (rs1,(existT _ _stringappend_932_ _)) =>
                                              returnm (rs1, build_ex _stringappend_932_)
                                           | _ =>
                                              exit tt
                                               : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_932_ _) =>
                                          let _stringappend_933_ :=
                                            string_drop _stringappend_931_
                                              (build_ex _stringappend_932_) in
                                          (match (hex_bits_5_matches_prefix _stringappend_933_) with
                                           | Some (shamt,(existT _ _stringappend_934_ _)) =>
                                              returnm (shamt, build_ex _stringappend_934_)
                                           | _ =>
                                              exit tt
                                               : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(shamt, existT _ _stringappend_934_ _) =>
                                          (match (string_drop _stringappend_933_
                                                    (build_ex _stringappend_934_)) with
                                           | "" =>
                                              returnm ((SHIFTIWOP (shamt, rs1, rd, op))  : ast )
                                           | _ => exit tt  : M (ast)
                                           end)
                                           : M (ast)
                                        else
                                          match (mul_mnemonic_matches_prefix _stringappend_756_) with
                                          | Some
                                            ((high, signed1, signed2),(existT _ _stringappend_936_ _)) =>
                                             let _stringappend_937_ :=
                                               string_drop _stringappend_756_
                                                 (build_ex _stringappend_936_) in
                                             match (spc_matches_prefix _stringappend_937_) with
                                             | Some (tt,(existT _ _stringappend_938_ _)) =>
                                                let _stringappend_939_ :=
                                                  string_drop _stringappend_937_
                                                    (build_ex _stringappend_938_) in
                                                match (reg_name_matches_prefix _stringappend_939_) with
                                                | Some (rd,(existT _ _stringappend_940_ _)) =>
                                                   let _stringappend_941_ :=
                                                     string_drop _stringappend_939_
                                                       (build_ex _stringappend_940_) in
                                                   sep_matches_prefix _stringappend_941_ >>= fun w__308 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__308 with
                                                   | Some (tt,(existT _ _stringappend_942_ _)) =>
                                                      let _stringappend_943_ :=
                                                        string_drop _stringappend_941_
                                                          (build_ex _stringappend_942_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_943_) with
                                                      | Some (rs1,(existT _ _stringappend_944_ _)) =>
                                                         let _stringappend_945_ :=
                                                           string_drop _stringappend_943_
                                                             (build_ex _stringappend_944_) in
                                                         sep_matches_prefix _stringappend_945_ >>= fun w__309 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         returnm ((if ((match w__309 with
                                                                        | Some
                                                                          (tt,(existT _ _stringappend_946_ _)) =>
                                                                           let _stringappend_947_ :=
                                                                             string_drop
                                                                               _stringappend_945_
                                                                               (build_ex _stringappend_946_) in
                                                                           if ((match (reg_name_matches_prefix
                                                                                         _stringappend_947_) with
                                                                                | Some
                                                                                  (rs2,(existT _ _stringappend_948_ _)) =>
                                                                                   match (string_drop
                                                                                            _stringappend_947_
                                                                                            (build_ex _stringappend_948_)) with
                                                                                   | "" => true
                                                                                   | _ => false
                                                                                   end
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false
                                                                        | None => false
                                                                        end)) then
                                                                     true
                                                                   else false)
                                                          : bool)
                                                      | None => returnm (false  : bool)
                                                      end >>= fun w__310 : bool =>
                                                      returnm ((if (w__310) then true
                                                                else false)
                                                       : bool)
                                                   | None => returnm (false  : bool)
                                                   end >>= fun w__311 : bool =>
                                                   returnm ((if (w__311) then true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__312 : bool =>
                                                returnm ((if (w__312) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__313 : bool =>
                                             returnm ((if (w__313) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__314 : bool =>
                                          (if (w__314) then
                                             (match (mul_mnemonic_matches_prefix _stringappend_756_) with
                                              | Some
                                                ((high, signed1, signed2),(existT _ _stringappend_936_ _)) =>
                                                 returnm ((high, signed1, signed2), build_ex _stringappend_936_)
                                              | _ =>
                                                 exit tt
                                                  : M (((bool * bool * bool) * {n : Z & ArithFact (n >=
                                                   0)}))
                                              end : M (((bool * bool * bool) * {n : Z & ArithFact (n >=
                                               0)}))) >>= fun '((high, signed1, signed2), existT _ _stringappend_936_ _) =>
                                             let _stringappend_937_ :=
                                               string_drop _stringappend_756_
                                                 (build_ex _stringappend_936_) in
                                             (match (spc_matches_prefix _stringappend_937_) with
                                              | Some (tt,(existT _ _stringappend_938_ _)) =>
                                                 returnm (tt, build_ex _stringappend_938_)
                                              | _ =>
                                                 exit tt
                                                  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_938_ _) =>
                                             let _stringappend_939_ :=
                                               string_drop _stringappend_937_
                                                 (build_ex _stringappend_938_) in
                                             (match (reg_name_matches_prefix _stringappend_939_) with
                                              | Some (rd,(existT _ _stringappend_940_ _)) =>
                                                 returnm (rd, build_ex _stringappend_940_)
                                              | _ =>
                                                 exit tt
                                                  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_940_ _) =>
                                             let _stringappend_941_ :=
                                               string_drop _stringappend_939_
                                                 (build_ex _stringappend_940_) in
                                             sep_matches_prefix _stringappend_941_ >>= fun w__321 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             (match w__321 with
                                              | Some (tt,(existT _ _stringappend_942_ _)) =>
                                                 returnm (tt, build_ex _stringappend_942_)
                                              | _ =>
                                                 exit tt
                                                  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_942_ _) =>
                                             let _stringappend_943_ :=
                                               string_drop _stringappend_941_
                                                 (build_ex _stringappend_942_) in
                                             (match (reg_name_matches_prefix _stringappend_943_) with
                                              | Some (rs1,(existT _ _stringappend_944_ _)) =>
                                                 returnm (rs1, build_ex _stringappend_944_)
                                              | _ =>
                                                 exit tt
                                                  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_944_ _) =>
                                             let _stringappend_945_ :=
                                               string_drop _stringappend_943_
                                                 (build_ex _stringappend_944_) in
                                             sep_matches_prefix _stringappend_945_ >>= fun w__326 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             (match w__326 with
                                              | Some (tt,(existT _ _stringappend_946_ _)) =>
                                                 returnm (tt, build_ex _stringappend_946_)
                                              | _ =>
                                                 exit tt
                                                  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_946_ _) =>
                                             let _stringappend_947_ :=
                                               string_drop _stringappend_945_
                                                 (build_ex _stringappend_946_) in
                                             (match (reg_name_matches_prefix _stringappend_947_) with
                                              | Some (rs2,(existT _ _stringappend_948_ _)) =>
                                                 returnm (rs2, build_ex _stringappend_948_)
                                              | _ =>
                                                 exit tt
                                                  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_948_ _) =>
                                             (match (string_drop _stringappend_947_
                                                       (build_ex _stringappend_948_)) with
                                              | "" =>
                                                 returnm ((MUL
                                                             (rs2, rs1, rd, high, signed1, signed2))
                                                  : ast )
                                              | _ => exit tt  : M (ast)
                                              end)
                                              : M (ast)
                                           else
                                             and_boolM
                                               (returnm ((string_startswith _stringappend_756_ "div")
                                                 : bool))
                                               (let _stringappend_950_ :=
                                                 string_drop _stringappend_756_
                                                   (build_ex (projT1 (string_length "div"))) in
                                               match (maybe_not_u_matches_prefix _stringappend_950_) with
                                               | Some (s,(existT _ _stringappend_951_ _)) =>
                                                  let _stringappend_952_ :=
                                                    string_drop _stringappend_950_
                                                      (build_ex _stringappend_951_) in
                                                  match (spc_matches_prefix _stringappend_952_) with
                                                  | Some (tt,(existT _ _stringappend_953_ _)) =>
                                                     let _stringappend_954_ :=
                                                       string_drop _stringappend_952_
                                                         (build_ex _stringappend_953_) in
                                                     match (reg_name_matches_prefix
                                                              _stringappend_954_) with
                                                     | Some (rd,(existT _ _stringappend_955_ _)) =>
                                                        let _stringappend_956_ :=
                                                          string_drop _stringappend_954_
                                                            (build_ex _stringappend_955_) in
                                                        sep_matches_prefix _stringappend_956_ >>= fun w__333 : option ((unit * {n : Z & ArithFact (n >=
                                                          0)})) =>
                                                        match w__333 with
                                                        | Some (tt,(existT _ _stringappend_957_ _)) =>
                                                           let _stringappend_958_ :=
                                                             string_drop _stringappend_956_
                                                               (build_ex _stringappend_957_) in
                                                           match (reg_name_matches_prefix
                                                                    _stringappend_958_) with
                                                           | Some
                                                             (rs1,(existT _ _stringappend_959_ _)) =>
                                                              let _stringappend_960_ :=
                                                                string_drop _stringappend_958_
                                                                  (build_ex _stringappend_959_) in
                                                              sep_matches_prefix _stringappend_960_ >>= fun w__334 : option ((unit * {n : Z & ArithFact (n >=
                                                                0)})) =>
                                                              returnm ((if ((match w__334 with
                                                                             | Some
                                                                               (tt,(existT _ _stringappend_961_ _)) =>
                                                                                let _stringappend_962_ :=
                                                                                  string_drop
                                                                                    _stringappend_960_
                                                                                    (build_ex _stringappend_961_) in
                                                                                if ((match (reg_name_matches_prefix
                                                                                              _stringappend_962_) with
                                                                                     | Some
                                                                                       (rs2,(existT _ _stringappend_963_ _)) =>
                                                                                        match (string_drop
                                                                                                 _stringappend_962_
                                                                                                 (build_ex _stringappend_963_)) with
                                                                                        | "" => true
                                                                                        | _ => false
                                                                                        end
                                                                                     | None => false
                                                                                     end)) then
                                                                                  true
                                                                                else false
                                                                             | None => false
                                                                             end)) then
                                                                          true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__335 : bool =>
                                                           returnm ((if (w__335) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__336 : bool =>
                                                        returnm ((if (w__336) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__337 : bool =>
                                                     returnm ((if (w__337) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__338 : bool =>
                                                  returnm ((if (w__338) then true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__339 : bool =>
                                               returnm ((if (w__339) then true
                                                         else false)
                                                : bool)) >>= fun w__340 : bool =>
                                             (if (w__340) then
                                                let _stringappend_950_ :=
                                                  string_drop _stringappend_756_
                                                    (build_ex (projT1 (string_length "div"))) in
                                                (match (maybe_not_u_matches_prefix
                                                          _stringappend_950_) with
                                                 | Some (s,(existT _ _stringappend_951_ _)) =>
                                                    returnm (s, build_ex _stringappend_951_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(s, existT _ _stringappend_951_ _) =>
                                                let _stringappend_952_ :=
                                                  string_drop _stringappend_950_
                                                    (build_ex _stringappend_951_) in
                                                (match (spc_matches_prefix _stringappend_952_) with
                                                 | Some (tt,(existT _ _stringappend_953_ _)) =>
                                                    returnm (tt, build_ex _stringappend_953_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_953_ _) =>
                                                let _stringappend_954_ :=
                                                  string_drop _stringappend_952_
                                                    (build_ex _stringappend_953_) in
                                                (match (reg_name_matches_prefix _stringappend_954_) with
                                                 | Some (rd,(existT _ _stringappend_955_ _)) =>
                                                    returnm (rd, build_ex _stringappend_955_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_955_ _) =>
                                                let _stringappend_956_ :=
                                                  string_drop _stringappend_954_
                                                    (build_ex _stringappend_955_) in
                                                sep_matches_prefix _stringappend_956_ >>= fun w__347 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                (match w__347 with
                                                 | Some (tt,(existT _ _stringappend_957_ _)) =>
                                                    returnm (tt, build_ex _stringappend_957_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_957_ _) =>
                                                let _stringappend_958_ :=
                                                  string_drop _stringappend_956_
                                                    (build_ex _stringappend_957_) in
                                                (match (reg_name_matches_prefix _stringappend_958_) with
                                                 | Some (rs1,(existT _ _stringappend_959_ _)) =>
                                                    returnm (rs1, build_ex _stringappend_959_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_959_ _) =>
                                                let _stringappend_960_ :=
                                                  string_drop _stringappend_958_
                                                    (build_ex _stringappend_959_) in
                                                sep_matches_prefix _stringappend_960_ >>= fun w__352 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                (match w__352 with
                                                 | Some (tt,(existT _ _stringappend_961_ _)) =>
                                                    returnm (tt, build_ex _stringappend_961_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_961_ _) =>
                                                let _stringappend_962_ :=
                                                  string_drop _stringappend_960_
                                                    (build_ex _stringappend_961_) in
                                                (match (reg_name_matches_prefix _stringappend_962_) with
                                                 | Some (rs2,(existT _ _stringappend_963_ _)) =>
                                                    returnm (rs2, build_ex _stringappend_963_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_963_ _) =>
                                                (match (string_drop _stringappend_962_
                                                          (build_ex _stringappend_963_)) with
                                                 | "" => returnm ((DIV (rs2, rs1, rd, s))  : ast )
                                                 | _ => exit tt  : M (ast)
                                                 end)
                                                 : M (ast)
                                              else
                                                and_boolM
                                                  (returnm ((string_startswith _stringappend_756_
                                                               "rem")
                                                    : bool))
                                                  (let _stringappend_965_ :=
                                                    string_drop _stringappend_756_
                                                      (build_ex (projT1 (string_length "rem"))) in
                                                  match (maybe_not_u_matches_prefix
                                                           _stringappend_965_) with
                                                  | Some (s,(existT _ _stringappend_966_ _)) =>
                                                     let _stringappend_967_ :=
                                                       string_drop _stringappend_965_
                                                         (build_ex _stringappend_966_) in
                                                     match (spc_matches_prefix _stringappend_967_) with
                                                     | Some (tt,(existT _ _stringappend_968_ _)) =>
                                                        let _stringappend_969_ :=
                                                          string_drop _stringappend_967_
                                                            (build_ex _stringappend_968_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_969_) with
                                                        | Some (rd,(existT _ _stringappend_970_ _)) =>
                                                           let _stringappend_971_ :=
                                                             string_drop _stringappend_969_
                                                               (build_ex _stringappend_970_) in
                                                           sep_matches_prefix _stringappend_971_ >>= fun w__359 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__359 with
                                                           | Some
                                                             (tt,(existT _ _stringappend_972_ _)) =>
                                                              let _stringappend_973_ :=
                                                                string_drop _stringappend_971_
                                                                  (build_ex _stringappend_972_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_973_) with
                                                              | Some
                                                                (rs1,(existT _ _stringappend_974_ _)) =>
                                                                 let _stringappend_975_ :=
                                                                   string_drop _stringappend_973_
                                                                     (build_ex _stringappend_974_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_975_ >>= fun w__360 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__360 with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_976_ _)) =>
                                                                                   let _stringappend_977_ :=
                                                                                     string_drop
                                                                                       _stringappend_975_
                                                                                       (build_ex _stringappend_976_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_977_) with
                                                                                        | Some
                                                                                          (rs2,(existT _ _stringappend_978_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_977_
                                                                                                    (build_ex _stringappend_978_)) with
                                                                                           | "" =>
                                                                                              true
                                                                                           | _ =>
                                                                                              false
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__361 : bool =>
                                                              returnm ((if (w__361) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__362 : bool =>
                                                           returnm ((if (w__362) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__363 : bool =>
                                                        returnm ((if (w__363) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__364 : bool =>
                                                     returnm ((if (w__364) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__365 : bool =>
                                                  returnm ((if (w__365) then true
                                                            else false)
                                                   : bool)) >>= fun w__366 : bool =>
                                                (if (w__366) then
                                                   let _stringappend_965_ :=
                                                     string_drop _stringappend_756_
                                                       (build_ex (projT1 (string_length "rem"))) in
                                                   (match (maybe_not_u_matches_prefix
                                                             _stringappend_965_) with
                                                    | Some (s,(existT _ _stringappend_966_ _)) =>
                                                       returnm (s, build_ex _stringappend_966_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(s, existT _ _stringappend_966_ _) =>
                                                   let _stringappend_967_ :=
                                                     string_drop _stringappend_965_
                                                       (build_ex _stringappend_966_) in
                                                   (match (spc_matches_prefix _stringappend_967_) with
                                                    | Some (tt,(existT _ _stringappend_968_ _)) =>
                                                       returnm (tt, build_ex _stringappend_968_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_968_ _) =>
                                                   let _stringappend_969_ :=
                                                     string_drop _stringappend_967_
                                                       (build_ex _stringappend_968_) in
                                                   (match (reg_name_matches_prefix
                                                             _stringappend_969_) with
                                                    | Some (rd,(existT _ _stringappend_970_ _)) =>
                                                       returnm (rd, build_ex _stringappend_970_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_970_ _) =>
                                                   let _stringappend_971_ :=
                                                     string_drop _stringappend_969_
                                                       (build_ex _stringappend_970_) in
                                                   sep_matches_prefix _stringappend_971_ >>= fun w__373 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   (match w__373 with
                                                    | Some (tt,(existT _ _stringappend_972_ _)) =>
                                                       returnm (tt, build_ex _stringappend_972_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_972_ _) =>
                                                   let _stringappend_973_ :=
                                                     string_drop _stringappend_971_
                                                       (build_ex _stringappend_972_) in
                                                   (match (reg_name_matches_prefix
                                                             _stringappend_973_) with
                                                    | Some (rs1,(existT _ _stringappend_974_ _)) =>
                                                       returnm (rs1, build_ex _stringappend_974_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_974_ _) =>
                                                   let _stringappend_975_ :=
                                                     string_drop _stringappend_973_
                                                       (build_ex _stringappend_974_) in
                                                   sep_matches_prefix _stringappend_975_ >>= fun w__378 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   (match w__378 with
                                                    | Some (tt,(existT _ _stringappend_976_ _)) =>
                                                       returnm (tt, build_ex _stringappend_976_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_976_ _) =>
                                                   let _stringappend_977_ :=
                                                     string_drop _stringappend_975_
                                                       (build_ex _stringappend_976_) in
                                                   (match (reg_name_matches_prefix
                                                             _stringappend_977_) with
                                                    | Some (rs2,(existT _ _stringappend_978_ _)) =>
                                                       returnm (rs2, build_ex _stringappend_978_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_978_ _) =>
                                                   (match (string_drop _stringappend_977_
                                                             (build_ex _stringappend_978_)) with
                                                    | "" =>
                                                       returnm ((REM (rs2, rs1, rd, s))  : ast )
                                                    | _ => exit tt  : M (ast)
                                                    end)
                                                    : M (ast)
                                                 else
                                                   and_boolM
                                                     (returnm ((string_startswith _stringappend_756_
                                                                  "mulw")
                                                       : bool))
                                                     (let _stringappend_980_ :=
                                                       string_drop _stringappend_756_
                                                         (build_ex (projT1 (string_length "mulw"))) in
                                                     match (spc_matches_prefix _stringappend_980_) with
                                                     | Some (tt,(existT _ _stringappend_981_ _)) =>
                                                        let _stringappend_982_ :=
                                                          string_drop _stringappend_980_
                                                            (build_ex _stringappend_981_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_982_) with
                                                        | Some (rd,(existT _ _stringappend_983_ _)) =>
                                                           let _stringappend_984_ :=
                                                             string_drop _stringappend_982_
                                                               (build_ex _stringappend_983_) in
                                                           sep_matches_prefix _stringappend_984_ >>= fun w__385 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__385 with
                                                           | Some
                                                             (tt,(existT _ _stringappend_985_ _)) =>
                                                              let _stringappend_986_ :=
                                                                string_drop _stringappend_984_
                                                                  (build_ex _stringappend_985_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_986_) with
                                                              | Some
                                                                (rs1,(existT _ _stringappend_987_ _)) =>
                                                                 let _stringappend_988_ :=
                                                                   string_drop _stringappend_986_
                                                                     (build_ex _stringappend_987_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_988_ >>= fun w__386 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__386 with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_989_ _)) =>
                                                                                   let _stringappend_990_ :=
                                                                                     string_drop
                                                                                       _stringappend_988_
                                                                                       (build_ex _stringappend_989_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_990_) with
                                                                                        | Some
                                                                                          (rs2,(existT _ _stringappend_991_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_990_
                                                                                                    (build_ex _stringappend_991_)) with
                                                                                           | "" =>
                                                                                              true
                                                                                           | _ =>
                                                                                              false
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__387 : bool =>
                                                              returnm ((if (w__387) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__388 : bool =>
                                                           returnm ((if (w__388) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__389 : bool =>
                                                        returnm ((if (w__389) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__390 : bool =>
                                                     returnm ((if (w__390) then true
                                                               else false)
                                                      : bool)) >>= fun w__391 : bool =>
                                                   (if (w__391) then
                                                      let _stringappend_980_ :=
                                                        string_drop _stringappend_756_
                                                          (build_ex (projT1 (string_length "mulw"))) in
                                                      (match (spc_matches_prefix _stringappend_980_) with
                                                       | Some (tt,(existT _ _stringappend_981_ _)) =>
                                                          returnm (tt, build_ex _stringappend_981_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_981_ _) =>
                                                      let _stringappend_982_ :=
                                                        string_drop _stringappend_980_
                                                          (build_ex _stringappend_981_) in
                                                      (match (reg_name_matches_prefix
                                                                _stringappend_982_) with
                                                       | Some (rd,(existT _ _stringappend_983_ _)) =>
                                                          returnm (rd, build_ex _stringappend_983_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                            0)}))
                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                        0)}))) >>= fun '(rd, existT _ _stringappend_983_ _) =>
                                                      let _stringappend_984_ :=
                                                        string_drop _stringappend_982_
                                                          (build_ex _stringappend_983_) in
                                                      sep_matches_prefix _stringappend_984_ >>= fun w__396 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      (match w__396 with
                                                       | Some (tt,(existT _ _stringappend_985_ _)) =>
                                                          returnm (tt, build_ex _stringappend_985_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_985_ _) =>
                                                      let _stringappend_986_ :=
                                                        string_drop _stringappend_984_
                                                          (build_ex _stringappend_985_) in
                                                      (match (reg_name_matches_prefix
                                                                _stringappend_986_) with
                                                       | Some (rs1,(existT _ _stringappend_987_ _)) =>
                                                          returnm (rs1, build_ex _stringappend_987_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                            0)}))
                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                        0)}))) >>= fun '(rs1, existT _ _stringappend_987_ _) =>
                                                      let _stringappend_988_ :=
                                                        string_drop _stringappend_986_
                                                          (build_ex _stringappend_987_) in
                                                      sep_matches_prefix _stringappend_988_ >>= fun w__401 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      (match w__401 with
                                                       | Some (tt,(existT _ _stringappend_989_ _)) =>
                                                          returnm (tt, build_ex _stringappend_989_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_989_ _) =>
                                                      let _stringappend_990_ :=
                                                        string_drop _stringappend_988_
                                                          (build_ex _stringappend_989_) in
                                                      (match (reg_name_matches_prefix
                                                                _stringappend_990_) with
                                                       | Some (rs2,(existT _ _stringappend_991_ _)) =>
                                                          returnm (rs2, build_ex _stringappend_991_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                            0)}))
                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                        0)}))) >>= fun '(rs2, existT _ _stringappend_991_ _) =>
                                                      (match (string_drop _stringappend_990_
                                                                (build_ex _stringappend_991_)) with
                                                       | "" =>
                                                          returnm ((MULW (rs2, rs1, rd))  : ast )
                                                       | _ => exit tt  : M (ast)
                                                       end)
                                                       : M (ast)
                                                    else
                                                      and_boolM
                                                        (returnm ((string_startswith
                                                                     _stringappend_756_ "div")
                                                          : bool))
                                                        (let _stringappend_993_ :=
                                                          string_drop _stringappend_756_
                                                            (build_ex (projT1 (string_length "div"))) in
                                                        match (maybe_not_u_matches_prefix
                                                                 _stringappend_993_) with
                                                        | Some (s,(existT _ _stringappend_994_ _)) =>
                                                           let _stringappend_995_ :=
                                                             string_drop _stringappend_993_
                                                               (build_ex _stringappend_994_) in
                                                           and_boolM
                                                             (returnm ((string_startswith
                                                                          _stringappend_995_ "w")
                                                               : bool))
                                                             (let _stringappend_996_ :=
                                                               string_drop _stringappend_995_
                                                                 (build_ex (projT1 (string_length
                                                                                      "w"))) in
                                                             match (spc_matches_prefix
                                                                      _stringappend_996_) with
                                                             | Some
                                                               (tt,(existT _ _stringappend_997_ _)) =>
                                                                let _stringappend_998_ :=
                                                                  string_drop _stringappend_996_
                                                                    (build_ex _stringappend_997_) in
                                                                match (reg_name_matches_prefix
                                                                         _stringappend_998_) with
                                                                | Some
                                                                  (rd,(existT _ _stringappend_999_ _)) =>
                                                                   let _stringappend_1000_ :=
                                                                     string_drop _stringappend_998_
                                                                       (build_ex _stringappend_999_) in
                                                                   sep_matches_prefix
                                                                     _stringappend_1000_ >>= fun w__408 : option ((unit * {n : Z & ArithFact (n >=
                                                                     0)})) =>
                                                                   match w__408 with
                                                                   | Some
                                                                     (tt,(existT _ _stringappend_1001_ _)) =>
                                                                      let _stringappend_1002_ :=
                                                                        string_drop
                                                                          _stringappend_1000_
                                                                          (build_ex _stringappend_1001_) in
                                                                      match (reg_name_matches_prefix
                                                                               _stringappend_1002_) with
                                                                      | Some
                                                                        (rs1,(existT _ _stringappend_1003_ _)) =>
                                                                         let _stringappend_1004_ :=
                                                                           string_drop
                                                                             _stringappend_1002_
                                                                             (build_ex _stringappend_1003_) in
                                                                         sep_matches_prefix
                                                                           _stringappend_1004_ >>= fun w__409 : option ((unit * {n : Z & ArithFact (n >=
                                                                           0)})) =>
                                                                         returnm ((if ((match w__409 with
                                                                                        | Some
                                                                                          (tt,(existT _ _stringappend_1005_ _)) =>
                                                                                           let _stringappend_1006_ :=
                                                                                             string_drop
                                                                                               _stringappend_1004_
                                                                                               (build_ex _stringappend_1005_) in
                                                                                           if ((match (reg_name_matches_prefix
                                                                                                         _stringappend_1006_) with
                                                                                                | Some
                                                                                                  (rs2,(existT _ _stringappend_1007_ _)) =>
                                                                                                   match (string_drop
                                                                                                            _stringappend_1006_
                                                                                                            (build_ex _stringappend_1007_)) with
                                                                                                   | "" =>
                                                                                                      true
                                                                                                   | _ =>
                                                                                                      false
                                                                                                   end
                                                                                                | None =>
                                                                                                   false
                                                                                                end))
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__410 : bool =>
                                                                      returnm ((if (w__410) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__411 : bool =>
                                                                   returnm ((if (w__411) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__412 : bool =>
                                                                returnm ((if (w__412) then true
                                                                          else false)
                                                                 : bool)
                                                             | None => returnm (false  : bool)
                                                             end >>= fun w__413 : bool =>
                                                             returnm ((if (w__413) then true
                                                                       else false)
                                                              : bool)) >>= fun w__414 : bool =>
                                                           returnm ((if (w__414) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__415 : bool =>
                                                        returnm ((if (w__415) then true
                                                                  else false)
                                                         : bool)) >>= fun w__416 : bool =>
                                                      (if (w__416) then
                                                         let _stringappend_993_ :=
                                                           string_drop _stringappend_756_
                                                             (build_ex (projT1 (string_length "div"))) in
                                                         (match (maybe_not_u_matches_prefix
                                                                   _stringappend_993_) with
                                                          | Some (s,(existT _ _stringappend_994_ _)) =>
                                                             returnm (s, build_ex _stringappend_994_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((bool * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((bool * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(s, existT _ _stringappend_994_ _) =>
                                                         let _stringappend_995_ :=
                                                           string_drop _stringappend_993_
                                                             (build_ex _stringappend_994_) in
                                                         let _stringappend_996_ :=
                                                           string_drop _stringappend_995_
                                                             (build_ex (projT1 (string_length "w"))) in
                                                         (match (spc_matches_prefix
                                                                   _stringappend_996_) with
                                                          | Some
                                                            (tt,(existT _ _stringappend_997_ _)) =>
                                                             returnm (tt, build_ex _stringappend_997_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(tt, existT _ _stringappend_997_ _) =>
                                                         let _stringappend_998_ :=
                                                           string_drop _stringappend_996_
                                                             (build_ex _stringappend_997_) in
                                                         (match (reg_name_matches_prefix
                                                                   _stringappend_998_) with
                                                          | Some
                                                            (rd,(existT _ _stringappend_999_ _)) =>
                                                             returnm (rd, build_ex _stringappend_999_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(rd, existT _ _stringappend_999_ _) =>
                                                         let _stringappend_1000_ :=
                                                           string_drop _stringappend_998_
                                                             (build_ex _stringappend_999_) in
                                                         sep_matches_prefix _stringappend_1000_ >>= fun w__423 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         (match w__423 with
                                                          | Some
                                                            (tt,(existT _ _stringappend_1001_ _)) =>
                                                             returnm (tt, build_ex _stringappend_1001_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(tt, existT _ _stringappend_1001_ _) =>
                                                         let _stringappend_1002_ :=
                                                           string_drop _stringappend_1000_
                                                             (build_ex _stringappend_1001_) in
                                                         (match (reg_name_matches_prefix
                                                                   _stringappend_1002_) with
                                                          | Some
                                                            (rs1,(existT _ _stringappend_1003_ _)) =>
                                                             returnm (rs1, build_ex _stringappend_1003_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(rs1, existT _ _stringappend_1003_ _) =>
                                                         let _stringappend_1004_ :=
                                                           string_drop _stringappend_1002_
                                                             (build_ex _stringappend_1003_) in
                                                         sep_matches_prefix _stringappend_1004_ >>= fun w__428 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         (match w__428 with
                                                          | Some
                                                            (tt,(existT _ _stringappend_1005_ _)) =>
                                                             returnm (tt, build_ex _stringappend_1005_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(tt, existT _ _stringappend_1005_ _) =>
                                                         let _stringappend_1006_ :=
                                                           string_drop _stringappend_1004_
                                                             (build_ex _stringappend_1005_) in
                                                         (match (reg_name_matches_prefix
                                                                   _stringappend_1006_) with
                                                          | Some
                                                            (rs2,(existT _ _stringappend_1007_ _)) =>
                                                             returnm (rs2, build_ex _stringappend_1007_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(rs2, existT _ _stringappend_1007_ _) =>
                                                         (match (string_drop _stringappend_1006_
                                                                   (build_ex _stringappend_1007_)) with
                                                          | "" =>
                                                             returnm ((DIVW
                                                                         (rs2, rs1, rd, s))
                                                              : ast )
                                                          | _ => exit tt  : M (ast)
                                                          end)
                                                          : M (ast)
                                                       else
                                                         and_boolM
                                                           (returnm ((string_startswith
                                                                        _stringappend_756_ "rem")
                                                             : bool))
                                                           (let _stringappend_1009_ :=
                                                             string_drop _stringappend_756_
                                                               (build_ex (projT1 (string_length
                                                                                    "rem"))) in
                                                           match (maybe_not_u_matches_prefix
                                                                    _stringappend_1009_) with
                                                           | Some
                                                             (s,(existT _ _stringappend_1010_ _)) =>
                                                              let _stringappend_1011_ :=
                                                                string_drop _stringappend_1009_
                                                                  (build_ex _stringappend_1010_) in
                                                              and_boolM
                                                                (returnm ((string_startswith
                                                                             _stringappend_1011_ "w")
                                                                  : bool))
                                                                (let _stringappend_1012_ :=
                                                                  string_drop _stringappend_1011_
                                                                    (build_ex (projT1 (string_length
                                                                                         "w"))) in
                                                                match (spc_matches_prefix
                                                                         _stringappend_1012_) with
                                                                | Some
                                                                  (tt,(existT _ _stringappend_1013_ _)) =>
                                                                   let _stringappend_1014_ :=
                                                                     string_drop _stringappend_1012_
                                                                       (build_ex _stringappend_1013_) in
                                                                   match (reg_name_matches_prefix
                                                                            _stringappend_1014_) with
                                                                   | Some
                                                                     (rd,(existT _ _stringappend_1015_ _)) =>
                                                                      let _stringappend_1016_ :=
                                                                        string_drop
                                                                          _stringappend_1014_
                                                                          (build_ex _stringappend_1015_) in
                                                                      sep_matches_prefix
                                                                        _stringappend_1016_ >>= fun w__435 : option ((unit * {n : Z & ArithFact (n >=
                                                                        0)})) =>
                                                                      match w__435 with
                                                                      | Some
                                                                        (tt,(existT _ _stringappend_1017_ _)) =>
                                                                         let _stringappend_1018_ :=
                                                                           string_drop
                                                                             _stringappend_1016_
                                                                             (build_ex _stringappend_1017_) in
                                                                         match (reg_name_matches_prefix
                                                                                  _stringappend_1018_) with
                                                                         | Some
                                                                           (rs1,(existT _ _stringappend_1019_ _)) =>
                                                                            let _stringappend_1020_ :=
                                                                              string_drop
                                                                                _stringappend_1018_
                                                                                (build_ex _stringappend_1019_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_1020_ >>= fun w__436 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            returnm ((if ((match w__436 with
                                                                                           | Some
                                                                                             (tt,(existT _ _stringappend_1021_ _)) =>
                                                                                              let _stringappend_1022_ :=
                                                                                                string_drop
                                                                                                  _stringappend_1020_
                                                                                                  (build_ex _stringappend_1021_) in
                                                                                              if ((match (reg_name_matches_prefix
                                                                                                            _stringappend_1022_) with
                                                                                                   | Some
                                                                                                     (rs2,(existT _ _stringappend_1023_ _)) =>
                                                                                                      match (string_drop
                                                                                                               _stringappend_1022_
                                                                                                               (build_ex _stringappend_1023_)) with
                                                                                                      | "" =>
                                                                                                         true
                                                                                                      | _ =>
                                                                                                         false
                                                                                                      end
                                                                                                   | None =>
                                                                                                      false
                                                                                                   end))
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false
                                                                                           | None =>
                                                                                              false
                                                                                           end))
                                                                                      then
                                                                                        true
                                                                                      else false)
                                                                             : bool)
                                                                         | None =>
                                                                            returnm (false  : bool)
                                                                         end >>= fun w__437 : bool =>
                                                                         returnm ((if (w__437) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__438 : bool =>
                                                                      returnm ((if (w__438) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__439 : bool =>
                                                                   returnm ((if (w__439) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__440 : bool =>
                                                                returnm ((if (w__440) then true
                                                                          else false)
                                                                 : bool)) >>= fun w__441 : bool =>
                                                              returnm ((if (w__441) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__442 : bool =>
                                                           returnm ((if (w__442) then true
                                                                     else false)
                                                            : bool)) >>= fun w__443 : bool =>
                                                         (if (w__443) then
                                                            let _stringappend_1009_ :=
                                                              string_drop _stringappend_756_
                                                                (build_ex (projT1 (string_length
                                                                                     "rem"))) in
                                                            (match (maybe_not_u_matches_prefix
                                                                      _stringappend_1009_) with
                                                             | Some
                                                               (s,(existT _ _stringappend_1010_ _)) =>
                                                                returnm (s, build_ex _stringappend_1010_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((bool * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((bool * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(s, existT _ _stringappend_1010_ _) =>
                                                            let _stringappend_1011_ :=
                                                              string_drop _stringappend_1009_
                                                                (build_ex _stringappend_1010_) in
                                                            let _stringappend_1012_ :=
                                                              string_drop _stringappend_1011_
                                                                (build_ex (projT1 (string_length "w"))) in
                                                            (match (spc_matches_prefix
                                                                      _stringappend_1012_) with
                                                             | Some
                                                               (tt,(existT _ _stringappend_1013_ _)) =>
                                                                returnm (tt, build_ex _stringappend_1013_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(tt, existT _ _stringappend_1013_ _) =>
                                                            let _stringappend_1014_ :=
                                                              string_drop _stringappend_1012_
                                                                (build_ex _stringappend_1013_) in
                                                            (match (reg_name_matches_prefix
                                                                      _stringappend_1014_) with
                                                             | Some
                                                               (rd,(existT _ _stringappend_1015_ _)) =>
                                                                returnm (rd, build_ex _stringappend_1015_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(rd, existT _ _stringappend_1015_ _) =>
                                                            let _stringappend_1016_ :=
                                                              string_drop _stringappend_1014_
                                                                (build_ex _stringappend_1015_) in
                                                            sep_matches_prefix _stringappend_1016_ >>= fun w__450 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            (match w__450 with
                                                             | Some
                                                               (tt,(existT _ _stringappend_1017_ _)) =>
                                                                returnm (tt, build_ex _stringappend_1017_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(tt, existT _ _stringappend_1017_ _) =>
                                                            let _stringappend_1018_ :=
                                                              string_drop _stringappend_1016_
                                                                (build_ex _stringappend_1017_) in
                                                            (match (reg_name_matches_prefix
                                                                      _stringappend_1018_) with
                                                             | Some
                                                               (rs1,(existT _ _stringappend_1019_ _)) =>
                                                                returnm (rs1, build_ex _stringappend_1019_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(rs1, existT _ _stringappend_1019_ _) =>
                                                            let _stringappend_1020_ :=
                                                              string_drop _stringappend_1018_
                                                                (build_ex _stringappend_1019_) in
                                                            sep_matches_prefix _stringappend_1020_ >>= fun w__455 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            (match w__455 with
                                                             | Some
                                                               (tt,(existT _ _stringappend_1021_ _)) =>
                                                                returnm (tt, build_ex _stringappend_1021_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(tt, existT _ _stringappend_1021_ _) =>
                                                            let _stringappend_1022_ :=
                                                              string_drop _stringappend_1020_
                                                                (build_ex _stringappend_1021_) in
                                                            (match (reg_name_matches_prefix
                                                                      _stringappend_1022_) with
                                                             | Some
                                                               (rs2,(existT _ _stringappend_1023_ _)) =>
                                                                returnm (rs2, build_ex _stringappend_1023_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(rs2, existT _ _stringappend_1023_ _) =>
                                                            (match (string_drop _stringappend_1022_
                                                                      (build_ex _stringappend_1023_)) with
                                                             | "" =>
                                                                returnm ((REMW
                                                                            (rs2, rs1, rd, s))
                                                                 : ast )
                                                             | _ => exit tt  : M (ast)
                                                             end)
                                                             : M (ast)
                                                          else
                                                            and_boolM
                                                              (returnm ((string_startswith
                                                                           _stringappend_756_
                                                                           "fence")
                                                                : bool))
                                                              (let _stringappend_1025_ :=
                                                                string_drop _stringappend_756_
                                                                  (build_ex (projT1 (string_length
                                                                                       "fence"))) in
                                                              match (spc_matches_prefix
                                                                       _stringappend_1025_) with
                                                              | Some
                                                                (tt,(existT _ _stringappend_1026_ _)) =>
                                                                 let _stringappend_1027_ :=
                                                                   string_drop _stringappend_1025_
                                                                     (build_ex _stringappend_1026_) in
                                                                 fence_bits_matches_prefix
                                                                   _stringappend_1027_ >>= fun w__462 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 match w__462 with
                                                                 | Some
                                                                   (pred,(existT _ _stringappend_1028_ _)) =>
                                                                    let _stringappend_1029_ :=
                                                                      string_drop
                                                                        _stringappend_1027_
                                                                        (build_ex _stringappend_1028_) in
                                                                    sep_matches_prefix
                                                                      _stringappend_1029_ >>= fun w__463 : option ((unit * {n : Z & ArithFact (n >=
                                                                      0)})) =>
                                                                    match w__463 with
                                                                    | Some
                                                                      (tt,(existT _ _stringappend_1030_ _)) =>
                                                                       let _stringappend_1031_ :=
                                                                         string_drop
                                                                           _stringappend_1029_
                                                                           (build_ex _stringappend_1030_) in
                                                                       fence_bits_matches_prefix
                                                                         _stringappend_1031_ >>= fun w__464 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                         0)})) =>
                                                                       returnm ((if ((match w__464 with
                                                                                      | Some
                                                                                        (succ,(existT _ _stringappend_1032_ _)) =>
                                                                                         match (string_drop
                                                                                                  _stringappend_1031_
                                                                                                  (build_ex _stringappend_1032_)) with
                                                                                         | "" =>
                                                                                            true
                                                                                         | _ =>
                                                                                            false
                                                                                         end
                                                                                      | None =>
                                                                                         false
                                                                                      end)) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)
                                                                    | None =>
                                                                       returnm (false  : bool)
                                                                    end >>= fun w__465 : bool =>
                                                                    returnm ((if (w__465) then true
                                                                              else false)
                                                                     : bool)
                                                                 | None => returnm (false  : bool)
                                                                 end >>= fun w__466 : bool =>
                                                                 returnm ((if (w__466) then true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__467 : bool =>
                                                              returnm ((if (w__467) then true
                                                                        else false)
                                                               : bool)) >>= fun w__468 : bool =>
                                                            (if (w__468) then
                                                               let _stringappend_1025_ :=
                                                                 string_drop _stringappend_756_
                                                                   (build_ex (projT1 (string_length
                                                                                        "fence"))) in
                                                               (match (spc_matches_prefix
                                                                         _stringappend_1025_) with
                                                                | Some
                                                                  (tt,(existT _ _stringappend_1026_ _)) =>
                                                                   returnm (tt, build_ex _stringappend_1026_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_1026_ _) =>
                                                               let _stringappend_1027_ :=
                                                                 string_drop _stringappend_1025_
                                                                   (build_ex _stringappend_1026_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_1027_ >>= fun w__471 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               (match w__471 with
                                                                | Some
                                                                  (pred,(existT _ _stringappend_1028_ _)) =>
                                                                   returnm (pred, build_ex _stringappend_1028_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(pred, existT _ _stringappend_1028_ _) =>
                                                               let _stringappend_1029_ :=
                                                                 string_drop _stringappend_1027_
                                                                   (build_ex _stringappend_1028_) in
                                                               sep_matches_prefix
                                                                 _stringappend_1029_ >>= fun w__474 : option ((unit * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               (match w__474 with
                                                                | Some
                                                                  (tt,(existT _ _stringappend_1030_ _)) =>
                                                                   returnm (tt, build_ex _stringappend_1030_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_1030_ _) =>
                                                               let _stringappend_1031_ :=
                                                                 string_drop _stringappend_1029_
                                                                   (build_ex _stringappend_1030_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_1031_ >>= fun w__477 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               (match w__477 with
                                                                | Some
                                                                  (succ,(existT _ _stringappend_1032_ _)) =>
                                                                   returnm (succ, build_ex _stringappend_1032_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(succ, existT _ _stringappend_1032_ _) =>
                                                               (match (string_drop
                                                                         _stringappend_1031_
                                                                         (build_ex _stringappend_1032_)) with
                                                                | "" =>
                                                                   returnm ((FENCE
                                                                               (pred, succ))
                                                                    : ast )
                                                                | _ => exit tt  : M (ast)
                                                                end)
                                                                : M (ast)
                                                             else
                                                               (match _stringappend_756_ with
                                                                | "fence.i" =>
                                                                   returnm ((FENCEI (tt))  : ast )
                                                                | "ecall" =>
                                                                   returnm ((ECALL (tt))  : ast )
                                                                | "mret" =>
                                                                   returnm ((MRET (tt))  : ast )
                                                                | "sret" =>
                                                                   returnm ((SRET (tt))  : ast )
                                                                | "ebreak" =>
                                                                   returnm ((EBREAK (tt))  : ast )
                                                                | "wfi" =>
                                                                   returnm ((WFI (tt))  : ast )
                                                                | _stringappend_756_ =>
                                                                   and_boolM
                                                                     (returnm ((string_startswith
                                                                                  _stringappend_756_
                                                                                  "sfence.vma")
                                                                       : bool))
                                                                     (let _stringappend_1034_ :=
                                                                       string_drop
                                                                         _stringappend_756_
                                                                         (build_ex (projT1 (string_length
                                                                                              "sfence.vma"))) in
                                                                     match (spc_matches_prefix
                                                                              _stringappend_1034_) with
                                                                     | Some
                                                                       (tt,(existT _ _stringappend_1035_ _)) =>
                                                                        let _stringappend_1036_ :=
                                                                          string_drop
                                                                            _stringappend_1034_
                                                                            (build_ex _stringappend_1035_) in
                                                                        match (reg_name_matches_prefix
                                                                                 _stringappend_1036_) with
                                                                        | Some
                                                                          (rs1,(existT _ _stringappend_1037_ _)) =>
                                                                           let _stringappend_1038_ :=
                                                                             string_drop
                                                                               _stringappend_1036_
                                                                               (build_ex _stringappend_1037_) in
                                                                           sep_matches_prefix
                                                                             _stringappend_1038_ >>= fun w__482 : option ((unit * {n : Z & ArithFact (n >=
                                                                             0)})) =>
                                                                           returnm ((if ((match w__482 with
                                                                                          | Some
                                                                                            (tt,(existT _ _stringappend_1039_ _)) =>
                                                                                             let _stringappend_1040_ :=
                                                                                               string_drop
                                                                                                 _stringappend_1038_
                                                                                                 (build_ex _stringappend_1039_) in
                                                                                             if ((match (reg_name_matches_prefix
                                                                                                           _stringappend_1040_) with
                                                                                                  | Some
                                                                                                    (rs2,(existT _ _stringappend_1041_ _)) =>
                                                                                                     match (string_drop
                                                                                                              _stringappend_1040_
                                                                                                              (build_ex _stringappend_1041_)) with
                                                                                                     | "" =>
                                                                                                        true
                                                                                                     | _ =>
                                                                                                        false
                                                                                                     end
                                                                                                  | None =>
                                                                                                     false
                                                                                                  end))
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false
                                                                                          | None =>
                                                                                             false
                                                                                          end)) then
                                                                                       true
                                                                                     else false)
                                                                            : bool)
                                                                        | None =>
                                                                           returnm (false  : bool)
                                                                        end >>= fun w__483 : bool =>
                                                                        returnm ((if (w__483) then
                                                                                    true
                                                                                  else false)
                                                                         : bool)
                                                                     | None =>
                                                                        returnm (false  : bool)
                                                                     end >>= fun w__484 : bool =>
                                                                     returnm ((if (w__484) then true
                                                                               else false)
                                                                      : bool)) >>= fun w__485 : bool =>
                                                                   (if (w__485) then
                                                                      let _stringappend_1034_ :=
                                                                        string_drop
                                                                          _stringappend_756_
                                                                          (build_ex (projT1 (string_length
                                                                                               "sfence.vma"))) in
                                                                      (match (spc_matches_prefix
                                                                                _stringappend_1034_) with
                                                                       | Some
                                                                         (tt,(existT _ _stringappend_1035_ _)) =>
                                                                          returnm (tt, build_ex _stringappend_1035_)
                                                                       | _ =>
                                                                          exit tt
                                                                           : M ((unit * {n : Z & ArithFact (n >=
                                                                            0)}))
                                                                       end : M ((unit * {n : Z & ArithFact (n >=
                                                                        0)}))) >>= fun '(tt, existT _ _stringappend_1035_ _) =>
                                                                      let _stringappend_1036_ :=
                                                                        string_drop
                                                                          _stringappend_1034_
                                                                          (build_ex _stringappend_1035_) in
                                                                      (match (reg_name_matches_prefix
                                                                                _stringappend_1036_) with
                                                                       | Some
                                                                         (rs1,(existT _ _stringappend_1037_ _)) =>
                                                                          returnm (rs1, build_ex _stringappend_1037_)
                                                                       | _ =>
                                                                          exit tt
                                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                            0)}))
                                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                        0)}))) >>= fun '(rs1, existT _ _stringappend_1037_ _) =>
                                                                      let _stringappend_1038_ :=
                                                                        string_drop
                                                                          _stringappend_1036_
                                                                          (build_ex _stringappend_1037_) in
                                                                      sep_matches_prefix
                                                                        _stringappend_1038_ >>= fun w__490 : option ((unit * {n : Z & ArithFact (n >=
                                                                        0)})) =>
                                                                      (match w__490 with
                                                                       | Some
                                                                         (tt,(existT _ _stringappend_1039_ _)) =>
                                                                          returnm (tt, build_ex _stringappend_1039_)
                                                                       | _ =>
                                                                          exit tt
                                                                           : M ((unit * {n : Z & ArithFact (n >=
                                                                            0)}))
                                                                       end : M ((unit * {n : Z & ArithFact (n >=
                                                                        0)}))) >>= fun '(tt, existT _ _stringappend_1039_ _) =>
                                                                      let _stringappend_1040_ :=
                                                                        string_drop
                                                                          _stringappend_1038_
                                                                          (build_ex _stringappend_1039_) in
                                                                      (match (reg_name_matches_prefix
                                                                                _stringappend_1040_) with
                                                                       | Some
                                                                         (rs2,(existT _ _stringappend_1041_ _)) =>
                                                                          returnm (rs2, build_ex _stringappend_1041_)
                                                                       | _ =>
                                                                          exit tt
                                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                            0)}))
                                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                        0)}))) >>= fun '(rs2, existT _ _stringappend_1041_ _) =>
                                                                      (match (string_drop
                                                                                _stringappend_1040_
                                                                                (build_ex _stringappend_1041_)) with
                                                                       | "" =>
                                                                          returnm ((SFENCE_VMA
                                                                                      (rs1, rs2))
                                                                           : ast )
                                                                       | _ => exit tt  : M (ast)
                                                                       end)
                                                                       : M (ast)
                                                                    else
                                                                      and_boolM
                                                                        (returnm ((string_startswith
                                                                                     _stringappend_756_
                                                                                     "lr.")
                                                                          : bool))
                                                                        (let _stringappend_1043_ :=
                                                                          string_drop
                                                                            _stringappend_756_
                                                                            (build_ex (projT1 (string_length
                                                                                                 "lr."))) in
                                                                        match (maybe_aq_matches_prefix
                                                                                 _stringappend_1043_) with
                                                                        | Some
                                                                          (aq,(existT _ _stringappend_1044_ _)) =>
                                                                           let _stringappend_1045_ :=
                                                                             string_drop
                                                                               _stringappend_1043_
                                                                               (build_ex _stringappend_1044_) in
                                                                           match (maybe_rl_matches_prefix
                                                                                    _stringappend_1045_) with
                                                                           | Some
                                                                             (rl,(existT _ _stringappend_1046_ _)) =>
                                                                              let _stringappend_1047_ :=
                                                                                string_drop
                                                                                  _stringappend_1045_
                                                                                  (build_ex _stringappend_1046_) in
                                                                              match (size_mnemonic_matches_prefix
                                                                                       _stringappend_1047_) with
                                                                              | Some
                                                                                (size,(existT _ _stringappend_1048_ _)) =>
                                                                                 let _stringappend_1049_ :=
                                                                                   string_drop
                                                                                     _stringappend_1047_
                                                                                     (build_ex _stringappend_1048_) in
                                                                                 match (spc_matches_prefix
                                                                                          _stringappend_1049_) with
                                                                                 | Some
                                                                                   (tt,(existT _ _stringappend_1050_ _)) =>
                                                                                    let _stringappend_1051_ :=
                                                                                      string_drop
                                                                                        _stringappend_1049_
                                                                                        (build_ex _stringappend_1050_) in
                                                                                    match (reg_name_matches_prefix
                                                                                             _stringappend_1051_) with
                                                                                    | Some
                                                                                      (rd,(existT _ _stringappend_1052_ _)) =>
                                                                                       let _stringappend_1053_ :=
                                                                                         string_drop
                                                                                           _stringappend_1051_
                                                                                           (build_ex _stringappend_1052_) in
                                                                                       sep_matches_prefix
                                                                                         _stringappend_1053_ >>= fun w__497 : option ((unit * {n : Z & ArithFact (n >=
                                                                                         0)})) =>
                                                                                       returnm ((if ((match w__497 with
                                                                                                      | Some
                                                                                                        (tt,(existT _ _stringappend_1054_ _)) =>
                                                                                                         let _stringappend_1055_ :=
                                                                                                           string_drop
                                                                                                             _stringappend_1053_
                                                                                                             (build_ex _stringappend_1054_) in
                                                                                                         if
                                                                                                           ((match (reg_name_matches_prefix
                                                                                                                      _stringappend_1055_) with
                                                                                                             | Some
                                                                                                               (rs1,(existT _ _stringappend_1056_ _)) =>
                                                                                                                match (string_drop
                                                                                                                         _stringappend_1055_
                                                                                                                         (build_ex _stringappend_1056_)) with
                                                                                                                | "" =>
                                                                                                                   true
                                                                                                                | _ =>
                                                                                                                   false
                                                                                                                end
                                                                                                             | None =>
                                                                                                                false
                                                                                                             end))
                                                                                                         then
                                                                                                           true
                                                                                                         else
                                                                                                           false
                                                                                                      | None =>
                                                                                                         false
                                                                                                      end))
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__498 : bool =>
                                                                                    returnm ((if (w__498)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__499 : bool =>
                                                                                 returnm ((if (w__499)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)
                                                                              | None =>
                                                                                 returnm (false
                                                                                  : bool)
                                                                              end >>= fun w__500 : bool =>
                                                                              returnm ((if (w__500)
                                                                                        then
                                                                                          true
                                                                                        else false)
                                                                               : bool)
                                                                           | None =>
                                                                              returnm (false
                                                                               : bool)
                                                                           end >>= fun w__501 : bool =>
                                                                           returnm ((if (w__501)
                                                                                     then
                                                                                       true
                                                                                     else false)
                                                                            : bool)
                                                                        | None =>
                                                                           returnm (false  : bool)
                                                                        end >>= fun w__502 : bool =>
                                                                        returnm ((if (w__502) then
                                                                                    true
                                                                                  else false)
                                                                         : bool)) >>= fun w__503 : bool =>
                                                                      (if (w__503) then
                                                                         let _stringappend_1043_ :=
                                                                           string_drop
                                                                             _stringappend_756_
                                                                             (build_ex (projT1 (string_length
                                                                                                  "lr."))) in
                                                                         (match (maybe_aq_matches_prefix
                                                                                   _stringappend_1043_) with
                                                                          | Some
                                                                            (aq,(existT _ _stringappend_1044_ _)) =>
                                                                             returnm (aq, build_ex _stringappend_1044_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((bool * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((bool * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(aq, existT _ _stringappend_1044_ _) =>
                                                                         let _stringappend_1045_ :=
                                                                           string_drop
                                                                             _stringappend_1043_
                                                                             (build_ex _stringappend_1044_) in
                                                                         (match (maybe_rl_matches_prefix
                                                                                   _stringappend_1045_) with
                                                                          | Some
                                                                            (rl,(existT _ _stringappend_1046_ _)) =>
                                                                             returnm (rl, build_ex _stringappend_1046_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((bool * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((bool * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(rl, existT _ _stringappend_1046_ _) =>
                                                                         let _stringappend_1047_ :=
                                                                           string_drop
                                                                             _stringappend_1045_
                                                                             (build_ex _stringappend_1046_) in
                                                                         (match (size_mnemonic_matches_prefix
                                                                                   _stringappend_1047_) with
                                                                          | Some
                                                                            (size,(existT _ _stringappend_1048_ _)) =>
                                                                             returnm (size, build_ex _stringappend_1048_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((word_width * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((word_width * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(size, existT _ _stringappend_1048_ _) =>
                                                                         let _stringappend_1049_ :=
                                                                           string_drop
                                                                             _stringappend_1047_
                                                                             (build_ex _stringappend_1048_) in
                                                                         (match (spc_matches_prefix
                                                                                   _stringappend_1049_) with
                                                                          | Some
                                                                            (tt,(existT _ _stringappend_1050_ _)) =>
                                                                             returnm (tt, build_ex _stringappend_1050_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(tt, existT _ _stringappend_1050_ _) =>
                                                                         let _stringappend_1051_ :=
                                                                           string_drop
                                                                             _stringappend_1049_
                                                                             (build_ex _stringappend_1050_) in
                                                                         (match (reg_name_matches_prefix
                                                                                   _stringappend_1051_) with
                                                                          | Some
                                                                            (rd,(existT _ _stringappend_1052_ _)) =>
                                                                             returnm (rd, build_ex _stringappend_1052_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(rd, existT _ _stringappend_1052_ _) =>
                                                                         let _stringappend_1053_ :=
                                                                           string_drop
                                                                             _stringappend_1051_
                                                                             (build_ex _stringappend_1052_) in
                                                                         sep_matches_prefix
                                                                           _stringappend_1053_ >>= fun w__514 : option ((unit * {n : Z & ArithFact (n >=
                                                                           0)})) =>
                                                                         (match w__514 with
                                                                          | Some
                                                                            (tt,(existT _ _stringappend_1054_ _)) =>
                                                                             returnm (tt, build_ex _stringappend_1054_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(tt, existT _ _stringappend_1054_ _) =>
                                                                         let _stringappend_1055_ :=
                                                                           string_drop
                                                                             _stringappend_1053_
                                                                             (build_ex _stringappend_1054_) in
                                                                         (match (reg_name_matches_prefix
                                                                                   _stringappend_1055_) with
                                                                          | Some
                                                                            (rs1,(existT _ _stringappend_1056_ _)) =>
                                                                             returnm (rs1, build_ex _stringappend_1056_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(rs1, existT _ _stringappend_1056_ _) =>
                                                                         (match (string_drop
                                                                                   _stringappend_1055_
                                                                                   (build_ex _stringappend_1056_)) with
                                                                          | "" =>
                                                                             returnm ((LOADRES
                                                                                         (aq, rl,
                                                                                         rs1, size,
                                                                                         rd))
                                                                              : ast )
                                                                          | _ => exit tt  : M (ast)
                                                                          end)
                                                                          : M (ast)
                                                                       else
                                                                         and_boolM
                                                                           (returnm ((string_startswith
                                                                                        _stringappend_756_
                                                                                        "sc.")
                                                                             : bool))
                                                                           (let _stringappend_1058_ :=
                                                                             string_drop
                                                                               _stringappend_756_
                                                                               (build_ex (projT1 (string_length
                                                                                                    "sc."))) in
                                                                           match (maybe_aq_matches_prefix
                                                                                    _stringappend_1058_) with
                                                                           | Some
                                                                             (aq,(existT _ _stringappend_1059_ _)) =>
                                                                              let _stringappend_1060_ :=
                                                                                string_drop
                                                                                  _stringappend_1058_
                                                                                  (build_ex _stringappend_1059_) in
                                                                              match (maybe_rl_matches_prefix
                                                                                       _stringappend_1060_) with
                                                                              | Some
                                                                                (rl,(existT _ _stringappend_1061_ _)) =>
                                                                                 let _stringappend_1062_ :=
                                                                                   string_drop
                                                                                     _stringappend_1060_
                                                                                     (build_ex _stringappend_1061_) in
                                                                                 match (size_mnemonic_matches_prefix
                                                                                          _stringappend_1062_) with
                                                                                 | Some
                                                                                   (size,(existT _ _stringappend_1063_ _)) =>
                                                                                    let _stringappend_1064_ :=
                                                                                      string_drop
                                                                                        _stringappend_1062_
                                                                                        (build_ex _stringappend_1063_) in
                                                                                    match (spc_matches_prefix
                                                                                             _stringappend_1064_) with
                                                                                    | Some
                                                                                      (tt,(existT _ _stringappend_1065_ _)) =>
                                                                                       let _stringappend_1066_ :=
                                                                                         string_drop
                                                                                           _stringappend_1064_
                                                                                           (build_ex _stringappend_1065_) in
                                                                                       match (reg_name_matches_prefix
                                                                                                _stringappend_1066_) with
                                                                                       | Some
                                                                                         (rd,(existT _ _stringappend_1067_ _)) =>
                                                                                          let _stringappend_1068_ :=
                                                                                            string_drop
                                                                                              _stringappend_1066_
                                                                                              (build_ex _stringappend_1067_) in
                                                                                          sep_matches_prefix
                                                                                            _stringappend_1068_ >>= fun w__521 : option ((unit * {n : Z & ArithFact (n >=
                                                                                            0)})) =>
                                                                                          match w__521 with
                                                                                          | Some
                                                                                            (tt,(existT _ _stringappend_1069_ _)) =>
                                                                                             let _stringappend_1070_ :=
                                                                                               string_drop
                                                                                                 _stringappend_1068_
                                                                                                 (build_ex _stringappend_1069_) in
                                                                                             match (reg_name_matches_prefix
                                                                                                      _stringappend_1070_) with
                                                                                             | Some
                                                                                               (rs1,(existT _ _stringappend_1071_ _)) =>
                                                                                                let _stringappend_1072_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_1070_
                                                                                                    (build_ex _stringappend_1071_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_1072_ >>= fun w__522 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                returnm ((if
                                                                                                            ((match w__522 with
                                                                                                              | Some
                                                                                                                (tt,(existT _ _stringappend_1073_ _)) =>
                                                                                                                 let _stringappend_1074_ :=
                                                                                                                   string_drop
                                                                                                                     _stringappend_1072_
                                                                                                                     (build_ex _stringappend_1073_) in
                                                                                                                 if
                                                                                                                   ((match (reg_name_matches_prefix
                                                                                                                              _stringappend_1074_) with
                                                                                                                     | Some
                                                                                                                       (rs2,(existT _ _stringappend_1075_ _)) =>
                                                                                                                        match (string_drop
                                                                                                                                 _stringappend_1074_
                                                                                                                                 (build_ex _stringappend_1075_)) with
                                                                                                                        | "" =>
                                                                                                                           true
                                                                                                                        | _ =>
                                                                                                                           false
                                                                                                                        end
                                                                                                                     | None =>
                                                                                                                        false
                                                                                                                     end))
                                                                                                                 then
                                                                                                                   true
                                                                                                                 else
                                                                                                                   false
                                                                                                              | None =>
                                                                                                                 false
                                                                                                              end))
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__523 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__523)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__524 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__524)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__525 : bool =>
                                                                                       returnm ((if (w__525)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__526 : bool =>
                                                                                    returnm ((if (w__526)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__527 : bool =>
                                                                                 returnm ((if (w__527)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)
                                                                              | None =>
                                                                                 returnm (false
                                                                                  : bool)
                                                                              end >>= fun w__528 : bool =>
                                                                              returnm ((if (w__528)
                                                                                        then
                                                                                          true
                                                                                        else false)
                                                                               : bool)
                                                                           | None =>
                                                                              returnm (false
                                                                               : bool)
                                                                           end >>= fun w__529 : bool =>
                                                                           returnm ((if (w__529)
                                                                                     then
                                                                                       true
                                                                                     else false)
                                                                            : bool)) >>= fun w__530 : bool =>
                                                                         (if (w__530) then
                                                                            let _stringappend_1058_ :=
                                                                              string_drop
                                                                                _stringappend_756_
                                                                                (build_ex (projT1 (string_length
                                                                                                     "sc."))) in
                                                                            (match (maybe_aq_matches_prefix
                                                                                      _stringappend_1058_) with
                                                                             | Some
                                                                               (aq,(existT _ _stringappend_1059_ _)) =>
                                                                                returnm (aq, build_ex _stringappend_1059_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((bool * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((bool * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(aq, existT _ _stringappend_1059_ _) =>
                                                                            let _stringappend_1060_ :=
                                                                              string_drop
                                                                                _stringappend_1058_
                                                                                (build_ex _stringappend_1059_) in
                                                                            (match (maybe_rl_matches_prefix
                                                                                      _stringappend_1060_) with
                                                                             | Some
                                                                               (rl,(existT _ _stringappend_1061_ _)) =>
                                                                                returnm (rl, build_ex _stringappend_1061_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((bool * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((bool * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(rl, existT _ _stringappend_1061_ _) =>
                                                                            let _stringappend_1062_ :=
                                                                              string_drop
                                                                                _stringappend_1060_
                                                                                (build_ex _stringappend_1061_) in
                                                                            (match (size_mnemonic_matches_prefix
                                                                                      _stringappend_1062_) with
                                                                             | Some
                                                                               (size,(existT _ _stringappend_1063_ _)) =>
                                                                                returnm (size, build_ex _stringappend_1063_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((word_width * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((word_width * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(size, existT _ _stringappend_1063_ _) =>
                                                                            let _stringappend_1064_ :=
                                                                              string_drop
                                                                                _stringappend_1062_
                                                                                (build_ex _stringappend_1063_) in
                                                                            (match (spc_matches_prefix
                                                                                      _stringappend_1064_) with
                                                                             | Some
                                                                               (tt,(existT _ _stringappend_1065_ _)) =>
                                                                                returnm (tt, build_ex _stringappend_1065_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(tt, existT _ _stringappend_1065_ _) =>
                                                                            let _stringappend_1066_ :=
                                                                              string_drop
                                                                                _stringappend_1064_
                                                                                (build_ex _stringappend_1065_) in
                                                                            (match (reg_name_matches_prefix
                                                                                      _stringappend_1066_) with
                                                                             | Some
                                                                               (rd,(existT _ _stringappend_1067_ _)) =>
                                                                                returnm (rd, build_ex _stringappend_1067_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(rd, existT _ _stringappend_1067_ _) =>
                                                                            let _stringappend_1068_ :=
                                                                              string_drop
                                                                                _stringappend_1066_
                                                                                (build_ex _stringappend_1067_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_1068_ >>= fun w__541 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            (match w__541 with
                                                                             | Some
                                                                               (tt,(existT _ _stringappend_1069_ _)) =>
                                                                                returnm (tt, build_ex _stringappend_1069_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(tt, existT _ _stringappend_1069_ _) =>
                                                                            let _stringappend_1070_ :=
                                                                              string_drop
                                                                                _stringappend_1068_
                                                                                (build_ex _stringappend_1069_) in
                                                                            (match (reg_name_matches_prefix
                                                                                      _stringappend_1070_) with
                                                                             | Some
                                                                               (rs1,(existT _ _stringappend_1071_ _)) =>
                                                                                returnm (rs1, build_ex _stringappend_1071_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(rs1, existT _ _stringappend_1071_ _) =>
                                                                            let _stringappend_1072_ :=
                                                                              string_drop
                                                                                _stringappend_1070_
                                                                                (build_ex _stringappend_1071_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_1072_ >>= fun w__546 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            (match w__546 with
                                                                             | Some
                                                                               (tt,(existT _ _stringappend_1073_ _)) =>
                                                                                returnm (tt, build_ex _stringappend_1073_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(tt, existT _ _stringappend_1073_ _) =>
                                                                            let _stringappend_1074_ :=
                                                                              string_drop
                                                                                _stringappend_1072_
                                                                                (build_ex _stringappend_1073_) in
                                                                            (match (reg_name_matches_prefix
                                                                                      _stringappend_1074_) with
                                                                             | Some
                                                                               (rs2,(existT _ _stringappend_1075_ _)) =>
                                                                                returnm (rs2, build_ex _stringappend_1075_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(rs2, existT _ _stringappend_1075_ _) =>
                                                                            (match (string_drop
                                                                                      _stringappend_1074_
                                                                                      (build_ex _stringappend_1075_)) with
                                                                             | "" =>
                                                                                returnm ((STORECON
                                                                                            (aq, rl,
                                                                                            rs2, rs1,
                                                                                            size, rd))
                                                                                 : ast )
                                                                             | _ =>
                                                                                exit tt  : M (ast)
                                                                             end)
                                                                             : M (ast)
                                                                          else
                                                                            match (amo_mnemonic_matches_prefix
                                                                                     _stringappend_756_) with
                                                                            | Some
                                                                              (op,(existT _ _stringappend_1077_ _)) =>
                                                                               let _stringappend_1078_ :=
                                                                                 string_drop
                                                                                   _stringappend_756_
                                                                                   (build_ex _stringappend_1077_) in
                                                                               and_boolM
                                                                                 (returnm ((string_startswith
                                                                                              _stringappend_1078_
                                                                                              ".")
                                                                                   : bool))
                                                                                 (let _stringappend_1079_ :=
                                                                                   string_drop
                                                                                     _stringappend_1078_
                                                                                     (build_ex (projT1 (string_length
                                                                                                          "."))) in
                                                                                 match (size_mnemonic_matches_prefix
                                                                                          _stringappend_1079_) with
                                                                                 | Some
                                                                                   (width,(existT _ _stringappend_1080_ _)) =>
                                                                                    let _stringappend_1081_ :=
                                                                                      string_drop
                                                                                        _stringappend_1079_
                                                                                        (build_ex _stringappend_1080_) in
                                                                                    match (maybe_aq_matches_prefix
                                                                                             _stringappend_1081_) with
                                                                                    | Some
                                                                                      (aq,(existT _ _stringappend_1082_ _)) =>
                                                                                       let _stringappend_1083_ :=
                                                                                         string_drop
                                                                                           _stringappend_1081_
                                                                                           (build_ex _stringappend_1082_) in
                                                                                       match (maybe_rl_matches_prefix
                                                                                                _stringappend_1083_) with
                                                                                       | Some
                                                                                         (rl,(existT _ _stringappend_1084_ _)) =>
                                                                                          let _stringappend_1085_ :=
                                                                                            string_drop
                                                                                              _stringappend_1083_
                                                                                              (build_ex _stringappend_1084_) in
                                                                                          match (spc_matches_prefix
                                                                                                   _stringappend_1085_) with
                                                                                          | Some
                                                                                            (tt,(existT _ _stringappend_1086_ _)) =>
                                                                                             let _stringappend_1087_ :=
                                                                                               string_drop
                                                                                                 _stringappend_1085_
                                                                                                 (build_ex _stringappend_1086_) in
                                                                                             match (reg_name_matches_prefix
                                                                                                      _stringappend_1087_) with
                                                                                             | Some
                                                                                               (rd,(existT _ _stringappend_1088_ _)) =>
                                                                                                let _stringappend_1089_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_1087_
                                                                                                    (build_ex _stringappend_1088_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_1089_ >>= fun w__553 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                match w__553 with
                                                                                                | Some
                                                                                                  (tt,(existT _ _stringappend_1090_ _)) =>
                                                                                                   let _stringappend_1091_ :=
                                                                                                     string_drop
                                                                                                       _stringappend_1089_
                                                                                                       (build_ex _stringappend_1090_) in
                                                                                                   match (reg_name_matches_prefix
                                                                                                            _stringappend_1091_) with
                                                                                                   | Some
                                                                                                     (rs1,(existT _ _stringappend_1092_ _)) =>
                                                                                                      let _stringappend_1093_ :=
                                                                                                        string_drop
                                                                                                          _stringappend_1091_
                                                                                                          (build_ex _stringappend_1092_) in
                                                                                                      sep_matches_prefix
                                                                                                        _stringappend_1093_ >>= fun w__554 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                        0)})) =>
                                                                                                      returnm ((if
                                                                                                                  ((match w__554 with
                                                                                                                    | Some
                                                                                                                      (tt,(existT _ _stringappend_1094_ _)) =>
                                                                                                                       let _stringappend_1095_ :=
                                                                                                                         string_drop
                                                                                                                           _stringappend_1093_
                                                                                                                           (build_ex _stringappend_1094_) in
                                                                                                                       if
                                                                                                                         ((match (reg_name_matches_prefix
                                                                                                                                    _stringappend_1095_) with
                                                                                                                           | Some
                                                                                                                             (rs2,(existT _ _stringappend_1096_ _)) =>
                                                                                                                              match (string_drop
                                                                                                                                       _stringappend_1095_
                                                                                                                                       (build_ex _stringappend_1096_)) with
                                                                                                                              | "" =>
                                                                                                                                 true
                                                                                                                              | _ =>
                                                                                                                                 false
                                                                                                                              end
                                                                                                                           | None =>
                                                                                                                              false
                                                                                                                           end))
                                                                                                                       then
                                                                                                                         true
                                                                                                                       else
                                                                                                                         false
                                                                                                                    | None =>
                                                                                                                       false
                                                                                                                    end))
                                                                                                                then
                                                                                                                  true
                                                                                                                else
                                                                                                                  false)
                                                                                                       : bool)
                                                                                                   | None =>
                                                                                                      returnm (false
                                                                                                       : bool)
                                                                                                   end >>= fun w__555 : bool =>
                                                                                                   returnm ((if
                                                                                                               (w__555)
                                                                                                             then
                                                                                                               true
                                                                                                             else
                                                                                                               false)
                                                                                                    : bool)
                                                                                                | None =>
                                                                                                   returnm (false
                                                                                                    : bool)
                                                                                                end >>= fun w__556 : bool =>
                                                                                                returnm ((if
                                                                                                            (w__556)
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__557 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__557)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__558 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__558)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__559 : bool =>
                                                                                       returnm ((if (w__559)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__560 : bool =>
                                                                                    returnm ((if (w__560)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__561 : bool =>
                                                                                 returnm ((if (w__561)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)) >>= fun w__562 : bool =>
                                                                               returnm ((if (w__562)
                                                                                         then
                                                                                           true
                                                                                         else false)
                                                                                : bool)
                                                                            | None =>
                                                                               returnm (false
                                                                                : bool)
                                                                            end >>= fun w__563 : bool =>
                                                                            (if (w__563) then
                                                                               (match (amo_mnemonic_matches_prefix
                                                                                         _stringappend_756_) with
                                                                                | Some
                                                                                  (op,(existT _ _stringappend_1077_ _)) =>
                                                                                   returnm (op, build_ex _stringappend_1077_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((amoop * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((amoop * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(op, existT _ _stringappend_1077_ _) =>
                                                                               let _stringappend_1078_ :=
                                                                                 string_drop
                                                                                   _stringappend_756_
                                                                                   (build_ex _stringappend_1077_) in
                                                                               let _stringappend_1079_ :=
                                                                                 string_drop
                                                                                   _stringappend_1078_
                                                                                   (build_ex (projT1 (string_length
                                                                                                        "."))) in
                                                                               (match (size_mnemonic_matches_prefix
                                                                                         _stringappend_1079_) with
                                                                                | Some
                                                                                  (width,(existT _ _stringappend_1080_ _)) =>
                                                                                   returnm (width, build_ex _stringappend_1080_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((word_width * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((word_width * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(width, existT _ _stringappend_1080_ _) =>
                                                                               let _stringappend_1081_ :=
                                                                                 string_drop
                                                                                   _stringappend_1079_
                                                                                   (build_ex _stringappend_1080_) in
                                                                               (match (maybe_aq_matches_prefix
                                                                                         _stringappend_1081_) with
                                                                                | Some
                                                                                  (aq,(existT _ _stringappend_1082_ _)) =>
                                                                                   returnm (aq, build_ex _stringappend_1082_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((bool * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((bool * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(aq, existT _ _stringappend_1082_ _) =>
                                                                               let _stringappend_1083_ :=
                                                                                 string_drop
                                                                                   _stringappend_1081_
                                                                                   (build_ex _stringappend_1082_) in
                                                                               (match (maybe_rl_matches_prefix
                                                                                         _stringappend_1083_) with
                                                                                | Some
                                                                                  (rl,(existT _ _stringappend_1084_ _)) =>
                                                                                   returnm (rl, build_ex _stringappend_1084_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((bool * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((bool * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(rl, existT _ _stringappend_1084_ _) =>
                                                                               let _stringappend_1085_ :=
                                                                                 string_drop
                                                                                   _stringappend_1083_
                                                                                   (build_ex _stringappend_1084_) in
                                                                               (match (spc_matches_prefix
                                                                                         _stringappend_1085_) with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_1086_ _)) =>
                                                                                   returnm (tt, build_ex _stringappend_1086_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_1086_ _) =>
                                                                               let _stringappend_1087_ :=
                                                                                 string_drop
                                                                                   _stringappend_1085_
                                                                                   (build_ex _stringappend_1086_) in
                                                                               (match (reg_name_matches_prefix
                                                                                         _stringappend_1087_) with
                                                                                | Some
                                                                                  (rd,(existT _ _stringappend_1088_ _)) =>
                                                                                   returnm (rd, build_ex _stringappend_1088_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(rd, existT _ _stringappend_1088_ _) =>
                                                                               let _stringappend_1089_ :=
                                                                                 string_drop
                                                                                   _stringappend_1087_
                                                                                   (build_ex _stringappend_1088_) in
                                                                               sep_matches_prefix
                                                                                 _stringappend_1089_ >>= fun w__576 : option ((unit * {n : Z & ArithFact (n >=
                                                                                 0)})) =>
                                                                               (match w__576 with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_1090_ _)) =>
                                                                                   returnm (tt, build_ex _stringappend_1090_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_1090_ _) =>
                                                                               let _stringappend_1091_ :=
                                                                                 string_drop
                                                                                   _stringappend_1089_
                                                                                   (build_ex _stringappend_1090_) in
                                                                               (match (reg_name_matches_prefix
                                                                                         _stringappend_1091_) with
                                                                                | Some
                                                                                  (rs1,(existT _ _stringappend_1092_ _)) =>
                                                                                   returnm (rs1, build_ex _stringappend_1092_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(rs1, existT _ _stringappend_1092_ _) =>
                                                                               let _stringappend_1093_ :=
                                                                                 string_drop
                                                                                   _stringappend_1091_
                                                                                   (build_ex _stringappend_1092_) in
                                                                               sep_matches_prefix
                                                                                 _stringappend_1093_ >>= fun w__581 : option ((unit * {n : Z & ArithFact (n >=
                                                                                 0)})) =>
                                                                               (match w__581 with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_1094_ _)) =>
                                                                                   returnm (tt, build_ex _stringappend_1094_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_1094_ _) =>
                                                                               let _stringappend_1095_ :=
                                                                                 string_drop
                                                                                   _stringappend_1093_
                                                                                   (build_ex _stringappend_1094_) in
                                                                               (match (reg_name_matches_prefix
                                                                                         _stringappend_1095_) with
                                                                                | Some
                                                                                  (rs2,(existT _ _stringappend_1096_ _)) =>
                                                                                   returnm (rs2, build_ex _stringappend_1096_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(rs2, existT _ _stringappend_1096_ _) =>
                                                                               (match (string_drop
                                                                                         _stringappend_1095_
                                                                                         (build_ex _stringappend_1096_)) with
                                                                                | "" =>
                                                                                   returnm ((AMO
                                                                                               (op,
                                                                                               aq,
                                                                                               rl,
                                                                                               rs2,
                                                                                               rs1,
                                                                                               width,
                                                                                               rd))
                                                                                    : ast )
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M (ast)
                                                                                end)
                                                                                : M (ast)
                                                                             else
                                                                               match (csr_mnemonic_matches_prefix
                                                                                        _stringappend_756_) with
                                                                               | Some
                                                                                 (op,(existT _ _stringappend_1098_ _)) =>
                                                                                  let _stringappend_1099_ :=
                                                                                    string_drop
                                                                                      _stringappend_756_
                                                                                      (build_ex _stringappend_1098_) in
                                                                                  and_boolM
                                                                                    (returnm ((string_startswith
                                                                                                 _stringappend_1099_
                                                                                                 "i")
                                                                                      : bool))
                                                                                    (let _stringappend_1100_ :=
                                                                                      string_drop
                                                                                        _stringappend_1099_
                                                                                        (build_ex (projT1 (string_length
                                                                                                             "i"))) in
                                                                                    match (spc_matches_prefix
                                                                                             _stringappend_1100_) with
                                                                                    | Some
                                                                                      (tt,(existT _ _stringappend_1101_ _)) =>
                                                                                       let _stringappend_1102_ :=
                                                                                         string_drop
                                                                                           _stringappend_1100_
                                                                                           (build_ex _stringappend_1101_) in
                                                                                       match (reg_name_matches_prefix
                                                                                                _stringappend_1102_) with
                                                                                       | Some
                                                                                         (rd,(existT _ _stringappend_1103_ _)) =>
                                                                                          let _stringappend_1104_ :=
                                                                                            string_drop
                                                                                              _stringappend_1102_
                                                                                              (build_ex _stringappend_1103_) in
                                                                                          sep_matches_prefix
                                                                                            _stringappend_1104_ >>= fun w__588 : option ((unit * {n : Z & ArithFact (n >=
                                                                                            0)})) =>
                                                                                          match w__588 with
                                                                                          | Some
                                                                                            (tt,(existT _ _stringappend_1105_ _)) =>
                                                                                             let _stringappend_1106_ :=
                                                                                               string_drop
                                                                                                 _stringappend_1104_
                                                                                                 (build_ex _stringappend_1105_) in
                                                                                             match (hex_bits_5_matches_prefix
                                                                                                      _stringappend_1106_) with
                                                                                             | Some
                                                                                               (rs1,(existT _ _stringappend_1107_ _)) =>
                                                                                                let _stringappend_1108_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_1106_
                                                                                                    (build_ex _stringappend_1107_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_1108_ >>= fun w__589 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                returnm ((if
                                                                                                            ((match w__589 with
                                                                                                              | Some
                                                                                                                (tt,(existT _ _stringappend_1109_ _)) =>
                                                                                                                 let _stringappend_1110_ :=
                                                                                                                   string_drop
                                                                                                                     _stringappend_1108_
                                                                                                                     (build_ex _stringappend_1109_) in
                                                                                                                 if
                                                                                                                   ((match (csr_name_map_matches_prefix
                                                                                                                              _stringappend_1110_) with
                                                                                                                     | Some
                                                                                                                       (csr,(existT _ _stringappend_1111_ _)) =>
                                                                                                                        match (string_drop
                                                                                                                                 _stringappend_1110_
                                                                                                                                 (build_ex _stringappend_1111_)) with
                                                                                                                        | "" =>
                                                                                                                           true
                                                                                                                        | _ =>
                                                                                                                           false
                                                                                                                        end
                                                                                                                     | None =>
                                                                                                                        false
                                                                                                                     end))
                                                                                                                 then
                                                                                                                   true
                                                                                                                 else
                                                                                                                   false
                                                                                                              | None =>
                                                                                                                 false
                                                                                                              end))
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__590 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__590)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__591 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__591)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__592 : bool =>
                                                                                       returnm ((if (w__592)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__593 : bool =>
                                                                                    returnm ((if (w__593)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)) >>= fun w__594 : bool =>
                                                                                  returnm ((if (w__594)
                                                                                            then
                                                                                              true
                                                                                            else
                                                                                              false)
                                                                                   : bool)
                                                                               | None =>
                                                                                  returnm (false
                                                                                   : bool)
                                                                               end >>= fun w__595 : bool =>
                                                                               (if (w__595) then
                                                                                  (match (csr_mnemonic_matches_prefix
                                                                                            _stringappend_756_) with
                                                                                   | Some
                                                                                     (op,(existT _ _stringappend_1098_ _)) =>
                                                                                      returnm (op, build_ex _stringappend_1098_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((csrop * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((csrop * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(op, existT _ _stringappend_1098_ _) =>
                                                                                  let _stringappend_1099_ :=
                                                                                    string_drop
                                                                                      _stringappend_756_
                                                                                      (build_ex _stringappend_1098_) in
                                                                                  let _stringappend_1100_ :=
                                                                                    string_drop
                                                                                      _stringappend_1099_
                                                                                      (build_ex (projT1 (string_length
                                                                                                           "i"))) in
                                                                                  (match (spc_matches_prefix
                                                                                            _stringappend_1100_) with
                                                                                   | Some
                                                                                     (tt,(existT _ _stringappend_1101_ _)) =>
                                                                                      returnm (tt, build_ex _stringappend_1101_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((unit * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(tt, existT _ _stringappend_1101_ _) =>
                                                                                  let _stringappend_1102_ :=
                                                                                    string_drop
                                                                                      _stringappend_1100_
                                                                                      (build_ex _stringappend_1101_) in
                                                                                  (match (reg_name_matches_prefix
                                                                                            _stringappend_1102_) with
                                                                                   | Some
                                                                                     (rd,(existT _ _stringappend_1103_ _)) =>
                                                                                      returnm (rd, build_ex _stringappend_1103_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(rd, existT _ _stringappend_1103_ _) =>
                                                                                  let _stringappend_1104_ :=
                                                                                    string_drop
                                                                                      _stringappend_1102_
                                                                                      (build_ex _stringappend_1103_) in
                                                                                  sep_matches_prefix
                                                                                    _stringappend_1104_ >>= fun w__602 : option ((unit * {n : Z & ArithFact (n >=
                                                                                    0)})) =>
                                                                                  (match w__602 with
                                                                                   | Some
                                                                                     (tt,(existT _ _stringappend_1105_ _)) =>
                                                                                      returnm (tt, build_ex _stringappend_1105_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((unit * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(tt, existT _ _stringappend_1105_ _) =>
                                                                                  let _stringappend_1106_ :=
                                                                                    string_drop
                                                                                      _stringappend_1104_
                                                                                      (build_ex _stringappend_1105_) in
                                                                                  (match (hex_bits_5_matches_prefix
                                                                                            _stringappend_1106_) with
                                                                                   | Some
                                                                                     (rs1,(existT _ _stringappend_1107_ _)) =>
                                                                                      returnm (rs1, build_ex _stringappend_1107_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(rs1, existT _ _stringappend_1107_ _) =>
                                                                                  let _stringappend_1108_ :=
                                                                                    string_drop
                                                                                      _stringappend_1106_
                                                                                      (build_ex _stringappend_1107_) in
                                                                                  sep_matches_prefix
                                                                                    _stringappend_1108_ >>= fun w__607 : option ((unit * {n : Z & ArithFact (n >=
                                                                                    0)})) =>
                                                                                  (match w__607 with
                                                                                   | Some
                                                                                     (tt,(existT _ _stringappend_1109_ _)) =>
                                                                                      returnm (tt, build_ex _stringappend_1109_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((unit * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(tt, existT _ _stringappend_1109_ _) =>
                                                                                  let _stringappend_1110_ :=
                                                                                    string_drop
                                                                                      _stringappend_1108_
                                                                                      (build_ex _stringappend_1109_) in
                                                                                  (match (csr_name_map_matches_prefix
                                                                                            _stringappend_1110_) with
                                                                                   | Some
                                                                                     (csr,(existT _ _stringappend_1111_ _)) =>
                                                                                      returnm (csr, build_ex _stringappend_1111_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(csr, existT _ _stringappend_1111_ _) =>
                                                                                  (match (string_drop
                                                                                            _stringappend_1110_
                                                                                            (build_ex _stringappend_1111_)) with
                                                                                   | "" =>
                                                                                      returnm ((CSR
                                                                                                  (csr,
                                                                                                  rs1,
                                                                                                  rd,
                                                                                                  true,
                                                                                                  op))
                                                                                       : ast )
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M (ast)
                                                                                   end)
                                                                                   : M (ast)
                                                                                else
                                                                                  match (csr_mnemonic_matches_prefix
                                                                                           _stringappend_756_) with
                                                                                  | Some
                                                                                    (op,(existT _ _stringappend_1113_ _)) =>
                                                                                     let _stringappend_1114_ :=
                                                                                       string_drop
                                                                                         _stringappend_756_
                                                                                         (build_ex _stringappend_1113_) in
                                                                                     match (spc_matches_prefix
                                                                                              _stringappend_1114_) with
                                                                                     | Some
                                                                                       (tt,(existT _ _stringappend_1115_ _)) =>
                                                                                        let _stringappend_1116_ :=
                                                                                          string_drop
                                                                                            _stringappend_1114_
                                                                                            (build_ex _stringappend_1115_) in
                                                                                        match (reg_name_matches_prefix
                                                                                                 _stringappend_1116_) with
                                                                                        | Some
                                                                                          (rd,(existT _ _stringappend_1117_ _)) =>
                                                                                           let _stringappend_1118_ :=
                                                                                             string_drop
                                                                                               _stringappend_1116_
                                                                                               (build_ex _stringappend_1117_) in
                                                                                           sep_matches_prefix
                                                                                             _stringappend_1118_ >>= fun w__614 : option ((unit * {n : Z & ArithFact (n >=
                                                                                             0)})) =>
                                                                                           match w__614 with
                                                                                           | Some
                                                                                             (tt,(existT _ _stringappend_1119_ _)) =>
                                                                                              let _stringappend_1120_ :=
                                                                                                string_drop
                                                                                                  _stringappend_1118_
                                                                                                  (build_ex _stringappend_1119_) in
                                                                                              match (reg_name_matches_prefix
                                                                                                       _stringappend_1120_) with
                                                                                              | Some
                                                                                                (rs1,(existT _ _stringappend_1121_ _)) =>
                                                                                                 let _stringappend_1122_ :=
                                                                                                   string_drop
                                                                                                     _stringappend_1120_
                                                                                                     (build_ex _stringappend_1121_) in
                                                                                                 sep_matches_prefix
                                                                                                   _stringappend_1122_ >>= fun w__615 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                   0)})) =>
                                                                                                 returnm ((if
                                                                                                             ((match w__615 with
                                                                                                               | Some
                                                                                                                 (tt,(existT _ _stringappend_1123_ _)) =>
                                                                                                                  let _stringappend_1124_ :=
                                                                                                                    string_drop
                                                                                                                      _stringappend_1122_
                                                                                                                      (build_ex _stringappend_1123_) in
                                                                                                                  if
                                                                                                                    ((match (csr_name_map_matches_prefix
                                                                                                                               _stringappend_1124_) with
                                                                                                                      | Some
                                                                                                                        (csr,(existT _ _stringappend_1125_ _)) =>
                                                                                                                         match (string_drop
                                                                                                                                  _stringappend_1124_
                                                                                                                                  (build_ex _stringappend_1125_)) with
                                                                                                                         | "" =>
                                                                                                                            true
                                                                                                                         | _ =>
                                                                                                                            false
                                                                                                                         end
                                                                                                                      | None =>
                                                                                                                         false
                                                                                                                      end))
                                                                                                                  then
                                                                                                                    true
                                                                                                                  else
                                                                                                                    false
                                                                                                               | None =>
                                                                                                                  false
                                                                                                               end))
                                                                                                           then
                                                                                                             true
                                                                                                           else
                                                                                                             false)
                                                                                                  : bool)
                                                                                              | None =>
                                                                                                 returnm (false
                                                                                                  : bool)
                                                                                              end >>= fun w__616 : bool =>
                                                                                              returnm ((if
                                                                                                          (w__616)
                                                                                                        then
                                                                                                          true
                                                                                                        else
                                                                                                          false)
                                                                                               : bool)
                                                                                           | None =>
                                                                                              returnm (false
                                                                                               : bool)
                                                                                           end >>= fun w__617 : bool =>
                                                                                           returnm ((if
                                                                                                       (w__617)
                                                                                                     then
                                                                                                       true
                                                                                                     else
                                                                                                       false)
                                                                                            : bool)
                                                                                        | None =>
                                                                                           returnm (false
                                                                                            : bool)
                                                                                        end >>= fun w__618 : bool =>
                                                                                        returnm ((if
                                                                                                    (w__618)
                                                                                                  then
                                                                                                    true
                                                                                                  else
                                                                                                    false)
                                                                                         : bool)
                                                                                     | None =>
                                                                                        returnm (false
                                                                                         : bool)
                                                                                     end >>= fun w__619 : bool =>
                                                                                     returnm ((if (w__619)
                                                                                               then
                                                                                                 true
                                                                                               else
                                                                                                 false)
                                                                                      : bool)
                                                                                  | None =>
                                                                                     returnm (false
                                                                                      : bool)
                                                                                  end >>= fun w__620 : bool =>
                                                                                  (if (w__620) then
                                                                                     (match (csr_mnemonic_matches_prefix
                                                                                               _stringappend_756_) with
                                                                                      | Some
                                                                                        (op,(existT _ _stringappend_1113_ _)) =>
                                                                                         returnm (op, build_ex _stringappend_1113_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((csrop * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((csrop * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(op, existT _ _stringappend_1113_ _) =>
                                                                                     let _stringappend_1114_ :=
                                                                                       string_drop
                                                                                         _stringappend_756_
                                                                                         (build_ex _stringappend_1113_) in
                                                                                     (match (spc_matches_prefix
                                                                                               _stringappend_1114_) with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_1115_ _)) =>
                                                                                         returnm (tt, build_ex _stringappend_1115_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(tt, existT _ _stringappend_1115_ _) =>
                                                                                     let _stringappend_1116_ :=
                                                                                       string_drop
                                                                                         _stringappend_1114_
                                                                                         (build_ex _stringappend_1115_) in
                                                                                     (match (reg_name_matches_prefix
                                                                                               _stringappend_1116_) with
                                                                                      | Some
                                                                                        (rd,(existT _ _stringappend_1117_ _)) =>
                                                                                         returnm (rd, build_ex _stringappend_1117_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(rd, existT _ _stringappend_1117_ _) =>
                                                                                     let _stringappend_1118_ :=
                                                                                       string_drop
                                                                                         _stringappend_1116_
                                                                                         (build_ex _stringappend_1117_) in
                                                                                     sep_matches_prefix
                                                                                       _stringappend_1118_ >>= fun w__627 : option ((unit * {n : Z & ArithFact (n >=
                                                                                       0)})) =>
                                                                                     (match w__627 with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_1119_ _)) =>
                                                                                         returnm (tt, build_ex _stringappend_1119_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(tt, existT _ _stringappend_1119_ _) =>
                                                                                     let _stringappend_1120_ :=
                                                                                       string_drop
                                                                                         _stringappend_1118_
                                                                                         (build_ex _stringappend_1119_) in
                                                                                     (match (reg_name_matches_prefix
                                                                                               _stringappend_1120_) with
                                                                                      | Some
                                                                                        (rs1,(existT _ _stringappend_1121_ _)) =>
                                                                                         returnm (rs1, build_ex _stringappend_1121_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(rs1, existT _ _stringappend_1121_ _) =>
                                                                                     let _stringappend_1122_ :=
                                                                                       string_drop
                                                                                         _stringappend_1120_
                                                                                         (build_ex _stringappend_1121_) in
                                                                                     sep_matches_prefix
                                                                                       _stringappend_1122_ >>= fun w__632 : option ((unit * {n : Z & ArithFact (n >=
                                                                                       0)})) =>
                                                                                     (match w__632 with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_1123_ _)) =>
                                                                                         returnm (tt, build_ex _stringappend_1123_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(tt, existT _ _stringappend_1123_ _) =>
                                                                                     let _stringappend_1124_ :=
                                                                                       string_drop
                                                                                         _stringappend_1122_
                                                                                         (build_ex _stringappend_1123_) in
                                                                                     (match (csr_name_map_matches_prefix
                                                                                               _stringappend_1124_) with
                                                                                      | Some
                                                                                        (csr,(existT _ _stringappend_1125_ _)) =>
                                                                                         returnm (csr, build_ex _stringappend_1125_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(csr, existT _ _stringappend_1125_ _) =>
                                                                                     (match (string_drop
                                                                                               _stringappend_1124_
                                                                                               (build_ex _stringappend_1125_)) with
                                                                                      | "" =>
                                                                                         returnm ((CSR
                                                                                                     (csr,
                                                                                                     rs1,
                                                                                                     rd,
                                                                                                     false,
                                                                                                     op))
                                                                                          : ast )
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M (ast)
                                                                                      end)
                                                                                      : M (ast)
                                                                                   else
                                                                                     let _stringappend_1127_ :=
                                                                                       string_drop
                                                                                         _stringappend_756_
                                                                                         (build_ex (projT1 (string_length
                                                                                                              "illegal"))) in
                                                                                     (match (spc_matches_prefix
                                                                                               _stringappend_1127_) with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_1128_ _)) =>
                                                                                         returnm (tt, build_ex _stringappend_1128_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(tt, existT _ _stringappend_1128_ _) =>
                                                                                     let _stringappend_1129_ :=
                                                                                       string_drop
                                                                                         _stringappend_1127_
                                                                                         (build_ex _stringappend_1128_) in
                                                                                     (match (hex_bits_32_matches_prefix
                                                                                               _stringappend_1129_) with
                                                                                      | Some
                                                                                        (s,(existT _ _stringappend_1130_ _)) =>
                                                                                         returnm (s, build_ex _stringappend_1130_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((mword 32 * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((mword 32 * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(s, existT _ _stringappend_1130_ _) =>
                                                                                     (match (string_drop
                                                                                               _stringappend_1129_
                                                                                               (build_ex _stringappend_1130_)) with
                                                                                      | "" =>
                                                                                         returnm ((ILLEGAL
                                                                                                     (s))
                                                                                          : ast )
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M (ast)
                                                                                      end)
                                                                                      : M (ast))
                                                                                   : M (ast))
                                                                                : M (ast))
                                                                             : M (ast))
                                                                          : M (ast))
                                                                       : M (ast))
                                                                    : M (ast)
                                                                end)
                                                                : M (ast))
                                                             : M (ast))
                                                          : M (ast))
                                                       : M (ast))
                                                    : M (ast))
                                                 : M (ast))
                                              : M (ast))
                                           : M (ast))
                                        : M (ast))
                                     : M (ast))
                                  : M (ast))
                               : M (ast))
                            : M (ast))
                         : M (ast))
                      : M (ast))
                   : M (ast))
                : M (ast))
             : M (ast))
          : M (ast))
       : M (ast))
    : M (ast).

Definition assembly_forwards_matches (arg_ : ast) 
: bool :=
   match arg_ with
   | UTYPE (imm,rd,op) => true
   | RISCV_JAL (imm,rd) => true
   | RISCV_JALR (imm,rs1,rd) => true
   | BTYPE (imm,rs2,rs1,op) => true
   | ITYPE (imm,rs1,rd,op) => true
   | SHIFTIOP (shamt,rs1,rd,op) => true
   | RTYPE (rs2,rs1,rd,op) => true
   | LOAD (imm,rs1,rd,is_unsigned,size,aq,rl) => true
   | STORE (imm,rs1,rd,size,aq,rl) => true
   | ADDIW (imm,rs1,rd) => true
   | SHIFTW (shamt,rs1,rd,op) => true
   | RTYPEW (rs2,rs1,rd,op) => true
   | SHIFTIWOP (shamt,rs1,rd,op) => true
   | MUL (rs2,rs1,rd,high,signed1,signed2) => true
   | DIV (rs2,rs1,rd,s) => true
   | REM (rs2,rs1,rd,s) => true
   | MULW (rs2,rs1,rd) => true
   | DIVW (rs2,rs1,rd,s) => true
   | REMW (rs2,rs1,rd,s) => true
   | FENCE (pred,succ) => true
   | FENCEI (tt) => true
   | ECALL (tt) => true
   | MRET (tt) => true
   | SRET (tt) => true
   | EBREAK (tt) => true
   | WFI (tt) => true
   | SFENCE_VMA (rs1,rs2) => true
   | LOADRES (aq,rl,rs1,size,rd) => true
   | STORECON (aq,rl,rs2,rs1,size,rd) => true
   | AMO (op,aq,rl,rs2,rs1,width,rd) => true
   | CSR (csr,rs1,rd,true,op) => true
   | CSR (csr,rs1,rd,false,op) => true
   | ILLEGAL (s) => true
   | _ => false
   end.

Definition assembly_backwards_matches (arg_ : string) 
: M (bool) :=
   let _stringappend_381_ := arg_ in
   match (utype_mnemonic_matches_prefix _stringappend_381_) with
   | Some (op,(existT _ _stringappend_382_ _)) =>
      let _stringappend_383_ := string_drop _stringappend_381_ (build_ex _stringappend_382_) in
      match (spc_matches_prefix _stringappend_383_) with
      | Some (tt,(existT _ _stringappend_384_ _)) =>
         let _stringappend_385_ := string_drop _stringappend_383_ (build_ex _stringappend_384_) in
         match (reg_name_matches_prefix _stringappend_385_) with
         | Some (rd,(existT _ _stringappend_386_ _)) =>
            let _stringappend_387_ := string_drop _stringappend_385_ (build_ex _stringappend_386_) in
            sep_matches_prefix _stringappend_387_ >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            returnm ((if ((match w__0 with
                           | Some (tt,(existT _ _stringappend_388_ _)) =>
                              let _stringappend_389_ :=
                                string_drop _stringappend_387_ (build_ex _stringappend_388_) in
                              if ((match (hex_bits_20_matches_prefix _stringappend_389_) with
                                   | Some (imm,(existT _ _stringappend_390_ _)) =>
                                      match (string_drop _stringappend_389_
                                               (build_ex _stringappend_390_)) with
                                      | "" => true
                                      | _ => false
                                      end
                                   | None => false
                                   end)) then
                                true
                              else false
                           | None => false
                           end)) then
                        true
                      else false)
             : bool)
         | None => returnm (false  : bool)
         end >>= fun w__1 : bool =>
         returnm ((if (w__1) then true
                   else false)
          : bool)
      | None => returnm (false  : bool)
      end >>= fun w__2 : bool =>
      returnm ((if (w__2) then true
                else false)
       : bool)
   | None => returnm (false  : bool)
   end >>= fun w__3 : bool =>
   (if (w__3) then
      (match (utype_mnemonic_matches_prefix _stringappend_381_) with
       | Some (op,(existT _ _stringappend_382_ _)) => returnm (op, build_ex _stringappend_382_)
       | _ => exit tt  : M ((uop * {n : Z & ArithFact (n >= 0)}))
       end : M ((uop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_382_ _) =>
      let _stringappend_383_ := string_drop _stringappend_381_ (build_ex _stringappend_382_) in
      (match (spc_matches_prefix _stringappend_383_) with
       | Some (tt,(existT _ _stringappend_384_ _)) => returnm (tt, build_ex _stringappend_384_)
       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_384_ _) =>
      let _stringappend_385_ := string_drop _stringappend_383_ (build_ex _stringappend_384_) in
      (match (reg_name_matches_prefix _stringappend_385_) with
       | Some (rd,(existT _ _stringappend_386_ _)) => returnm (rd, build_ex _stringappend_386_)
       | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_386_ _) =>
      let _stringappend_387_ := string_drop _stringappend_385_ (build_ex _stringappend_386_) in
      sep_matches_prefix _stringappend_387_ >>= fun w__10 : option ((unit * {n : Z & ArithFact (n >=
        0)})) =>
      (match w__10 with
       | Some (tt,(existT _ _stringappend_388_ _)) => returnm (tt, build_ex _stringappend_388_)
       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_388_ _) =>
      let _stringappend_389_ := string_drop _stringappend_387_ (build_ex _stringappend_388_) in
      (match (hex_bits_20_matches_prefix _stringappend_389_) with
       | Some (imm,(existT _ _stringappend_390_ _)) => returnm (imm, build_ex _stringappend_390_)
       | _ => exit tt  : M ((mword 20 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 20 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_390_ _) =>
      (match (string_drop _stringappend_389_ (build_ex _stringappend_390_)) with
       | "" => returnm (true  : bool)
       | _ => exit tt  : M (bool)
       end)
       : M (bool)
    else
      and_boolM (returnm ((string_startswith _stringappend_381_ "jal")  : bool))
        (let _stringappend_392_ :=
          string_drop _stringappend_381_ (build_ex (projT1 (string_length "jal"))) in
        match (spc_matches_prefix _stringappend_392_) with
        | Some (tt,(existT _ _stringappend_393_ _)) =>
           let _stringappend_394_ := string_drop _stringappend_392_ (build_ex _stringappend_393_) in
           match (reg_name_matches_prefix _stringappend_394_) with
           | Some (rd,(existT _ _stringappend_395_ _)) =>
              let _stringappend_396_ := string_drop _stringappend_394_ (build_ex _stringappend_395_) in
              sep_matches_prefix _stringappend_396_ >>= fun w__17 : option ((unit * {n : Z & ArithFact (n >=
                0)})) =>
              returnm ((if ((match w__17 with
                             | Some (tt,(existT _ _stringappend_397_ _)) =>
                                let _stringappend_398_ :=
                                  string_drop _stringappend_396_ (build_ex _stringappend_397_) in
                                if ((match (hex_bits_21_matches_prefix _stringappend_398_) with
                                     | Some (imm,(existT _ _stringappend_399_ _)) =>
                                        match (string_drop _stringappend_398_
                                                 (build_ex _stringappend_399_)) with
                                        | "" => true
                                        | _ => false
                                        end
                                     | None => false
                                     end)) then
                                  true
                                else false
                             | None => false
                             end)) then
                          true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__18 : bool =>
           returnm ((if (w__18) then true
                     else false)
            : bool)
        | None => returnm (false  : bool)
        end >>= fun w__19 : bool =>
        returnm ((if (w__19) then true
                  else false)
         : bool)) >>= fun w__20 : bool =>
      (if (w__20) then
         let _stringappend_392_ :=
           string_drop _stringappend_381_ (build_ex (projT1 (string_length "jal"))) in
         (match (spc_matches_prefix _stringappend_392_) with
          | Some (tt,(existT _ _stringappend_393_ _)) => returnm (tt, build_ex _stringappend_393_)
          | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
          end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_393_ _) =>
         let _stringappend_394_ := string_drop _stringappend_392_ (build_ex _stringappend_393_) in
         (match (reg_name_matches_prefix _stringappend_394_) with
          | Some (rd,(existT _ _stringappend_395_ _)) => returnm (rd, build_ex _stringappend_395_)
          | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
          end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_395_ _) =>
         let _stringappend_396_ := string_drop _stringappend_394_ (build_ex _stringappend_395_) in
         sep_matches_prefix _stringappend_396_ >>= fun w__25 : option ((unit * {n : Z & ArithFact (n >=
           0)})) =>
         (match w__25 with
          | Some (tt,(existT _ _stringappend_397_ _)) => returnm (tt, build_ex _stringappend_397_)
          | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
          end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_397_ _) =>
         let _stringappend_398_ := string_drop _stringappend_396_ (build_ex _stringappend_397_) in
         (match (hex_bits_21_matches_prefix _stringappend_398_) with
          | Some (imm,(existT _ _stringappend_399_ _)) => returnm (imm, build_ex _stringappend_399_)
          | _ => exit tt  : M ((mword 21 * {n : Z & ArithFact (n >= 0)}))
          end : M ((mword 21 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_399_ _) =>
         (match (string_drop _stringappend_398_ (build_ex _stringappend_399_)) with
          | "" => returnm (true  : bool)
          | _ => exit tt  : M (bool)
          end)
          : M (bool)
       else
         and_boolM (returnm ((string_startswith _stringappend_381_ "jalr")  : bool))
           (let _stringappend_401_ :=
             string_drop _stringappend_381_ (build_ex (projT1 (string_length "jalr"))) in
           match (spc_matches_prefix _stringappend_401_) with
           | Some (tt,(existT _ _stringappend_402_ _)) =>
              let _stringappend_403_ := string_drop _stringappend_401_ (build_ex _stringappend_402_) in
              match (reg_name_matches_prefix _stringappend_403_) with
              | Some (rd,(existT _ _stringappend_404_ _)) =>
                 let _stringappend_405_ :=
                   string_drop _stringappend_403_ (build_ex _stringappend_404_) in
                 sep_matches_prefix _stringappend_405_ >>= fun w__32 : option ((unit * {n : Z & ArithFact (n >=
                   0)})) =>
                 match w__32 with
                 | Some (tt,(existT _ _stringappend_406_ _)) =>
                    let _stringappend_407_ :=
                      string_drop _stringappend_405_ (build_ex _stringappend_406_) in
                    match (reg_name_matches_prefix _stringappend_407_) with
                    | Some (rs1,(existT _ _stringappend_408_ _)) =>
                       let _stringappend_409_ :=
                         string_drop _stringappend_407_ (build_ex _stringappend_408_) in
                       sep_matches_prefix _stringappend_409_ >>= fun w__33 : option ((unit * {n : Z & ArithFact (n >=
                         0)})) =>
                       returnm ((if ((match w__33 with
                                      | Some (tt,(existT _ _stringappend_410_ _)) =>
                                         let _stringappend_411_ :=
                                           string_drop _stringappend_409_
                                             (build_ex _stringappend_410_) in
                                         if ((match (hex_bits_12_matches_prefix _stringappend_411_) with
                                              | Some (imm,(existT _ _stringappend_412_ _)) =>
                                                 match (string_drop _stringappend_411_
                                                          (build_ex _stringappend_412_)) with
                                                 | "" => true
                                                 | _ => false
                                                 end
                                              | None => false
                                              end)) then
                                           true
                                         else false
                                      | None => false
                                      end)) then
                                   true
                                 else false)
                        : bool)
                    | None => returnm (false  : bool)
                    end >>= fun w__34 : bool =>
                    returnm ((if (w__34) then true
                              else false)
                     : bool)
                 | None => returnm (false  : bool)
                 end >>= fun w__35 : bool =>
                 returnm ((if (w__35) then true
                           else false)
                  : bool)
              | None => returnm (false  : bool)
              end >>= fun w__36 : bool =>
              returnm ((if (w__36) then true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__37 : bool =>
           returnm ((if (w__37) then true
                     else false)
            : bool)) >>= fun w__38 : bool =>
         (if (w__38) then
            let _stringappend_401_ :=
              string_drop _stringappend_381_ (build_ex (projT1 (string_length "jalr"))) in
            (match (spc_matches_prefix _stringappend_401_) with
             | Some (tt,(existT _ _stringappend_402_ _)) =>
                returnm (tt, build_ex _stringappend_402_)
             | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
             end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_402_ _) =>
            let _stringappend_403_ := string_drop _stringappend_401_ (build_ex _stringappend_402_) in
            (match (reg_name_matches_prefix _stringappend_403_) with
             | Some (rd,(existT _ _stringappend_404_ _)) =>
                returnm (rd, build_ex _stringappend_404_)
             | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
             end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_404_ _) =>
            let _stringappend_405_ := string_drop _stringappend_403_ (build_ex _stringappend_404_) in
            sep_matches_prefix _stringappend_405_ >>= fun w__43 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            (match w__43 with
             | Some (tt,(existT _ _stringappend_406_ _)) =>
                returnm (tt, build_ex _stringappend_406_)
             | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
             end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_406_ _) =>
            let _stringappend_407_ := string_drop _stringappend_405_ (build_ex _stringappend_406_) in
            (match (reg_name_matches_prefix _stringappend_407_) with
             | Some (rs1,(existT _ _stringappend_408_ _)) =>
                returnm (rs1, build_ex _stringappend_408_)
             | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
             end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_408_ _) =>
            let _stringappend_409_ := string_drop _stringappend_407_ (build_ex _stringappend_408_) in
            sep_matches_prefix _stringappend_409_ >>= fun w__48 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            (match w__48 with
             | Some (tt,(existT _ _stringappend_410_ _)) =>
                returnm (tt, build_ex _stringappend_410_)
             | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
             end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_410_ _) =>
            let _stringappend_411_ := string_drop _stringappend_409_ (build_ex _stringappend_410_) in
            (match (hex_bits_12_matches_prefix _stringappend_411_) with
             | Some (imm,(existT _ _stringappend_412_ _)) =>
                returnm (imm, build_ex _stringappend_412_)
             | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
             end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_412_ _) =>
            (match (string_drop _stringappend_411_ (build_ex _stringappend_412_)) with
             | "" => returnm (true  : bool)
             | _ => exit tt  : M (bool)
             end)
             : M (bool)
          else
            match (btype_mnemonic_matches_prefix _stringappend_381_) with
            | Some (op,(existT _ _stringappend_414_ _)) =>
               let _stringappend_415_ :=
                 string_drop _stringappend_381_ (build_ex _stringappend_414_) in
               match (spc_matches_prefix _stringappend_415_) with
               | Some (tt,(existT _ _stringappend_416_ _)) =>
                  let _stringappend_417_ :=
                    string_drop _stringappend_415_ (build_ex _stringappend_416_) in
                  match (reg_name_matches_prefix _stringappend_417_) with
                  | Some (rs1,(existT _ _stringappend_418_ _)) =>
                     let _stringappend_419_ :=
                       string_drop _stringappend_417_ (build_ex _stringappend_418_) in
                     sep_matches_prefix _stringappend_419_ >>= fun w__55 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     match w__55 with
                     | Some (tt,(existT _ _stringappend_420_ _)) =>
                        let _stringappend_421_ :=
                          string_drop _stringappend_419_ (build_ex _stringappend_420_) in
                        match (reg_name_matches_prefix _stringappend_421_) with
                        | Some (rs2,(existT _ _stringappend_422_ _)) =>
                           let _stringappend_423_ :=
                             string_drop _stringappend_421_ (build_ex _stringappend_422_) in
                           sep_matches_prefix _stringappend_423_ >>= fun w__56 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__56 with
                                          | Some (tt,(existT _ _stringappend_424_ _)) =>
                                             let _stringappend_425_ :=
                                               string_drop _stringappend_423_
                                                 (build_ex _stringappend_424_) in
                                             if ((match (hex_bits_13_matches_prefix
                                                           _stringappend_425_) with
                                                  | Some (imm,(existT _ _stringappend_426_ _)) =>
                                                     match (string_drop _stringappend_425_
                                                              (build_ex _stringappend_426_)) with
                                                     | "" => true
                                                     | _ => false
                                                     end
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__57 : bool =>
                        returnm ((if (w__57) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__58 : bool =>
                     returnm ((if (w__58) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__59 : bool =>
                  returnm ((if (w__59) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__60 : bool =>
               returnm ((if (w__60) then true
                         else false)
                : bool)
            | None => returnm (false  : bool)
            end >>= fun w__61 : bool =>
            (if (w__61) then
               (match (btype_mnemonic_matches_prefix _stringappend_381_) with
                | Some (op,(existT _ _stringappend_414_ _)) =>
                   returnm (op, build_ex _stringappend_414_)
                | _ => exit tt  : M ((bop * {n : Z & ArithFact (n >= 0)}))
                end : M ((bop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_414_ _) =>
               let _stringappend_415_ :=
                 string_drop _stringappend_381_ (build_ex _stringappend_414_) in
               (match (spc_matches_prefix _stringappend_415_) with
                | Some (tt,(existT _ _stringappend_416_ _)) =>
                   returnm (tt, build_ex _stringappend_416_)
                | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_416_ _) =>
               let _stringappend_417_ :=
                 string_drop _stringappend_415_ (build_ex _stringappend_416_) in
               (match (reg_name_matches_prefix _stringappend_417_) with
                | Some (rs1,(existT _ _stringappend_418_ _)) =>
                   returnm (rs1, build_ex _stringappend_418_)
                | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_418_ _) =>
               let _stringappend_419_ :=
                 string_drop _stringappend_417_ (build_ex _stringappend_418_) in
               sep_matches_prefix _stringappend_419_ >>= fun w__68 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               (match w__68 with
                | Some (tt,(existT _ _stringappend_420_ _)) =>
                   returnm (tt, build_ex _stringappend_420_)
                | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_420_ _) =>
               let _stringappend_421_ :=
                 string_drop _stringappend_419_ (build_ex _stringappend_420_) in
               (match (reg_name_matches_prefix _stringappend_421_) with
                | Some (rs2,(existT _ _stringappend_422_ _)) =>
                   returnm (rs2, build_ex _stringappend_422_)
                | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_422_ _) =>
               let _stringappend_423_ :=
                 string_drop _stringappend_421_ (build_ex _stringappend_422_) in
               sep_matches_prefix _stringappend_423_ >>= fun w__73 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               (match w__73 with
                | Some (tt,(existT _ _stringappend_424_ _)) =>
                   returnm (tt, build_ex _stringappend_424_)
                | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_424_ _) =>
               let _stringappend_425_ :=
                 string_drop _stringappend_423_ (build_ex _stringappend_424_) in
               (match (hex_bits_13_matches_prefix _stringappend_425_) with
                | Some (imm,(existT _ _stringappend_426_ _)) =>
                   returnm (imm, build_ex _stringappend_426_)
                | _ => exit tt  : M ((mword 13 * {n : Z & ArithFact (n >= 0)}))
                end : M ((mword 13 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_426_ _) =>
               (match (string_drop _stringappend_425_ (build_ex _stringappend_426_)) with
                | "" => returnm (true  : bool)
                | _ => exit tt  : M (bool)
                end)
                : M (bool)
             else
               match (itype_mnemonic_matches_prefix _stringappend_381_) with
               | Some (op,(existT _ _stringappend_428_ _)) =>
                  let _stringappend_429_ :=
                    string_drop _stringappend_381_ (build_ex _stringappend_428_) in
                  match (spc_matches_prefix _stringappend_429_) with
                  | Some (tt,(existT _ _stringappend_430_ _)) =>
                     let _stringappend_431_ :=
                       string_drop _stringappend_429_ (build_ex _stringappend_430_) in
                     match (reg_name_matches_prefix _stringappend_431_) with
                     | Some (rd,(existT _ _stringappend_432_ _)) =>
                        let _stringappend_433_ :=
                          string_drop _stringappend_431_ (build_ex _stringappend_432_) in
                        sep_matches_prefix _stringappend_433_ >>= fun w__80 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__80 with
                        | Some (tt,(existT _ _stringappend_434_ _)) =>
                           let _stringappend_435_ :=
                             string_drop _stringappend_433_ (build_ex _stringappend_434_) in
                           match (reg_name_matches_prefix _stringappend_435_) with
                           | Some (rs1,(existT _ _stringappend_436_ _)) =>
                              let _stringappend_437_ :=
                                string_drop _stringappend_435_ (build_ex _stringappend_436_) in
                              sep_matches_prefix _stringappend_437_ >>= fun w__81 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              returnm ((if ((match w__81 with
                                             | Some (tt,(existT _ _stringappend_438_ _)) =>
                                                let _stringappend_439_ :=
                                                  string_drop _stringappend_437_
                                                    (build_ex _stringappend_438_) in
                                                if ((match (hex_bits_12_matches_prefix
                                                              _stringappend_439_) with
                                                     | Some (imm,(existT _ _stringappend_440_ _)) =>
                                                        match (string_drop _stringappend_439_
                                                                 (build_ex _stringappend_440_)) with
                                                        | "" => true
                                                        | _ => false
                                                        end
                                                     | None => false
                                                     end)) then
                                                  true
                                                else false
                                             | None => false
                                             end)) then
                                          true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__82 : bool =>
                           returnm ((if (w__82) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__83 : bool =>
                        returnm ((if (w__83) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__84 : bool =>
                     returnm ((if (w__84) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__85 : bool =>
                  returnm ((if (w__85) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__86 : bool =>
               (if (w__86) then
                  (match (itype_mnemonic_matches_prefix _stringappend_381_) with
                   | Some (op,(existT _ _stringappend_428_ _)) =>
                      returnm (op, build_ex _stringappend_428_)
                   | _ => exit tt  : M ((iop * {n : Z & ArithFact (n >= 0)}))
                   end : M ((iop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_428_ _) =>
                  let _stringappend_429_ :=
                    string_drop _stringappend_381_ (build_ex _stringappend_428_) in
                  (match (spc_matches_prefix _stringappend_429_) with
                   | Some (tt,(existT _ _stringappend_430_ _)) =>
                      returnm (tt, build_ex _stringappend_430_)
                   | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                   end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_430_ _) =>
                  let _stringappend_431_ :=
                    string_drop _stringappend_429_ (build_ex _stringappend_430_) in
                  (match (reg_name_matches_prefix _stringappend_431_) with
                   | Some (rd,(existT _ _stringappend_432_ _)) =>
                      returnm (rd, build_ex _stringappend_432_)
                   | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                   end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_432_ _) =>
                  let _stringappend_433_ :=
                    string_drop _stringappend_431_ (build_ex _stringappend_432_) in
                  sep_matches_prefix _stringappend_433_ >>= fun w__93 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  (match w__93 with
                   | Some (tt,(existT _ _stringappend_434_ _)) =>
                      returnm (tt, build_ex _stringappend_434_)
                   | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                   end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_434_ _) =>
                  let _stringappend_435_ :=
                    string_drop _stringappend_433_ (build_ex _stringappend_434_) in
                  (match (reg_name_matches_prefix _stringappend_435_) with
                   | Some (rs1,(existT _ _stringappend_436_ _)) =>
                      returnm (rs1, build_ex _stringappend_436_)
                   | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                   end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_436_ _) =>
                  let _stringappend_437_ :=
                    string_drop _stringappend_435_ (build_ex _stringappend_436_) in
                  sep_matches_prefix _stringappend_437_ >>= fun w__98 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  (match w__98 with
                   | Some (tt,(existT _ _stringappend_438_ _)) =>
                      returnm (tt, build_ex _stringappend_438_)
                   | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                   end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_438_ _) =>
                  let _stringappend_439_ :=
                    string_drop _stringappend_437_ (build_ex _stringappend_438_) in
                  (match (hex_bits_12_matches_prefix _stringappend_439_) with
                   | Some (imm,(existT _ _stringappend_440_ _)) =>
                      returnm (imm, build_ex _stringappend_440_)
                   | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                   end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_440_ _) =>
                  (match (string_drop _stringappend_439_ (build_ex _stringappend_440_)) with
                   | "" => returnm (true  : bool)
                   | _ => exit tt  : M (bool)
                   end)
                   : M (bool)
                else
                  match (shiftiop_mnemonic_matches_prefix _stringappend_381_) with
                  | Some (op,(existT _ _stringappend_442_ _)) =>
                     let _stringappend_443_ :=
                       string_drop _stringappend_381_ (build_ex _stringappend_442_) in
                     match (spc_matches_prefix _stringappend_443_) with
                     | Some (tt,(existT _ _stringappend_444_ _)) =>
                        let _stringappend_445_ :=
                          string_drop _stringappend_443_ (build_ex _stringappend_444_) in
                        match (reg_name_matches_prefix _stringappend_445_) with
                        | Some (rd,(existT _ _stringappend_446_ _)) =>
                           let _stringappend_447_ :=
                             string_drop _stringappend_445_ (build_ex _stringappend_446_) in
                           sep_matches_prefix _stringappend_447_ >>= fun w__105 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__105 with
                                          | Some (tt,(existT _ _stringappend_448_ _)) =>
                                             let _stringappend_449_ :=
                                               string_drop _stringappend_447_
                                                 (build_ex _stringappend_448_) in
                                             if ((match (reg_name_matches_prefix _stringappend_449_) with
                                                  | Some (rs1,(existT _ _stringappend_450_ _)) =>
                                                     let _stringappend_451_ :=
                                                       string_drop _stringappend_449_
                                                         (build_ex _stringappend_450_) in
                                                     if ((match (hex_bits_6_matches_prefix
                                                                   _stringappend_451_) with
                                                          | Some
                                                            (shamt,(existT _ _stringappend_452_ _)) =>
                                                             match (string_drop _stringappend_451_
                                                                      (build_ex _stringappend_452_)) with
                                                             | "" => true
                                                             | _ => false
                                                             end
                                                          | None => false
                                                          end)) then
                                                       true
                                                     else false
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__106 : bool =>
                        returnm ((if (w__106) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__107 : bool =>
                     returnm ((if (w__107) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__108 : bool =>
                  (if (w__108) then
                     (match (shiftiop_mnemonic_matches_prefix _stringappend_381_) with
                      | Some (op,(existT _ _stringappend_442_ _)) =>
                         returnm (op, build_ex _stringappend_442_)
                      | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                      end : M ((sop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_442_ _) =>
                     let _stringappend_443_ :=
                       string_drop _stringappend_381_ (build_ex _stringappend_442_) in
                     (match (spc_matches_prefix _stringappend_443_) with
                      | Some (tt,(existT _ _stringappend_444_ _)) =>
                         returnm (tt, build_ex _stringappend_444_)
                      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                      end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_444_ _) =>
                     let _stringappend_445_ :=
                       string_drop _stringappend_443_ (build_ex _stringappend_444_) in
                     (match (reg_name_matches_prefix _stringappend_445_) with
                      | Some (rd,(existT _ _stringappend_446_ _)) =>
                         returnm (rd, build_ex _stringappend_446_)
                      | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                      end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_446_ _) =>
                     let _stringappend_447_ :=
                       string_drop _stringappend_445_ (build_ex _stringappend_446_) in
                     sep_matches_prefix _stringappend_447_ >>= fun w__115 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     (match w__115 with
                      | Some (tt,(existT _ _stringappend_448_ _)) =>
                         returnm (tt, build_ex _stringappend_448_)
                      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                      end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_448_ _) =>
                     let _stringappend_449_ :=
                       string_drop _stringappend_447_ (build_ex _stringappend_448_) in
                     (match (reg_name_matches_prefix _stringappend_449_) with
                      | Some (rs1,(existT _ _stringappend_450_ _)) =>
                         returnm (rs1, build_ex _stringappend_450_)
                      | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                      end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_450_ _) =>
                     let _stringappend_451_ :=
                       string_drop _stringappend_449_ (build_ex _stringappend_450_) in
                     (match (hex_bits_6_matches_prefix _stringappend_451_) with
                      | Some (shamt,(existT _ _stringappend_452_ _)) =>
                         returnm (shamt, build_ex _stringappend_452_)
                      | _ => exit tt  : M ((mword 6 * {n : Z & ArithFact (n >= 0)}))
                      end : M ((mword 6 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(shamt, existT _ _stringappend_452_ _) =>
                     (match (string_drop _stringappend_451_ (build_ex _stringappend_452_)) with
                      | "" => returnm (true  : bool)
                      | _ => exit tt  : M (bool)
                      end)
                      : M (bool)
                   else
                     match (rtype_mnemonic_matches_prefix _stringappend_381_) with
                     | Some (op,(existT _ _stringappend_454_ _)) =>
                        let _stringappend_455_ :=
                          string_drop _stringappend_381_ (build_ex _stringappend_454_) in
                        match (spc_matches_prefix _stringappend_455_) with
                        | Some (tt,(existT _ _stringappend_456_ _)) =>
                           let _stringappend_457_ :=
                             string_drop _stringappend_455_ (build_ex _stringappend_456_) in
                           match (reg_name_matches_prefix _stringappend_457_) with
                           | Some (rd,(existT _ _stringappend_458_ _)) =>
                              let _stringappend_459_ :=
                                string_drop _stringappend_457_ (build_ex _stringappend_458_) in
                              sep_matches_prefix _stringappend_459_ >>= fun w__124 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__124 with
                              | Some (tt,(existT _ _stringappend_460_ _)) =>
                                 let _stringappend_461_ :=
                                   string_drop _stringappend_459_ (build_ex _stringappend_460_) in
                                 match (reg_name_matches_prefix _stringappend_461_) with
                                 | Some (rs1,(existT _ _stringappend_462_ _)) =>
                                    let _stringappend_463_ :=
                                      string_drop _stringappend_461_ (build_ex _stringappend_462_) in
                                    sep_matches_prefix _stringappend_463_ >>= fun w__125 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    returnm ((if ((match w__125 with
                                                   | Some (tt,(existT _ _stringappend_464_ _)) =>
                                                      let _stringappend_465_ :=
                                                        string_drop _stringappend_463_
                                                          (build_ex _stringappend_464_) in
                                                      if ((match (reg_name_matches_prefix
                                                                    _stringappend_465_) with
                                                           | Some
                                                             (rs2,(existT _ _stringappend_466_ _)) =>
                                                              match (string_drop _stringappend_465_
                                                                       (build_ex _stringappend_466_)) with
                                                              | "" => true
                                                              | _ => false
                                                              end
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false
                                                   | None => false
                                                   end)) then
                                                true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__126 : bool =>
                                 returnm ((if (w__126) then true
                                           else false)
                                  : bool)
                              | None => returnm (false  : bool)
                              end >>= fun w__127 : bool =>
                              returnm ((if (w__127) then true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__128 : bool =>
                           returnm ((if (w__128) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__129 : bool =>
                        returnm ((if (w__129) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__130 : bool =>
                     (if (w__130) then
                        (match (rtype_mnemonic_matches_prefix _stringappend_381_) with
                         | Some (op,(existT _ _stringappend_454_ _)) =>
                            returnm (op, build_ex _stringappend_454_)
                         | _ => exit tt  : M ((rop * {n : Z & ArithFact (n >= 0)}))
                         end : M ((rop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_454_ _) =>
                        let _stringappend_455_ :=
                          string_drop _stringappend_381_ (build_ex _stringappend_454_) in
                        (match (spc_matches_prefix _stringappend_455_) with
                         | Some (tt,(existT _ _stringappend_456_ _)) =>
                            returnm (tt, build_ex _stringappend_456_)
                         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                         end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_456_ _) =>
                        let _stringappend_457_ :=
                          string_drop _stringappend_455_ (build_ex _stringappend_456_) in
                        (match (reg_name_matches_prefix _stringappend_457_) with
                         | Some (rd,(existT _ _stringappend_458_ _)) =>
                            returnm (rd, build_ex _stringappend_458_)
                         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                         end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_458_ _) =>
                        let _stringappend_459_ :=
                          string_drop _stringappend_457_ (build_ex _stringappend_458_) in
                        sep_matches_prefix _stringappend_459_ >>= fun w__137 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        (match w__137 with
                         | Some (tt,(existT _ _stringappend_460_ _)) =>
                            returnm (tt, build_ex _stringappend_460_)
                         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                         end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_460_ _) =>
                        let _stringappend_461_ :=
                          string_drop _stringappend_459_ (build_ex _stringappend_460_) in
                        (match (reg_name_matches_prefix _stringappend_461_) with
                         | Some (rs1,(existT _ _stringappend_462_ _)) =>
                            returnm (rs1, build_ex _stringappend_462_)
                         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                         end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_462_ _) =>
                        let _stringappend_463_ :=
                          string_drop _stringappend_461_ (build_ex _stringappend_462_) in
                        sep_matches_prefix _stringappend_463_ >>= fun w__142 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        (match w__142 with
                         | Some (tt,(existT _ _stringappend_464_ _)) =>
                            returnm (tt, build_ex _stringappend_464_)
                         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                         end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_464_ _) =>
                        let _stringappend_465_ :=
                          string_drop _stringappend_463_ (build_ex _stringappend_464_) in
                        (match (reg_name_matches_prefix _stringappend_465_) with
                         | Some (rs2,(existT _ _stringappend_466_ _)) =>
                            returnm (rs2, build_ex _stringappend_466_)
                         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                         end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_466_ _) =>
                        (match (string_drop _stringappend_465_ (build_ex _stringappend_466_)) with
                         | "" => returnm (true  : bool)
                         | _ => exit tt  : M (bool)
                         end)
                         : M (bool)
                      else
                        and_boolM (returnm ((string_startswith _stringappend_381_ "l")  : bool))
                          (let _stringappend_468_ :=
                            string_drop _stringappend_381_ (build_ex (projT1 (string_length "l"))) in
                          match (size_mnemonic_matches_prefix _stringappend_468_) with
                          | Some (size,(existT _ _stringappend_469_ _)) =>
                             let _stringappend_470_ :=
                               string_drop _stringappend_468_ (build_ex _stringappend_469_) in
                             match (maybe_u_matches_prefix _stringappend_470_) with
                             | Some (is_unsigned,(existT _ _stringappend_471_ _)) =>
                                let _stringappend_472_ :=
                                  string_drop _stringappend_470_ (build_ex _stringappend_471_) in
                                match (maybe_aq_matches_prefix _stringappend_472_) with
                                | Some (aq,(existT _ _stringappend_473_ _)) =>
                                   let _stringappend_474_ :=
                                     string_drop _stringappend_472_ (build_ex _stringappend_473_) in
                                   match (maybe_rl_matches_prefix _stringappend_474_) with
                                   | Some (rl,(existT _ _stringappend_475_ _)) =>
                                      let _stringappend_476_ :=
                                        string_drop _stringappend_474_ (build_ex _stringappend_475_) in
                                      match (spc_matches_prefix _stringappend_476_) with
                                      | Some (tt,(existT _ _stringappend_477_ _)) =>
                                         let _stringappend_478_ :=
                                           string_drop _stringappend_476_
                                             (build_ex _stringappend_477_) in
                                         match (reg_name_matches_prefix _stringappend_478_) with
                                         | Some (rd,(existT _ _stringappend_479_ _)) =>
                                            let _stringappend_480_ :=
                                              string_drop _stringappend_478_
                                                (build_ex _stringappend_479_) in
                                            sep_matches_prefix _stringappend_480_ >>= fun w__149 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__149 with
                                            | Some (tt,(existT _ _stringappend_481_ _)) =>
                                               let _stringappend_482_ :=
                                                 string_drop _stringappend_480_
                                                   (build_ex _stringappend_481_) in
                                               match (reg_name_matches_prefix _stringappend_482_) with
                                               | Some (rs1,(existT _ _stringappend_483_ _)) =>
                                                  let _stringappend_484_ :=
                                                    string_drop _stringappend_482_
                                                      (build_ex _stringappend_483_) in
                                                  sep_matches_prefix _stringappend_484_ >>= fun w__150 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__150 with
                                                                 | Some
                                                                   (tt,(existT _ _stringappend_485_ _)) =>
                                                                    let _stringappend_486_ :=
                                                                      string_drop _stringappend_484_
                                                                        (build_ex _stringappend_485_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_486_) with
                                                                         | Some
                                                                           (imm,(existT _ _stringappend_487_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_486_
                                                                                     (build_ex _stringappend_487_)) with
                                                                            | "" => true
                                                                            | _ => false
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__151 : bool =>
                                               returnm ((if (w__151) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__152 : bool =>
                                            returnm ((if (w__152) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__153 : bool =>
                                         returnm ((if (w__153) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__154 : bool =>
                                      returnm ((if (w__154) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__155 : bool =>
                                   returnm ((if (w__155) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__156 : bool =>
                                returnm ((if (w__156) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__157 : bool =>
                             returnm ((if (w__157) then true
                                       else false)
                              : bool)
                          | None => returnm (false  : bool)
                          end >>= fun w__158 : bool =>
                          returnm ((if (w__158) then true
                                    else false)
                           : bool)) >>= fun w__159 : bool =>
                        (if (w__159) then
                           let _stringappend_468_ :=
                             string_drop _stringappend_381_ (build_ex (projT1 (string_length "l"))) in
                           (match (size_mnemonic_matches_prefix _stringappend_468_) with
                            | Some (size,(existT _ _stringappend_469_ _)) =>
                               returnm (size, build_ex _stringappend_469_)
                            | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                            end : M ((word_width * {n : Z & ArithFact (n >= 0)}))) >>= fun '(size, existT _ _stringappend_469_ _) =>
                           let _stringappend_470_ :=
                             string_drop _stringappend_468_ (build_ex _stringappend_469_) in
                           (match (maybe_u_matches_prefix _stringappend_470_) with
                            | Some (is_unsigned,(existT _ _stringappend_471_ _)) =>
                               returnm (is_unsigned, build_ex _stringappend_471_)
                            | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                            end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(is_unsigned, existT _ _stringappend_471_ _) =>
                           let _stringappend_472_ :=
                             string_drop _stringappend_470_ (build_ex _stringappend_471_) in
                           (match (maybe_aq_matches_prefix _stringappend_472_) with
                            | Some (aq,(existT _ _stringappend_473_ _)) =>
                               returnm (aq, build_ex _stringappend_473_)
                            | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                            end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(aq, existT _ _stringappend_473_ _) =>
                           let _stringappend_474_ :=
                             string_drop _stringappend_472_ (build_ex _stringappend_473_) in
                           (match (maybe_rl_matches_prefix _stringappend_474_) with
                            | Some (rl,(existT _ _stringappend_475_ _)) =>
                               returnm (rl, build_ex _stringappend_475_)
                            | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                            end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rl, existT _ _stringappend_475_ _) =>
                           let _stringappend_476_ :=
                             string_drop _stringappend_474_ (build_ex _stringappend_475_) in
                           (match (spc_matches_prefix _stringappend_476_) with
                            | Some (tt,(existT _ _stringappend_477_ _)) =>
                               returnm (tt, build_ex _stringappend_477_)
                            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                            end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_477_ _) =>
                           let _stringappend_478_ :=
                             string_drop _stringappend_476_ (build_ex _stringappend_477_) in
                           (match (reg_name_matches_prefix _stringappend_478_) with
                            | Some (rd,(existT _ _stringappend_479_ _)) =>
                               returnm (rd, build_ex _stringappend_479_)
                            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                            end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_479_ _) =>
                           let _stringappend_480_ :=
                             string_drop _stringappend_478_ (build_ex _stringappend_479_) in
                           sep_matches_prefix _stringappend_480_ >>= fun w__172 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           (match w__172 with
                            | Some (tt,(existT _ _stringappend_481_ _)) =>
                               returnm (tt, build_ex _stringappend_481_)
                            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                            end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_481_ _) =>
                           let _stringappend_482_ :=
                             string_drop _stringappend_480_ (build_ex _stringappend_481_) in
                           (match (reg_name_matches_prefix _stringappend_482_) with
                            | Some (rs1,(existT _ _stringappend_483_ _)) =>
                               returnm (rs1, build_ex _stringappend_483_)
                            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                            end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_483_ _) =>
                           let _stringappend_484_ :=
                             string_drop _stringappend_482_ (build_ex _stringappend_483_) in
                           sep_matches_prefix _stringappend_484_ >>= fun w__177 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           (match w__177 with
                            | Some (tt,(existT _ _stringappend_485_ _)) =>
                               returnm (tt, build_ex _stringappend_485_)
                            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                            end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_485_ _) =>
                           let _stringappend_486_ :=
                             string_drop _stringappend_484_ (build_ex _stringappend_485_) in
                           (match (hex_bits_12_matches_prefix _stringappend_486_) with
                            | Some (imm,(existT _ _stringappend_487_ _)) =>
                               returnm (imm, build_ex _stringappend_487_)
                            | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                            end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_487_ _) =>
                           (match (string_drop _stringappend_486_ (build_ex _stringappend_487_)) with
                            | "" => returnm (true  : bool)
                            | _ => exit tt  : M (bool)
                            end)
                            : M (bool)
                         else
                           and_boolM (returnm ((string_startswith _stringappend_381_ "s")  : bool))
                             (let _stringappend_489_ :=
                               string_drop _stringappend_381_
                                 (build_ex (projT1 (string_length "s"))) in
                             match (size_mnemonic_matches_prefix _stringappend_489_) with
                             | Some (size,(existT _ _stringappend_490_ _)) =>
                                let _stringappend_491_ :=
                                  string_drop _stringappend_489_ (build_ex _stringappend_490_) in
                                match (maybe_aq_matches_prefix _stringappend_491_) with
                                | Some (aq,(existT _ _stringappend_492_ _)) =>
                                   let _stringappend_493_ :=
                                     string_drop _stringappend_491_ (build_ex _stringappend_492_) in
                                   match (maybe_rl_matches_prefix _stringappend_493_) with
                                   | Some (rl,(existT _ _stringappend_494_ _)) =>
                                      let _stringappend_495_ :=
                                        string_drop _stringappend_493_ (build_ex _stringappend_494_) in
                                      match (spc_matches_prefix _stringappend_495_) with
                                      | Some (tt,(existT _ _stringappend_496_ _)) =>
                                         let _stringappend_497_ :=
                                           string_drop _stringappend_495_
                                             (build_ex _stringappend_496_) in
                                         match (reg_name_matches_prefix _stringappend_497_) with
                                         | Some (rd,(existT _ _stringappend_498_ _)) =>
                                            let _stringappend_499_ :=
                                              string_drop _stringappend_497_
                                                (build_ex _stringappend_498_) in
                                            sep_matches_prefix _stringappend_499_ >>= fun w__184 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__184 with
                                            | Some (tt,(existT _ _stringappend_500_ _)) =>
                                               let _stringappend_501_ :=
                                                 string_drop _stringappend_499_
                                                   (build_ex _stringappend_500_) in
                                               match (reg_name_matches_prefix _stringappend_501_) with
                                               | Some (rs1,(existT _ _stringappend_502_ _)) =>
                                                  let _stringappend_503_ :=
                                                    string_drop _stringappend_501_
                                                      (build_ex _stringappend_502_) in
                                                  sep_matches_prefix _stringappend_503_ >>= fun w__185 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__185 with
                                                                 | Some
                                                                   (tt,(existT _ _stringappend_504_ _)) =>
                                                                    let _stringappend_505_ :=
                                                                      string_drop _stringappend_503_
                                                                        (build_ex _stringappend_504_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_505_) with
                                                                         | Some
                                                                           (imm,(existT _ _stringappend_506_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_505_
                                                                                     (build_ex _stringappend_506_)) with
                                                                            | "" => true
                                                                            | _ => false
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__186 : bool =>
                                               returnm ((if (w__186) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__187 : bool =>
                                            returnm ((if (w__187) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__188 : bool =>
                                         returnm ((if (w__188) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__189 : bool =>
                                      returnm ((if (w__189) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__190 : bool =>
                                   returnm ((if (w__190) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__191 : bool =>
                                returnm ((if (w__191) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__192 : bool =>
                             returnm ((if (w__192) then true
                                       else false)
                              : bool)) >>= fun w__193 : bool =>
                           (if (w__193) then
                              let _stringappend_489_ :=
                                string_drop _stringappend_381_
                                  (build_ex (projT1 (string_length "s"))) in
                              (match (size_mnemonic_matches_prefix _stringappend_489_) with
                               | Some (size,(existT _ _stringappend_490_ _)) =>
                                  returnm (size, build_ex _stringappend_490_)
                               | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                               end : M ((word_width * {n : Z & ArithFact (n >= 0)}))) >>= fun '(size, existT _ _stringappend_490_ _) =>
                              let _stringappend_491_ :=
                                string_drop _stringappend_489_ (build_ex _stringappend_490_) in
                              (match (maybe_aq_matches_prefix _stringappend_491_) with
                               | Some (aq,(existT _ _stringappend_492_ _)) =>
                                  returnm (aq, build_ex _stringappend_492_)
                               | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                               end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(aq, existT _ _stringappend_492_ _) =>
                              let _stringappend_493_ :=
                                string_drop _stringappend_491_ (build_ex _stringappend_492_) in
                              (match (maybe_rl_matches_prefix _stringappend_493_) with
                               | Some (rl,(existT _ _stringappend_494_ _)) =>
                                  returnm (rl, build_ex _stringappend_494_)
                               | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                               end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rl, existT _ _stringappend_494_ _) =>
                              let _stringappend_495_ :=
                                string_drop _stringappend_493_ (build_ex _stringappend_494_) in
                              (match (spc_matches_prefix _stringappend_495_) with
                               | Some (tt,(existT _ _stringappend_496_ _)) =>
                                  returnm (tt, build_ex _stringappend_496_)
                               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                               end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_496_ _) =>
                              let _stringappend_497_ :=
                                string_drop _stringappend_495_ (build_ex _stringappend_496_) in
                              (match (reg_name_matches_prefix _stringappend_497_) with
                               | Some (rd,(existT _ _stringappend_498_ _)) =>
                                  returnm (rd, build_ex _stringappend_498_)
                               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                               end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_498_ _) =>
                              let _stringappend_499_ :=
                                string_drop _stringappend_497_ (build_ex _stringappend_498_) in
                              sep_matches_prefix _stringappend_499_ >>= fun w__204 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              (match w__204 with
                               | Some (tt,(existT _ _stringappend_500_ _)) =>
                                  returnm (tt, build_ex _stringappend_500_)
                               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                               end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_500_ _) =>
                              let _stringappend_501_ :=
                                string_drop _stringappend_499_ (build_ex _stringappend_500_) in
                              (match (reg_name_matches_prefix _stringappend_501_) with
                               | Some (rs1,(existT _ _stringappend_502_ _)) =>
                                  returnm (rs1, build_ex _stringappend_502_)
                               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                               end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_502_ _) =>
                              let _stringappend_503_ :=
                                string_drop _stringappend_501_ (build_ex _stringappend_502_) in
                              sep_matches_prefix _stringappend_503_ >>= fun w__209 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              (match w__209 with
                               | Some (tt,(existT _ _stringappend_504_ _)) =>
                                  returnm (tt, build_ex _stringappend_504_)
                               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                               end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_504_ _) =>
                              let _stringappend_505_ :=
                                string_drop _stringappend_503_ (build_ex _stringappend_504_) in
                              (match (hex_bits_12_matches_prefix _stringappend_505_) with
                               | Some (imm,(existT _ _stringappend_506_ _)) =>
                                  returnm (imm, build_ex _stringappend_506_)
                               | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                               end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_506_ _) =>
                              (match (string_drop _stringappend_505_ (build_ex _stringappend_506_)) with
                               | "" => returnm (true  : bool)
                               | _ => exit tt  : M (bool)
                               end)
                               : M (bool)
                            else
                              and_boolM
                                (returnm ((string_startswith _stringappend_381_ "addiw")
                                  : bool))
                                (let _stringappend_508_ :=
                                  string_drop _stringappend_381_
                                    (build_ex (projT1 (string_length "addiw"))) in
                                match (spc_matches_prefix _stringappend_508_) with
                                | Some (tt,(existT _ _stringappend_509_ _)) =>
                                   let _stringappend_510_ :=
                                     string_drop _stringappend_508_ (build_ex _stringappend_509_) in
                                   match (reg_name_matches_prefix _stringappend_510_) with
                                   | Some (rd,(existT _ _stringappend_511_ _)) =>
                                      let _stringappend_512_ :=
                                        string_drop _stringappend_510_ (build_ex _stringappend_511_) in
                                      sep_matches_prefix _stringappend_512_ >>= fun w__216 : option ((unit * {n : Z & ArithFact (n >=
                                        0)})) =>
                                      match w__216 with
                                      | Some (tt,(existT _ _stringappend_513_ _)) =>
                                         let _stringappend_514_ :=
                                           string_drop _stringappend_512_
                                             (build_ex _stringappend_513_) in
                                         match (reg_name_matches_prefix _stringappend_514_) with
                                         | Some (rs1,(existT _ _stringappend_515_ _)) =>
                                            let _stringappend_516_ :=
                                              string_drop _stringappend_514_
                                                (build_ex _stringappend_515_) in
                                            sep_matches_prefix _stringappend_516_ >>= fun w__217 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            returnm ((if ((match w__217 with
                                                           | Some
                                                             (tt,(existT _ _stringappend_517_ _)) =>
                                                              let _stringappend_518_ :=
                                                                string_drop _stringappend_516_
                                                                  (build_ex _stringappend_517_) in
                                                              if ((match (hex_bits_12_matches_prefix
                                                                            _stringappend_518_) with
                                                                   | Some
                                                                     (imm,(existT _ _stringappend_519_ _)) =>
                                                                      match (string_drop
                                                                               _stringappend_518_
                                                                               (build_ex _stringappend_519_)) with
                                                                      | "" => true
                                                                      | _ => false
                                                                      end
                                                                   | None => false
                                                                   end)) then
                                                                true
                                                              else false
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__218 : bool =>
                                         returnm ((if (w__218) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__219 : bool =>
                                      returnm ((if (w__219) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__220 : bool =>
                                   returnm ((if (w__220) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__221 : bool =>
                                returnm ((if (w__221) then true
                                          else false)
                                 : bool)) >>= fun w__222 : bool =>
                              (if (w__222) then
                                 let _stringappend_508_ :=
                                   string_drop _stringappend_381_
                                     (build_ex (projT1 (string_length "addiw"))) in
                                 (match (spc_matches_prefix _stringappend_508_) with
                                  | Some (tt,(existT _ _stringappend_509_ _)) =>
                                     returnm (tt, build_ex _stringappend_509_)
                                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_509_ _) =>
                                 let _stringappend_510_ :=
                                   string_drop _stringappend_508_ (build_ex _stringappend_509_) in
                                 (match (reg_name_matches_prefix _stringappend_510_) with
                                  | Some (rd,(existT _ _stringappend_511_ _)) =>
                                     returnm (rd, build_ex _stringappend_511_)
                                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_511_ _) =>
                                 let _stringappend_512_ :=
                                   string_drop _stringappend_510_ (build_ex _stringappend_511_) in
                                 sep_matches_prefix _stringappend_512_ >>= fun w__227 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 (match w__227 with
                                  | Some (tt,(existT _ _stringappend_513_ _)) =>
                                     returnm (tt, build_ex _stringappend_513_)
                                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_513_ _) =>
                                 let _stringappend_514_ :=
                                   string_drop _stringappend_512_ (build_ex _stringappend_513_) in
                                 (match (reg_name_matches_prefix _stringappend_514_) with
                                  | Some (rs1,(existT _ _stringappend_515_ _)) =>
                                     returnm (rs1, build_ex _stringappend_515_)
                                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_515_ _) =>
                                 let _stringappend_516_ :=
                                   string_drop _stringappend_514_ (build_ex _stringappend_515_) in
                                 sep_matches_prefix _stringappend_516_ >>= fun w__232 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 (match w__232 with
                                  | Some (tt,(existT _ _stringappend_517_ _)) =>
                                     returnm (tt, build_ex _stringappend_517_)
                                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_517_ _) =>
                                 let _stringappend_518_ :=
                                   string_drop _stringappend_516_ (build_ex _stringappend_517_) in
                                 (match (hex_bits_12_matches_prefix _stringappend_518_) with
                                  | Some (imm,(existT _ _stringappend_519_ _)) =>
                                     returnm (imm, build_ex _stringappend_519_)
                                  | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_519_ _) =>
                                 (match (string_drop _stringappend_518_
                                           (build_ex _stringappend_519_)) with
                                  | "" => returnm (true  : bool)
                                  | _ => exit tt  : M (bool)
                                  end)
                                  : M (bool)
                               else
                                 match (shiftw_mnemonic_matches_prefix _stringappend_381_) with
                                 | Some (op,(existT _ _stringappend_521_ _)) =>
                                    let _stringappend_522_ :=
                                      string_drop _stringappend_381_ (build_ex _stringappend_521_) in
                                    match (spc_matches_prefix _stringappend_522_) with
                                    | Some (tt,(existT _ _stringappend_523_ _)) =>
                                       let _stringappend_524_ :=
                                         string_drop _stringappend_522_
                                           (build_ex _stringappend_523_) in
                                       match (reg_name_matches_prefix _stringappend_524_) with
                                       | Some (rd,(existT _ _stringappend_525_ _)) =>
                                          let _stringappend_526_ :=
                                            string_drop _stringappend_524_
                                              (build_ex _stringappend_525_) in
                                          sep_matches_prefix _stringappend_526_ >>= fun w__239 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          match w__239 with
                                          | Some (tt,(existT _ _stringappend_527_ _)) =>
                                             let _stringappend_528_ :=
                                               string_drop _stringappend_526_
                                                 (build_ex _stringappend_527_) in
                                             match (reg_name_matches_prefix _stringappend_528_) with
                                             | Some (rs1,(existT _ _stringappend_529_ _)) =>
                                                let _stringappend_530_ :=
                                                  string_drop _stringappend_528_
                                                    (build_ex _stringappend_529_) in
                                                sep_matches_prefix _stringappend_530_ >>= fun w__240 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__240 with
                                                               | Some
                                                                 (tt,(existT _ _stringappend_531_ _)) =>
                                                                  let _stringappend_532_ :=
                                                                    string_drop _stringappend_530_
                                                                      (build_ex _stringappend_531_) in
                                                                  if ((match (hex_bits_5_matches_prefix
                                                                                _stringappend_532_) with
                                                                       | Some
                                                                         (shamt,(existT _ _stringappend_533_ _)) =>
                                                                          match (string_drop
                                                                                   _stringappend_532_
                                                                                   (build_ex _stringappend_533_)) with
                                                                          | "" => true
                                                                          | _ => false
                                                                          end
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__241 : bool =>
                                             returnm ((if (w__241) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__242 : bool =>
                                          returnm ((if (w__242) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__243 : bool =>
                                       returnm ((if (w__243) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__244 : bool =>
                                    returnm ((if (w__244) then true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__245 : bool =>
                                 (if (w__245) then
                                    (match (shiftw_mnemonic_matches_prefix _stringappend_381_) with
                                     | Some (op,(existT _ _stringappend_521_ _)) =>
                                        returnm (op, build_ex _stringappend_521_)
                                     | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((sop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_521_ _) =>
                                    let _stringappend_522_ :=
                                      string_drop _stringappend_381_ (build_ex _stringappend_521_) in
                                    (match (spc_matches_prefix _stringappend_522_) with
                                     | Some (tt,(existT _ _stringappend_523_ _)) =>
                                        returnm (tt, build_ex _stringappend_523_)
                                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_523_ _) =>
                                    let _stringappend_524_ :=
                                      string_drop _stringappend_522_ (build_ex _stringappend_523_) in
                                    (match (reg_name_matches_prefix _stringappend_524_) with
                                     | Some (rd,(existT _ _stringappend_525_ _)) =>
                                        returnm (rd, build_ex _stringappend_525_)
                                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_525_ _) =>
                                    let _stringappend_526_ :=
                                      string_drop _stringappend_524_ (build_ex _stringappend_525_) in
                                    sep_matches_prefix _stringappend_526_ >>= fun w__252 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    (match w__252 with
                                     | Some (tt,(existT _ _stringappend_527_ _)) =>
                                        returnm (tt, build_ex _stringappend_527_)
                                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_527_ _) =>
                                    let _stringappend_528_ :=
                                      string_drop _stringappend_526_ (build_ex _stringappend_527_) in
                                    (match (reg_name_matches_prefix _stringappend_528_) with
                                     | Some (rs1,(existT _ _stringappend_529_ _)) =>
                                        returnm (rs1, build_ex _stringappend_529_)
                                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_529_ _) =>
                                    let _stringappend_530_ :=
                                      string_drop _stringappend_528_ (build_ex _stringappend_529_) in
                                    sep_matches_prefix _stringappend_530_ >>= fun w__257 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    (match w__257 with
                                     | Some (tt,(existT _ _stringappend_531_ _)) =>
                                        returnm (tt, build_ex _stringappend_531_)
                                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_531_ _) =>
                                    let _stringappend_532_ :=
                                      string_drop _stringappend_530_ (build_ex _stringappend_531_) in
                                    (match (hex_bits_5_matches_prefix _stringappend_532_) with
                                     | Some (shamt,(existT _ _stringappend_533_ _)) =>
                                        returnm (shamt, build_ex _stringappend_533_)
                                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(shamt, existT _ _stringappend_533_ _) =>
                                    (match (string_drop _stringappend_532_
                                              (build_ex _stringappend_533_)) with
                                     | "" => returnm (true  : bool)
                                     | _ => exit tt  : M (bool)
                                     end)
                                     : M (bool)
                                  else
                                    match (rtypew_mnemonic_matches_prefix _stringappend_381_) with
                                    | Some (op,(existT _ _stringappend_535_ _)) =>
                                       let _stringappend_536_ :=
                                         string_drop _stringappend_381_
                                           (build_ex _stringappend_535_) in
                                       match (spc_matches_prefix _stringappend_536_) with
                                       | Some (tt,(existT _ _stringappend_537_ _)) =>
                                          let _stringappend_538_ :=
                                            string_drop _stringappend_536_
                                              (build_ex _stringappend_537_) in
                                          match (reg_name_matches_prefix _stringappend_538_) with
                                          | Some (rd,(existT _ _stringappend_539_ _)) =>
                                             let _stringappend_540_ :=
                                               string_drop _stringappend_538_
                                                 (build_ex _stringappend_539_) in
                                             sep_matches_prefix _stringappend_540_ >>= fun w__264 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__264 with
                                             | Some (tt,(existT _ _stringappend_541_ _)) =>
                                                let _stringappend_542_ :=
                                                  string_drop _stringappend_540_
                                                    (build_ex _stringappend_541_) in
                                                match (reg_name_matches_prefix _stringappend_542_) with
                                                | Some (rs1,(existT _ _stringappend_543_ _)) =>
                                                   let _stringappend_544_ :=
                                                     string_drop _stringappend_542_
                                                       (build_ex _stringappend_543_) in
                                                   sep_matches_prefix _stringappend_544_ >>= fun w__265 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   returnm ((if ((match w__265 with
                                                                  | Some
                                                                    (tt,(existT _ _stringappend_545_ _)) =>
                                                                     let _stringappend_546_ :=
                                                                       string_drop
                                                                         _stringappend_544_
                                                                         (build_ex _stringappend_545_) in
                                                                     if ((match (reg_name_matches_prefix
                                                                                   _stringappend_546_) with
                                                                          | Some
                                                                            (rs2,(existT _ _stringappend_547_ _)) =>
                                                                             match (string_drop
                                                                                      _stringappend_546_
                                                                                      (build_ex _stringappend_547_)) with
                                                                             | "" => true
                                                                             | _ => false
                                                                             end
                                                                          | None => false
                                                                          end)) then
                                                                       true
                                                                     else false
                                                                  | None => false
                                                                  end)) then
                                                               true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__266 : bool =>
                                                returnm ((if (w__266) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__267 : bool =>
                                             returnm ((if (w__267) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__268 : bool =>
                                          returnm ((if (w__268) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__269 : bool =>
                                       returnm ((if (w__269) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__270 : bool =>
                                    (if (w__270) then
                                       (match (rtypew_mnemonic_matches_prefix _stringappend_381_) with
                                        | Some (op,(existT _ _stringappend_535_ _)) =>
                                           returnm (op, build_ex _stringappend_535_)
                                        | _ => exit tt  : M ((ropw * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((ropw * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_535_ _) =>
                                       let _stringappend_536_ :=
                                         string_drop _stringappend_381_
                                           (build_ex _stringappend_535_) in
                                       (match (spc_matches_prefix _stringappend_536_) with
                                        | Some (tt,(existT _ _stringappend_537_ _)) =>
                                           returnm (tt, build_ex _stringappend_537_)
                                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_537_ _) =>
                                       let _stringappend_538_ :=
                                         string_drop _stringappend_536_
                                           (build_ex _stringappend_537_) in
                                       (match (reg_name_matches_prefix _stringappend_538_) with
                                        | Some (rd,(existT _ _stringappend_539_ _)) =>
                                           returnm (rd, build_ex _stringappend_539_)
                                        | _ =>
                                           exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_539_ _) =>
                                       let _stringappend_540_ :=
                                         string_drop _stringappend_538_
                                           (build_ex _stringappend_539_) in
                                       sep_matches_prefix _stringappend_540_ >>= fun w__277 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       (match w__277 with
                                        | Some (tt,(existT _ _stringappend_541_ _)) =>
                                           returnm (tt, build_ex _stringappend_541_)
                                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_541_ _) =>
                                       let _stringappend_542_ :=
                                         string_drop _stringappend_540_
                                           (build_ex _stringappend_541_) in
                                       (match (reg_name_matches_prefix _stringappend_542_) with
                                        | Some (rs1,(existT _ _stringappend_543_ _)) =>
                                           returnm (rs1, build_ex _stringappend_543_)
                                        | _ =>
                                           exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_543_ _) =>
                                       let _stringappend_544_ :=
                                         string_drop _stringappend_542_
                                           (build_ex _stringappend_543_) in
                                       sep_matches_prefix _stringappend_544_ >>= fun w__282 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       (match w__282 with
                                        | Some (tt,(existT _ _stringappend_545_ _)) =>
                                           returnm (tt, build_ex _stringappend_545_)
                                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_545_ _) =>
                                       let _stringappend_546_ :=
                                         string_drop _stringappend_544_
                                           (build_ex _stringappend_545_) in
                                       (match (reg_name_matches_prefix _stringappend_546_) with
                                        | Some (rs2,(existT _ _stringappend_547_ _)) =>
                                           returnm (rs2, build_ex _stringappend_547_)
                                        | _ =>
                                           exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_547_ _) =>
                                       (match (string_drop _stringappend_546_
                                                 (build_ex _stringappend_547_)) with
                                        | "" => returnm (true  : bool)
                                        | _ => exit tt  : M (bool)
                                        end)
                                        : M (bool)
                                     else
                                       match (shiftiwop_mnemonic_matches_prefix _stringappend_381_) with
                                       | Some (op,(existT _ _stringappend_549_ _)) =>
                                          let _stringappend_550_ :=
                                            string_drop _stringappend_381_
                                              (build_ex _stringappend_549_) in
                                          match (spc_matches_prefix _stringappend_550_) with
                                          | Some (tt,(existT _ _stringappend_551_ _)) =>
                                             let _stringappend_552_ :=
                                               string_drop _stringappend_550_
                                                 (build_ex _stringappend_551_) in
                                             match (reg_name_matches_prefix _stringappend_552_) with
                                             | Some (rd,(existT _ _stringappend_553_ _)) =>
                                                let _stringappend_554_ :=
                                                  string_drop _stringappend_552_
                                                    (build_ex _stringappend_553_) in
                                                sep_matches_prefix _stringappend_554_ >>= fun w__289 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__289 with
                                                               | Some
                                                                 (tt,(existT _ _stringappend_555_ _)) =>
                                                                  let _stringappend_556_ :=
                                                                    string_drop _stringappend_554_
                                                                      (build_ex _stringappend_555_) in
                                                                  if ((match (reg_name_matches_prefix
                                                                                _stringappend_556_) with
                                                                       | Some
                                                                         (rs1,(existT _ _stringappend_557_ _)) =>
                                                                          let _stringappend_558_ :=
                                                                            string_drop
                                                                              _stringappend_556_
                                                                              (build_ex _stringappend_557_) in
                                                                          if ((match (hex_bits_5_matches_prefix
                                                                                        _stringappend_558_) with
                                                                               | Some
                                                                                 (shamt,(existT _ _stringappend_559_ _)) =>
                                                                                  match (string_drop
                                                                                           _stringappend_558_
                                                                                           (build_ex _stringappend_559_)) with
                                                                                  | "" => true
                                                                                  | _ => false
                                                                                  end
                                                                               | None => false
                                                                               end)) then
                                                                            true
                                                                          else false
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__290 : bool =>
                                             returnm ((if (w__290) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__291 : bool =>
                                          returnm ((if (w__291) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__292 : bool =>
                                       (if (w__292) then
                                          (match (shiftiwop_mnemonic_matches_prefix
                                                    _stringappend_381_) with
                                           | Some (op,(existT _ _stringappend_549_ _)) =>
                                              returnm (op, build_ex _stringappend_549_)
                                           | _ =>
                                              exit tt  : M ((sopw * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((sopw * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_549_ _) =>
                                          let _stringappend_550_ :=
                                            string_drop _stringappend_381_
                                              (build_ex _stringappend_549_) in
                                          (match (spc_matches_prefix _stringappend_550_) with
                                           | Some (tt,(existT _ _stringappend_551_ _)) =>
                                              returnm (tt, build_ex _stringappend_551_)
                                           | _ =>
                                              exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_551_ _) =>
                                          let _stringappend_552_ :=
                                            string_drop _stringappend_550_
                                              (build_ex _stringappend_551_) in
                                          (match (reg_name_matches_prefix _stringappend_552_) with
                                           | Some (rd,(existT _ _stringappend_553_ _)) =>
                                              returnm (rd, build_ex _stringappend_553_)
                                           | _ =>
                                              exit tt
                                               : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_553_ _) =>
                                          let _stringappend_554_ :=
                                            string_drop _stringappend_552_
                                              (build_ex _stringappend_553_) in
                                          sep_matches_prefix _stringappend_554_ >>= fun w__299 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          (match w__299 with
                                           | Some (tt,(existT _ _stringappend_555_ _)) =>
                                              returnm (tt, build_ex _stringappend_555_)
                                           | _ =>
                                              exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_555_ _) =>
                                          let _stringappend_556_ :=
                                            string_drop _stringappend_554_
                                              (build_ex _stringappend_555_) in
                                          (match (reg_name_matches_prefix _stringappend_556_) with
                                           | Some (rs1,(existT _ _stringappend_557_ _)) =>
                                              returnm (rs1, build_ex _stringappend_557_)
                                           | _ =>
                                              exit tt
                                               : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_557_ _) =>
                                          let _stringappend_558_ :=
                                            string_drop _stringappend_556_
                                              (build_ex _stringappend_557_) in
                                          (match (hex_bits_5_matches_prefix _stringappend_558_) with
                                           | Some (shamt,(existT _ _stringappend_559_ _)) =>
                                              returnm (shamt, build_ex _stringappend_559_)
                                           | _ =>
                                              exit tt
                                               : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(shamt, existT _ _stringappend_559_ _) =>
                                          (match (string_drop _stringappend_558_
                                                    (build_ex _stringappend_559_)) with
                                           | "" => returnm (true  : bool)
                                           | _ => exit tt  : M (bool)
                                           end)
                                           : M (bool)
                                        else
                                          match (mul_mnemonic_matches_prefix _stringappend_381_) with
                                          | Some
                                            ((high, signed1, signed2),(existT _ _stringappend_561_ _)) =>
                                             let _stringappend_562_ :=
                                               string_drop _stringappend_381_
                                                 (build_ex _stringappend_561_) in
                                             match (spc_matches_prefix _stringappend_562_) with
                                             | Some (tt,(existT _ _stringappend_563_ _)) =>
                                                let _stringappend_564_ :=
                                                  string_drop _stringappend_562_
                                                    (build_ex _stringappend_563_) in
                                                match (reg_name_matches_prefix _stringappend_564_) with
                                                | Some (rd,(existT _ _stringappend_565_ _)) =>
                                                   let _stringappend_566_ :=
                                                     string_drop _stringappend_564_
                                                       (build_ex _stringappend_565_) in
                                                   sep_matches_prefix _stringappend_566_ >>= fun w__308 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__308 with
                                                   | Some (tt,(existT _ _stringappend_567_ _)) =>
                                                      let _stringappend_568_ :=
                                                        string_drop _stringappend_566_
                                                          (build_ex _stringappend_567_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_568_) with
                                                      | Some (rs1,(existT _ _stringappend_569_ _)) =>
                                                         let _stringappend_570_ :=
                                                           string_drop _stringappend_568_
                                                             (build_ex _stringappend_569_) in
                                                         sep_matches_prefix _stringappend_570_ >>= fun w__309 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         returnm ((if ((match w__309 with
                                                                        | Some
                                                                          (tt,(existT _ _stringappend_571_ _)) =>
                                                                           let _stringappend_572_ :=
                                                                             string_drop
                                                                               _stringappend_570_
                                                                               (build_ex _stringappend_571_) in
                                                                           if ((match (reg_name_matches_prefix
                                                                                         _stringappend_572_) with
                                                                                | Some
                                                                                  (rs2,(existT _ _stringappend_573_ _)) =>
                                                                                   match (string_drop
                                                                                            _stringappend_572_
                                                                                            (build_ex _stringappend_573_)) with
                                                                                   | "" => true
                                                                                   | _ => false
                                                                                   end
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false
                                                                        | None => false
                                                                        end)) then
                                                                     true
                                                                   else false)
                                                          : bool)
                                                      | None => returnm (false  : bool)
                                                      end >>= fun w__310 : bool =>
                                                      returnm ((if (w__310) then true
                                                                else false)
                                                       : bool)
                                                   | None => returnm (false  : bool)
                                                   end >>= fun w__311 : bool =>
                                                   returnm ((if (w__311) then true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__312 : bool =>
                                                returnm ((if (w__312) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__313 : bool =>
                                             returnm ((if (w__313) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__314 : bool =>
                                          (if (w__314) then
                                             (match (mul_mnemonic_matches_prefix _stringappend_381_) with
                                              | Some
                                                ((high, signed1, signed2),(existT _ _stringappend_561_ _)) =>
                                                 returnm ((high, signed1, signed2), build_ex _stringappend_561_)
                                              | _ =>
                                                 exit tt
                                                  : M (((bool * bool * bool) * {n : Z & ArithFact (n >=
                                                   0)}))
                                              end : M (((bool * bool * bool) * {n : Z & ArithFact (n >=
                                               0)}))) >>= fun '((high, signed1, signed2), existT _ _stringappend_561_ _) =>
                                             let _stringappend_562_ :=
                                               string_drop _stringappend_381_
                                                 (build_ex _stringappend_561_) in
                                             (match (spc_matches_prefix _stringappend_562_) with
                                              | Some (tt,(existT _ _stringappend_563_ _)) =>
                                                 returnm (tt, build_ex _stringappend_563_)
                                              | _ =>
                                                 exit tt
                                                  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_563_ _) =>
                                             let _stringappend_564_ :=
                                               string_drop _stringappend_562_
                                                 (build_ex _stringappend_563_) in
                                             (match (reg_name_matches_prefix _stringappend_564_) with
                                              | Some (rd,(existT _ _stringappend_565_ _)) =>
                                                 returnm (rd, build_ex _stringappend_565_)
                                              | _ =>
                                                 exit tt
                                                  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_565_ _) =>
                                             let _stringappend_566_ :=
                                               string_drop _stringappend_564_
                                                 (build_ex _stringappend_565_) in
                                             sep_matches_prefix _stringappend_566_ >>= fun w__321 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             (match w__321 with
                                              | Some (tt,(existT _ _stringappend_567_ _)) =>
                                                 returnm (tt, build_ex _stringappend_567_)
                                              | _ =>
                                                 exit tt
                                                  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_567_ _) =>
                                             let _stringappend_568_ :=
                                               string_drop _stringappend_566_
                                                 (build_ex _stringappend_567_) in
                                             (match (reg_name_matches_prefix _stringappend_568_) with
                                              | Some (rs1,(existT _ _stringappend_569_ _)) =>
                                                 returnm (rs1, build_ex _stringappend_569_)
                                              | _ =>
                                                 exit tt
                                                  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_569_ _) =>
                                             let _stringappend_570_ :=
                                               string_drop _stringappend_568_
                                                 (build_ex _stringappend_569_) in
                                             sep_matches_prefix _stringappend_570_ >>= fun w__326 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             (match w__326 with
                                              | Some (tt,(existT _ _stringappend_571_ _)) =>
                                                 returnm (tt, build_ex _stringappend_571_)
                                              | _ =>
                                                 exit tt
                                                  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_571_ _) =>
                                             let _stringappend_572_ :=
                                               string_drop _stringappend_570_
                                                 (build_ex _stringappend_571_) in
                                             (match (reg_name_matches_prefix _stringappend_572_) with
                                              | Some (rs2,(existT _ _stringappend_573_ _)) =>
                                                 returnm (rs2, build_ex _stringappend_573_)
                                              | _ =>
                                                 exit tt
                                                  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_573_ _) =>
                                             (match (string_drop _stringappend_572_
                                                       (build_ex _stringappend_573_)) with
                                              | "" => returnm (true  : bool)
                                              | _ => exit tt  : M (bool)
                                              end)
                                              : M (bool)
                                           else
                                             and_boolM
                                               (returnm ((string_startswith _stringappend_381_ "div")
                                                 : bool))
                                               (let _stringappend_575_ :=
                                                 string_drop _stringappend_381_
                                                   (build_ex (projT1 (string_length "div"))) in
                                               match (maybe_not_u_matches_prefix _stringappend_575_) with
                                               | Some (s,(existT _ _stringappend_576_ _)) =>
                                                  let _stringappend_577_ :=
                                                    string_drop _stringappend_575_
                                                      (build_ex _stringappend_576_) in
                                                  match (spc_matches_prefix _stringappend_577_) with
                                                  | Some (tt,(existT _ _stringappend_578_ _)) =>
                                                     let _stringappend_579_ :=
                                                       string_drop _stringappend_577_
                                                         (build_ex _stringappend_578_) in
                                                     match (reg_name_matches_prefix
                                                              _stringappend_579_) with
                                                     | Some (rd,(existT _ _stringappend_580_ _)) =>
                                                        let _stringappend_581_ :=
                                                          string_drop _stringappend_579_
                                                            (build_ex _stringappend_580_) in
                                                        sep_matches_prefix _stringappend_581_ >>= fun w__333 : option ((unit * {n : Z & ArithFact (n >=
                                                          0)})) =>
                                                        match w__333 with
                                                        | Some (tt,(existT _ _stringappend_582_ _)) =>
                                                           let _stringappend_583_ :=
                                                             string_drop _stringappend_581_
                                                               (build_ex _stringappend_582_) in
                                                           match (reg_name_matches_prefix
                                                                    _stringappend_583_) with
                                                           | Some
                                                             (rs1,(existT _ _stringappend_584_ _)) =>
                                                              let _stringappend_585_ :=
                                                                string_drop _stringappend_583_
                                                                  (build_ex _stringappend_584_) in
                                                              sep_matches_prefix _stringappend_585_ >>= fun w__334 : option ((unit * {n : Z & ArithFact (n >=
                                                                0)})) =>
                                                              returnm ((if ((match w__334 with
                                                                             | Some
                                                                               (tt,(existT _ _stringappend_586_ _)) =>
                                                                                let _stringappend_587_ :=
                                                                                  string_drop
                                                                                    _stringappend_585_
                                                                                    (build_ex _stringappend_586_) in
                                                                                if ((match (reg_name_matches_prefix
                                                                                              _stringappend_587_) with
                                                                                     | Some
                                                                                       (rs2,(existT _ _stringappend_588_ _)) =>
                                                                                        match (string_drop
                                                                                                 _stringappend_587_
                                                                                                 (build_ex _stringappend_588_)) with
                                                                                        | "" => true
                                                                                        | _ => false
                                                                                        end
                                                                                     | None => false
                                                                                     end)) then
                                                                                  true
                                                                                else false
                                                                             | None => false
                                                                             end)) then
                                                                          true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__335 : bool =>
                                                           returnm ((if (w__335) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__336 : bool =>
                                                        returnm ((if (w__336) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__337 : bool =>
                                                     returnm ((if (w__337) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__338 : bool =>
                                                  returnm ((if (w__338) then true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__339 : bool =>
                                               returnm ((if (w__339) then true
                                                         else false)
                                                : bool)) >>= fun w__340 : bool =>
                                             (if (w__340) then
                                                let _stringappend_575_ :=
                                                  string_drop _stringappend_381_
                                                    (build_ex (projT1 (string_length "div"))) in
                                                (match (maybe_not_u_matches_prefix
                                                          _stringappend_575_) with
                                                 | Some (s,(existT _ _stringappend_576_ _)) =>
                                                    returnm (s, build_ex _stringappend_576_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(s, existT _ _stringappend_576_ _) =>
                                                let _stringappend_577_ :=
                                                  string_drop _stringappend_575_
                                                    (build_ex _stringappend_576_) in
                                                (match (spc_matches_prefix _stringappend_577_) with
                                                 | Some (tt,(existT _ _stringappend_578_ _)) =>
                                                    returnm (tt, build_ex _stringappend_578_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_578_ _) =>
                                                let _stringappend_579_ :=
                                                  string_drop _stringappend_577_
                                                    (build_ex _stringappend_578_) in
                                                (match (reg_name_matches_prefix _stringappend_579_) with
                                                 | Some (rd,(existT _ _stringappend_580_ _)) =>
                                                    returnm (rd, build_ex _stringappend_580_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_580_ _) =>
                                                let _stringappend_581_ :=
                                                  string_drop _stringappend_579_
                                                    (build_ex _stringappend_580_) in
                                                sep_matches_prefix _stringappend_581_ >>= fun w__347 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                (match w__347 with
                                                 | Some (tt,(existT _ _stringappend_582_ _)) =>
                                                    returnm (tt, build_ex _stringappend_582_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_582_ _) =>
                                                let _stringappend_583_ :=
                                                  string_drop _stringappend_581_
                                                    (build_ex _stringappend_582_) in
                                                (match (reg_name_matches_prefix _stringappend_583_) with
                                                 | Some (rs1,(existT _ _stringappend_584_ _)) =>
                                                    returnm (rs1, build_ex _stringappend_584_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_584_ _) =>
                                                let _stringappend_585_ :=
                                                  string_drop _stringappend_583_
                                                    (build_ex _stringappend_584_) in
                                                sep_matches_prefix _stringappend_585_ >>= fun w__352 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                (match w__352 with
                                                 | Some (tt,(existT _ _stringappend_586_ _)) =>
                                                    returnm (tt, build_ex _stringappend_586_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_586_ _) =>
                                                let _stringappend_587_ :=
                                                  string_drop _stringappend_585_
                                                    (build_ex _stringappend_586_) in
                                                (match (reg_name_matches_prefix _stringappend_587_) with
                                                 | Some (rs2,(existT _ _stringappend_588_ _)) =>
                                                    returnm (rs2, build_ex _stringappend_588_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_588_ _) =>
                                                (match (string_drop _stringappend_587_
                                                          (build_ex _stringappend_588_)) with
                                                 | "" => returnm (true  : bool)
                                                 | _ => exit tt  : M (bool)
                                                 end)
                                                 : M (bool)
                                              else
                                                and_boolM
                                                  (returnm ((string_startswith _stringappend_381_
                                                               "rem")
                                                    : bool))
                                                  (let _stringappend_590_ :=
                                                    string_drop _stringappend_381_
                                                      (build_ex (projT1 (string_length "rem"))) in
                                                  match (maybe_not_u_matches_prefix
                                                           _stringappend_590_) with
                                                  | Some (s,(existT _ _stringappend_591_ _)) =>
                                                     let _stringappend_592_ :=
                                                       string_drop _stringappend_590_
                                                         (build_ex _stringappend_591_) in
                                                     match (spc_matches_prefix _stringappend_592_) with
                                                     | Some (tt,(existT _ _stringappend_593_ _)) =>
                                                        let _stringappend_594_ :=
                                                          string_drop _stringappend_592_
                                                            (build_ex _stringappend_593_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_594_) with
                                                        | Some (rd,(existT _ _stringappend_595_ _)) =>
                                                           let _stringappend_596_ :=
                                                             string_drop _stringappend_594_
                                                               (build_ex _stringappend_595_) in
                                                           sep_matches_prefix _stringappend_596_ >>= fun w__359 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__359 with
                                                           | Some
                                                             (tt,(existT _ _stringappend_597_ _)) =>
                                                              let _stringappend_598_ :=
                                                                string_drop _stringappend_596_
                                                                  (build_ex _stringappend_597_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_598_) with
                                                              | Some
                                                                (rs1,(existT _ _stringappend_599_ _)) =>
                                                                 let _stringappend_600_ :=
                                                                   string_drop _stringappend_598_
                                                                     (build_ex _stringappend_599_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_600_ >>= fun w__360 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__360 with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_601_ _)) =>
                                                                                   let _stringappend_602_ :=
                                                                                     string_drop
                                                                                       _stringappend_600_
                                                                                       (build_ex _stringappend_601_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_602_) with
                                                                                        | Some
                                                                                          (rs2,(existT _ _stringappend_603_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_602_
                                                                                                    (build_ex _stringappend_603_)) with
                                                                                           | "" =>
                                                                                              true
                                                                                           | _ =>
                                                                                              false
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__361 : bool =>
                                                              returnm ((if (w__361) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__362 : bool =>
                                                           returnm ((if (w__362) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__363 : bool =>
                                                        returnm ((if (w__363) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__364 : bool =>
                                                     returnm ((if (w__364) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__365 : bool =>
                                                  returnm ((if (w__365) then true
                                                            else false)
                                                   : bool)) >>= fun w__366 : bool =>
                                                (if (w__366) then
                                                   let _stringappend_590_ :=
                                                     string_drop _stringappend_381_
                                                       (build_ex (projT1 (string_length "rem"))) in
                                                   (match (maybe_not_u_matches_prefix
                                                             _stringappend_590_) with
                                                    | Some (s,(existT _ _stringappend_591_ _)) =>
                                                       returnm (s, build_ex _stringappend_591_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(s, existT _ _stringappend_591_ _) =>
                                                   let _stringappend_592_ :=
                                                     string_drop _stringappend_590_
                                                       (build_ex _stringappend_591_) in
                                                   (match (spc_matches_prefix _stringappend_592_) with
                                                    | Some (tt,(existT _ _stringappend_593_ _)) =>
                                                       returnm (tt, build_ex _stringappend_593_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_593_ _) =>
                                                   let _stringappend_594_ :=
                                                     string_drop _stringappend_592_
                                                       (build_ex _stringappend_593_) in
                                                   (match (reg_name_matches_prefix
                                                             _stringappend_594_) with
                                                    | Some (rd,(existT _ _stringappend_595_ _)) =>
                                                       returnm (rd, build_ex _stringappend_595_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_595_ _) =>
                                                   let _stringappend_596_ :=
                                                     string_drop _stringappend_594_
                                                       (build_ex _stringappend_595_) in
                                                   sep_matches_prefix _stringappend_596_ >>= fun w__373 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   (match w__373 with
                                                    | Some (tt,(existT _ _stringappend_597_ _)) =>
                                                       returnm (tt, build_ex _stringappend_597_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_597_ _) =>
                                                   let _stringappend_598_ :=
                                                     string_drop _stringappend_596_
                                                       (build_ex _stringappend_597_) in
                                                   (match (reg_name_matches_prefix
                                                             _stringappend_598_) with
                                                    | Some (rs1,(existT _ _stringappend_599_ _)) =>
                                                       returnm (rs1, build_ex _stringappend_599_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_599_ _) =>
                                                   let _stringappend_600_ :=
                                                     string_drop _stringappend_598_
                                                       (build_ex _stringappend_599_) in
                                                   sep_matches_prefix _stringappend_600_ >>= fun w__378 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   (match w__378 with
                                                    | Some (tt,(existT _ _stringappend_601_ _)) =>
                                                       returnm (tt, build_ex _stringappend_601_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_601_ _) =>
                                                   let _stringappend_602_ :=
                                                     string_drop _stringappend_600_
                                                       (build_ex _stringappend_601_) in
                                                   (match (reg_name_matches_prefix
                                                             _stringappend_602_) with
                                                    | Some (rs2,(existT _ _stringappend_603_ _)) =>
                                                       returnm (rs2, build_ex _stringappend_603_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_603_ _) =>
                                                   (match (string_drop _stringappend_602_
                                                             (build_ex _stringappend_603_)) with
                                                    | "" => returnm (true  : bool)
                                                    | _ => exit tt  : M (bool)
                                                    end)
                                                    : M (bool)
                                                 else
                                                   and_boolM
                                                     (returnm ((string_startswith _stringappend_381_
                                                                  "mulw")
                                                       : bool))
                                                     (let _stringappend_605_ :=
                                                       string_drop _stringappend_381_
                                                         (build_ex (projT1 (string_length "mulw"))) in
                                                     match (spc_matches_prefix _stringappend_605_) with
                                                     | Some (tt,(existT _ _stringappend_606_ _)) =>
                                                        let _stringappend_607_ :=
                                                          string_drop _stringappend_605_
                                                            (build_ex _stringappend_606_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_607_) with
                                                        | Some (rd,(existT _ _stringappend_608_ _)) =>
                                                           let _stringappend_609_ :=
                                                             string_drop _stringappend_607_
                                                               (build_ex _stringappend_608_) in
                                                           sep_matches_prefix _stringappend_609_ >>= fun w__385 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__385 with
                                                           | Some
                                                             (tt,(existT _ _stringappend_610_ _)) =>
                                                              let _stringappend_611_ :=
                                                                string_drop _stringappend_609_
                                                                  (build_ex _stringappend_610_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_611_) with
                                                              | Some
                                                                (rs1,(existT _ _stringappend_612_ _)) =>
                                                                 let _stringappend_613_ :=
                                                                   string_drop _stringappend_611_
                                                                     (build_ex _stringappend_612_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_613_ >>= fun w__386 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__386 with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_614_ _)) =>
                                                                                   let _stringappend_615_ :=
                                                                                     string_drop
                                                                                       _stringappend_613_
                                                                                       (build_ex _stringappend_614_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_615_) with
                                                                                        | Some
                                                                                          (rs2,(existT _ _stringappend_616_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_615_
                                                                                                    (build_ex _stringappend_616_)) with
                                                                                           | "" =>
                                                                                              true
                                                                                           | _ =>
                                                                                              false
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__387 : bool =>
                                                              returnm ((if (w__387) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__388 : bool =>
                                                           returnm ((if (w__388) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__389 : bool =>
                                                        returnm ((if (w__389) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__390 : bool =>
                                                     returnm ((if (w__390) then true
                                                               else false)
                                                      : bool)) >>= fun w__391 : bool =>
                                                   (if (w__391) then
                                                      let _stringappend_605_ :=
                                                        string_drop _stringappend_381_
                                                          (build_ex (projT1 (string_length "mulw"))) in
                                                      (match (spc_matches_prefix _stringappend_605_) with
                                                       | Some (tt,(existT _ _stringappend_606_ _)) =>
                                                          returnm (tt, build_ex _stringappend_606_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_606_ _) =>
                                                      let _stringappend_607_ :=
                                                        string_drop _stringappend_605_
                                                          (build_ex _stringappend_606_) in
                                                      (match (reg_name_matches_prefix
                                                                _stringappend_607_) with
                                                       | Some (rd,(existT _ _stringappend_608_ _)) =>
                                                          returnm (rd, build_ex _stringappend_608_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                            0)}))
                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                        0)}))) >>= fun '(rd, existT _ _stringappend_608_ _) =>
                                                      let _stringappend_609_ :=
                                                        string_drop _stringappend_607_
                                                          (build_ex _stringappend_608_) in
                                                      sep_matches_prefix _stringappend_609_ >>= fun w__396 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      (match w__396 with
                                                       | Some (tt,(existT _ _stringappend_610_ _)) =>
                                                          returnm (tt, build_ex _stringappend_610_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_610_ _) =>
                                                      let _stringappend_611_ :=
                                                        string_drop _stringappend_609_
                                                          (build_ex _stringappend_610_) in
                                                      (match (reg_name_matches_prefix
                                                                _stringappend_611_) with
                                                       | Some (rs1,(existT _ _stringappend_612_ _)) =>
                                                          returnm (rs1, build_ex _stringappend_612_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                            0)}))
                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                        0)}))) >>= fun '(rs1, existT _ _stringappend_612_ _) =>
                                                      let _stringappend_613_ :=
                                                        string_drop _stringappend_611_
                                                          (build_ex _stringappend_612_) in
                                                      sep_matches_prefix _stringappend_613_ >>= fun w__401 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      (match w__401 with
                                                       | Some (tt,(existT _ _stringappend_614_ _)) =>
                                                          returnm (tt, build_ex _stringappend_614_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_614_ _) =>
                                                      let _stringappend_615_ :=
                                                        string_drop _stringappend_613_
                                                          (build_ex _stringappend_614_) in
                                                      (match (reg_name_matches_prefix
                                                                _stringappend_615_) with
                                                       | Some (rs2,(existT _ _stringappend_616_ _)) =>
                                                          returnm (rs2, build_ex _stringappend_616_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                            0)}))
                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                        0)}))) >>= fun '(rs2, existT _ _stringappend_616_ _) =>
                                                      (match (string_drop _stringappend_615_
                                                                (build_ex _stringappend_616_)) with
                                                       | "" => returnm (true  : bool)
                                                       | _ => exit tt  : M (bool)
                                                       end)
                                                       : M (bool)
                                                    else
                                                      and_boolM
                                                        (returnm ((string_startswith
                                                                     _stringappend_381_ "div")
                                                          : bool))
                                                        (let _stringappend_618_ :=
                                                          string_drop _stringappend_381_
                                                            (build_ex (projT1 (string_length "div"))) in
                                                        match (maybe_not_u_matches_prefix
                                                                 _stringappend_618_) with
                                                        | Some (s,(existT _ _stringappend_619_ _)) =>
                                                           let _stringappend_620_ :=
                                                             string_drop _stringappend_618_
                                                               (build_ex _stringappend_619_) in
                                                           and_boolM
                                                             (returnm ((string_startswith
                                                                          _stringappend_620_ "w")
                                                               : bool))
                                                             (let _stringappend_621_ :=
                                                               string_drop _stringappend_620_
                                                                 (build_ex (projT1 (string_length
                                                                                      "w"))) in
                                                             match (spc_matches_prefix
                                                                      _stringappend_621_) with
                                                             | Some
                                                               (tt,(existT _ _stringappend_622_ _)) =>
                                                                let _stringappend_623_ :=
                                                                  string_drop _stringappend_621_
                                                                    (build_ex _stringappend_622_) in
                                                                match (reg_name_matches_prefix
                                                                         _stringappend_623_) with
                                                                | Some
                                                                  (rd,(existT _ _stringappend_624_ _)) =>
                                                                   let _stringappend_625_ :=
                                                                     string_drop _stringappend_623_
                                                                       (build_ex _stringappend_624_) in
                                                                   sep_matches_prefix
                                                                     _stringappend_625_ >>= fun w__408 : option ((unit * {n : Z & ArithFact (n >=
                                                                     0)})) =>
                                                                   match w__408 with
                                                                   | Some
                                                                     (tt,(existT _ _stringappend_626_ _)) =>
                                                                      let _stringappend_627_ :=
                                                                        string_drop
                                                                          _stringappend_625_
                                                                          (build_ex _stringappend_626_) in
                                                                      match (reg_name_matches_prefix
                                                                               _stringappend_627_) with
                                                                      | Some
                                                                        (rs1,(existT _ _stringappend_628_ _)) =>
                                                                         let _stringappend_629_ :=
                                                                           string_drop
                                                                             _stringappend_627_
                                                                             (build_ex _stringappend_628_) in
                                                                         sep_matches_prefix
                                                                           _stringappend_629_ >>= fun w__409 : option ((unit * {n : Z & ArithFact (n >=
                                                                           0)})) =>
                                                                         returnm ((if ((match w__409 with
                                                                                        | Some
                                                                                          (tt,(existT _ _stringappend_630_ _)) =>
                                                                                           let _stringappend_631_ :=
                                                                                             string_drop
                                                                                               _stringappend_629_
                                                                                               (build_ex _stringappend_630_) in
                                                                                           if ((match (reg_name_matches_prefix
                                                                                                         _stringappend_631_) with
                                                                                                | Some
                                                                                                  (rs2,(existT _ _stringappend_632_ _)) =>
                                                                                                   match (string_drop
                                                                                                            _stringappend_631_
                                                                                                            (build_ex _stringappend_632_)) with
                                                                                                   | "" =>
                                                                                                      true
                                                                                                   | _ =>
                                                                                                      false
                                                                                                   end
                                                                                                | None =>
                                                                                                   false
                                                                                                end))
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__410 : bool =>
                                                                      returnm ((if (w__410) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__411 : bool =>
                                                                   returnm ((if (w__411) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__412 : bool =>
                                                                returnm ((if (w__412) then true
                                                                          else false)
                                                                 : bool)
                                                             | None => returnm (false  : bool)
                                                             end >>= fun w__413 : bool =>
                                                             returnm ((if (w__413) then true
                                                                       else false)
                                                              : bool)) >>= fun w__414 : bool =>
                                                           returnm ((if (w__414) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__415 : bool =>
                                                        returnm ((if (w__415) then true
                                                                  else false)
                                                         : bool)) >>= fun w__416 : bool =>
                                                      (if (w__416) then
                                                         let _stringappend_618_ :=
                                                           string_drop _stringappend_381_
                                                             (build_ex (projT1 (string_length "div"))) in
                                                         (match (maybe_not_u_matches_prefix
                                                                   _stringappend_618_) with
                                                          | Some (s,(existT _ _stringappend_619_ _)) =>
                                                             returnm (s, build_ex _stringappend_619_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((bool * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((bool * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(s, existT _ _stringappend_619_ _) =>
                                                         let _stringappend_620_ :=
                                                           string_drop _stringappend_618_
                                                             (build_ex _stringappend_619_) in
                                                         let _stringappend_621_ :=
                                                           string_drop _stringappend_620_
                                                             (build_ex (projT1 (string_length "w"))) in
                                                         (match (spc_matches_prefix
                                                                   _stringappend_621_) with
                                                          | Some
                                                            (tt,(existT _ _stringappend_622_ _)) =>
                                                             returnm (tt, build_ex _stringappend_622_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(tt, existT _ _stringappend_622_ _) =>
                                                         let _stringappend_623_ :=
                                                           string_drop _stringappend_621_
                                                             (build_ex _stringappend_622_) in
                                                         (match (reg_name_matches_prefix
                                                                   _stringappend_623_) with
                                                          | Some
                                                            (rd,(existT _ _stringappend_624_ _)) =>
                                                             returnm (rd, build_ex _stringappend_624_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(rd, existT _ _stringappend_624_ _) =>
                                                         let _stringappend_625_ :=
                                                           string_drop _stringappend_623_
                                                             (build_ex _stringappend_624_) in
                                                         sep_matches_prefix _stringappend_625_ >>= fun w__423 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         (match w__423 with
                                                          | Some
                                                            (tt,(existT _ _stringappend_626_ _)) =>
                                                             returnm (tt, build_ex _stringappend_626_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(tt, existT _ _stringappend_626_ _) =>
                                                         let _stringappend_627_ :=
                                                           string_drop _stringappend_625_
                                                             (build_ex _stringappend_626_) in
                                                         (match (reg_name_matches_prefix
                                                                   _stringappend_627_) with
                                                          | Some
                                                            (rs1,(existT _ _stringappend_628_ _)) =>
                                                             returnm (rs1, build_ex _stringappend_628_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(rs1, existT _ _stringappend_628_ _) =>
                                                         let _stringappend_629_ :=
                                                           string_drop _stringappend_627_
                                                             (build_ex _stringappend_628_) in
                                                         sep_matches_prefix _stringappend_629_ >>= fun w__428 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         (match w__428 with
                                                          | Some
                                                            (tt,(existT _ _stringappend_630_ _)) =>
                                                             returnm (tt, build_ex _stringappend_630_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(tt, existT _ _stringappend_630_ _) =>
                                                         let _stringappend_631_ :=
                                                           string_drop _stringappend_629_
                                                             (build_ex _stringappend_630_) in
                                                         (match (reg_name_matches_prefix
                                                                   _stringappend_631_) with
                                                          | Some
                                                            (rs2,(existT _ _stringappend_632_ _)) =>
                                                             returnm (rs2, build_ex _stringappend_632_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(rs2, existT _ _stringappend_632_ _) =>
                                                         (match (string_drop _stringappend_631_
                                                                   (build_ex _stringappend_632_)) with
                                                          | "" => returnm (true  : bool)
                                                          | _ => exit tt  : M (bool)
                                                          end)
                                                          : M (bool)
                                                       else
                                                         and_boolM
                                                           (returnm ((string_startswith
                                                                        _stringappend_381_ "rem")
                                                             : bool))
                                                           (let _stringappend_634_ :=
                                                             string_drop _stringappend_381_
                                                               (build_ex (projT1 (string_length
                                                                                    "rem"))) in
                                                           match (maybe_not_u_matches_prefix
                                                                    _stringappend_634_) with
                                                           | Some
                                                             (s,(existT _ _stringappend_635_ _)) =>
                                                              let _stringappend_636_ :=
                                                                string_drop _stringappend_634_
                                                                  (build_ex _stringappend_635_) in
                                                              and_boolM
                                                                (returnm ((string_startswith
                                                                             _stringappend_636_ "w")
                                                                  : bool))
                                                                (let _stringappend_637_ :=
                                                                  string_drop _stringappend_636_
                                                                    (build_ex (projT1 (string_length
                                                                                         "w"))) in
                                                                match (spc_matches_prefix
                                                                         _stringappend_637_) with
                                                                | Some
                                                                  (tt,(existT _ _stringappend_638_ _)) =>
                                                                   let _stringappend_639_ :=
                                                                     string_drop _stringappend_637_
                                                                       (build_ex _stringappend_638_) in
                                                                   match (reg_name_matches_prefix
                                                                            _stringappend_639_) with
                                                                   | Some
                                                                     (rd,(existT _ _stringappend_640_ _)) =>
                                                                      let _stringappend_641_ :=
                                                                        string_drop
                                                                          _stringappend_639_
                                                                          (build_ex _stringappend_640_) in
                                                                      sep_matches_prefix
                                                                        _stringappend_641_ >>= fun w__435 : option ((unit * {n : Z & ArithFact (n >=
                                                                        0)})) =>
                                                                      match w__435 with
                                                                      | Some
                                                                        (tt,(existT _ _stringappend_642_ _)) =>
                                                                         let _stringappend_643_ :=
                                                                           string_drop
                                                                             _stringappend_641_
                                                                             (build_ex _stringappend_642_) in
                                                                         match (reg_name_matches_prefix
                                                                                  _stringappend_643_) with
                                                                         | Some
                                                                           (rs1,(existT _ _stringappend_644_ _)) =>
                                                                            let _stringappend_645_ :=
                                                                              string_drop
                                                                                _stringappend_643_
                                                                                (build_ex _stringappend_644_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_645_ >>= fun w__436 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            returnm ((if ((match w__436 with
                                                                                           | Some
                                                                                             (tt,(existT _ _stringappend_646_ _)) =>
                                                                                              let _stringappend_647_ :=
                                                                                                string_drop
                                                                                                  _stringappend_645_
                                                                                                  (build_ex _stringappend_646_) in
                                                                                              if ((match (reg_name_matches_prefix
                                                                                                            _stringappend_647_) with
                                                                                                   | Some
                                                                                                     (rs2,(existT _ _stringappend_648_ _)) =>
                                                                                                      match (string_drop
                                                                                                               _stringappend_647_
                                                                                                               (build_ex _stringappend_648_)) with
                                                                                                      | "" =>
                                                                                                         true
                                                                                                      | _ =>
                                                                                                         false
                                                                                                      end
                                                                                                   | None =>
                                                                                                      false
                                                                                                   end))
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false
                                                                                           | None =>
                                                                                              false
                                                                                           end))
                                                                                      then
                                                                                        true
                                                                                      else false)
                                                                             : bool)
                                                                         | None =>
                                                                            returnm (false  : bool)
                                                                         end >>= fun w__437 : bool =>
                                                                         returnm ((if (w__437) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__438 : bool =>
                                                                      returnm ((if (w__438) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__439 : bool =>
                                                                   returnm ((if (w__439) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__440 : bool =>
                                                                returnm ((if (w__440) then true
                                                                          else false)
                                                                 : bool)) >>= fun w__441 : bool =>
                                                              returnm ((if (w__441) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__442 : bool =>
                                                           returnm ((if (w__442) then true
                                                                     else false)
                                                            : bool)) >>= fun w__443 : bool =>
                                                         (if (w__443) then
                                                            let _stringappend_634_ :=
                                                              string_drop _stringappend_381_
                                                                (build_ex (projT1 (string_length
                                                                                     "rem"))) in
                                                            (match (maybe_not_u_matches_prefix
                                                                      _stringappend_634_) with
                                                             | Some
                                                               (s,(existT _ _stringappend_635_ _)) =>
                                                                returnm (s, build_ex _stringappend_635_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((bool * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((bool * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(s, existT _ _stringappend_635_ _) =>
                                                            let _stringappend_636_ :=
                                                              string_drop _stringappend_634_
                                                                (build_ex _stringappend_635_) in
                                                            let _stringappend_637_ :=
                                                              string_drop _stringappend_636_
                                                                (build_ex (projT1 (string_length "w"))) in
                                                            (match (spc_matches_prefix
                                                                      _stringappend_637_) with
                                                             | Some
                                                               (tt,(existT _ _stringappend_638_ _)) =>
                                                                returnm (tt, build_ex _stringappend_638_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(tt, existT _ _stringappend_638_ _) =>
                                                            let _stringappend_639_ :=
                                                              string_drop _stringappend_637_
                                                                (build_ex _stringappend_638_) in
                                                            (match (reg_name_matches_prefix
                                                                      _stringappend_639_) with
                                                             | Some
                                                               (rd,(existT _ _stringappend_640_ _)) =>
                                                                returnm (rd, build_ex _stringappend_640_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(rd, existT _ _stringappend_640_ _) =>
                                                            let _stringappend_641_ :=
                                                              string_drop _stringappend_639_
                                                                (build_ex _stringappend_640_) in
                                                            sep_matches_prefix _stringappend_641_ >>= fun w__450 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            (match w__450 with
                                                             | Some
                                                               (tt,(existT _ _stringappend_642_ _)) =>
                                                                returnm (tt, build_ex _stringappend_642_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(tt, existT _ _stringappend_642_ _) =>
                                                            let _stringappend_643_ :=
                                                              string_drop _stringappend_641_
                                                                (build_ex _stringappend_642_) in
                                                            (match (reg_name_matches_prefix
                                                                      _stringappend_643_) with
                                                             | Some
                                                               (rs1,(existT _ _stringappend_644_ _)) =>
                                                                returnm (rs1, build_ex _stringappend_644_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(rs1, existT _ _stringappend_644_ _) =>
                                                            let _stringappend_645_ :=
                                                              string_drop _stringappend_643_
                                                                (build_ex _stringappend_644_) in
                                                            sep_matches_prefix _stringappend_645_ >>= fun w__455 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            (match w__455 with
                                                             | Some
                                                               (tt,(existT _ _stringappend_646_ _)) =>
                                                                returnm (tt, build_ex _stringappend_646_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(tt, existT _ _stringappend_646_ _) =>
                                                            let _stringappend_647_ :=
                                                              string_drop _stringappend_645_
                                                                (build_ex _stringappend_646_) in
                                                            (match (reg_name_matches_prefix
                                                                      _stringappend_647_) with
                                                             | Some
                                                               (rs2,(existT _ _stringappend_648_ _)) =>
                                                                returnm (rs2, build_ex _stringappend_648_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(rs2, existT _ _stringappend_648_ _) =>
                                                            (match (string_drop _stringappend_647_
                                                                      (build_ex _stringappend_648_)) with
                                                             | "" => returnm (true  : bool)
                                                             | _ => exit tt  : M (bool)
                                                             end)
                                                             : M (bool)
                                                          else
                                                            and_boolM
                                                              (returnm ((string_startswith
                                                                           _stringappend_381_
                                                                           "fence")
                                                                : bool))
                                                              (let _stringappend_650_ :=
                                                                string_drop _stringappend_381_
                                                                  (build_ex (projT1 (string_length
                                                                                       "fence"))) in
                                                              match (spc_matches_prefix
                                                                       _stringappend_650_) with
                                                              | Some
                                                                (tt,(existT _ _stringappend_651_ _)) =>
                                                                 let _stringappend_652_ :=
                                                                   string_drop _stringappend_650_
                                                                     (build_ex _stringappend_651_) in
                                                                 fence_bits_matches_prefix
                                                                   _stringappend_652_ >>= fun w__462 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 match w__462 with
                                                                 | Some
                                                                   (pred,(existT _ _stringappend_653_ _)) =>
                                                                    let _stringappend_654_ :=
                                                                      string_drop _stringappend_652_
                                                                        (build_ex _stringappend_653_) in
                                                                    sep_matches_prefix
                                                                      _stringappend_654_ >>= fun w__463 : option ((unit * {n : Z & ArithFact (n >=
                                                                      0)})) =>
                                                                    match w__463 with
                                                                    | Some
                                                                      (tt,(existT _ _stringappend_655_ _)) =>
                                                                       let _stringappend_656_ :=
                                                                         string_drop
                                                                           _stringappend_654_
                                                                           (build_ex _stringappend_655_) in
                                                                       fence_bits_matches_prefix
                                                                         _stringappend_656_ >>= fun w__464 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                         0)})) =>
                                                                       returnm ((if ((match w__464 with
                                                                                      | Some
                                                                                        (succ,(existT _ _stringappend_657_ _)) =>
                                                                                         match (string_drop
                                                                                                  _stringappend_656_
                                                                                                  (build_ex _stringappend_657_)) with
                                                                                         | "" =>
                                                                                            true
                                                                                         | _ =>
                                                                                            false
                                                                                         end
                                                                                      | None =>
                                                                                         false
                                                                                      end)) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)
                                                                    | None =>
                                                                       returnm (false  : bool)
                                                                    end >>= fun w__465 : bool =>
                                                                    returnm ((if (w__465) then true
                                                                              else false)
                                                                     : bool)
                                                                 | None => returnm (false  : bool)
                                                                 end >>= fun w__466 : bool =>
                                                                 returnm ((if (w__466) then true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__467 : bool =>
                                                              returnm ((if (w__467) then true
                                                                        else false)
                                                               : bool)) >>= fun w__468 : bool =>
                                                            (if (w__468) then
                                                               let _stringappend_650_ :=
                                                                 string_drop _stringappend_381_
                                                                   (build_ex (projT1 (string_length
                                                                                        "fence"))) in
                                                               (match (spc_matches_prefix
                                                                         _stringappend_650_) with
                                                                | Some
                                                                  (tt,(existT _ _stringappend_651_ _)) =>
                                                                   returnm (tt, build_ex _stringappend_651_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_651_ _) =>
                                                               let _stringappend_652_ :=
                                                                 string_drop _stringappend_650_
                                                                   (build_ex _stringappend_651_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_652_ >>= fun w__471 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               (match w__471 with
                                                                | Some
                                                                  (pred,(existT _ _stringappend_653_ _)) =>
                                                                   returnm (pred, build_ex _stringappend_653_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(pred, existT _ _stringappend_653_ _) =>
                                                               let _stringappend_654_ :=
                                                                 string_drop _stringappend_652_
                                                                   (build_ex _stringappend_653_) in
                                                               sep_matches_prefix _stringappend_654_ >>= fun w__474 : option ((unit * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               (match w__474 with
                                                                | Some
                                                                  (tt,(existT _ _stringappend_655_ _)) =>
                                                                   returnm (tt, build_ex _stringappend_655_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_655_ _) =>
                                                               let _stringappend_656_ :=
                                                                 string_drop _stringappend_654_
                                                                   (build_ex _stringappend_655_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_656_ >>= fun w__477 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               (match w__477 with
                                                                | Some
                                                                  (succ,(existT _ _stringappend_657_ _)) =>
                                                                   returnm (succ, build_ex _stringappend_657_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(succ, existT _ _stringappend_657_ _) =>
                                                               (match (string_drop
                                                                         _stringappend_656_
                                                                         (build_ex _stringappend_657_)) with
                                                                | "" => returnm (true  : bool)
                                                                | _ => exit tt  : M (bool)
                                                                end)
                                                                : M (bool)
                                                             else
                                                               (match _stringappend_381_ with
                                                                | "fence.i" =>
                                                                   returnm (true  : bool)
                                                                | "ecall" => returnm (true  : bool)
                                                                | "mret" => returnm (true  : bool)
                                                                | "sret" => returnm (true  : bool)
                                                                | "ebreak" => returnm (true  : bool)
                                                                | "wfi" => returnm (true  : bool)
                                                                | _stringappend_381_ =>
                                                                   and_boolM
                                                                     (returnm ((string_startswith
                                                                                  _stringappend_381_
                                                                                  "sfence.vma")
                                                                       : bool))
                                                                     (let _stringappend_659_ :=
                                                                       string_drop
                                                                         _stringappend_381_
                                                                         (build_ex (projT1 (string_length
                                                                                              "sfence.vma"))) in
                                                                     match (spc_matches_prefix
                                                                              _stringappend_659_) with
                                                                     | Some
                                                                       (tt,(existT _ _stringappend_660_ _)) =>
                                                                        let _stringappend_661_ :=
                                                                          string_drop
                                                                            _stringappend_659_
                                                                            (build_ex _stringappend_660_) in
                                                                        match (reg_name_matches_prefix
                                                                                 _stringappend_661_) with
                                                                        | Some
                                                                          (rs1,(existT _ _stringappend_662_ _)) =>
                                                                           let _stringappend_663_ :=
                                                                             string_drop
                                                                               _stringappend_661_
                                                                               (build_ex _stringappend_662_) in
                                                                           sep_matches_prefix
                                                                             _stringappend_663_ >>= fun w__482 : option ((unit * {n : Z & ArithFact (n >=
                                                                             0)})) =>
                                                                           returnm ((if ((match w__482 with
                                                                                          | Some
                                                                                            (tt,(existT _ _stringappend_664_ _)) =>
                                                                                             let _stringappend_665_ :=
                                                                                               string_drop
                                                                                                 _stringappend_663_
                                                                                                 (build_ex _stringappend_664_) in
                                                                                             if ((match (reg_name_matches_prefix
                                                                                                           _stringappend_665_) with
                                                                                                  | Some
                                                                                                    (rs2,(existT _ _stringappend_666_ _)) =>
                                                                                                     match (string_drop
                                                                                                              _stringappend_665_
                                                                                                              (build_ex _stringappend_666_)) with
                                                                                                     | "" =>
                                                                                                        true
                                                                                                     | _ =>
                                                                                                        false
                                                                                                     end
                                                                                                  | None =>
                                                                                                     false
                                                                                                  end))
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false
                                                                                          | None =>
                                                                                             false
                                                                                          end)) then
                                                                                       true
                                                                                     else false)
                                                                            : bool)
                                                                        | None =>
                                                                           returnm (false  : bool)
                                                                        end >>= fun w__483 : bool =>
                                                                        returnm ((if (w__483) then
                                                                                    true
                                                                                  else false)
                                                                         : bool)
                                                                     | None =>
                                                                        returnm (false  : bool)
                                                                     end >>= fun w__484 : bool =>
                                                                     returnm ((if (w__484) then true
                                                                               else false)
                                                                      : bool)) >>= fun w__485 : bool =>
                                                                   (if (w__485) then
                                                                      let _stringappend_659_ :=
                                                                        string_drop
                                                                          _stringappend_381_
                                                                          (build_ex (projT1 (string_length
                                                                                               "sfence.vma"))) in
                                                                      (match (spc_matches_prefix
                                                                                _stringappend_659_) with
                                                                       | Some
                                                                         (tt,(existT _ _stringappend_660_ _)) =>
                                                                          returnm (tt, build_ex _stringappend_660_)
                                                                       | _ =>
                                                                          exit tt
                                                                           : M ((unit * {n : Z & ArithFact (n >=
                                                                            0)}))
                                                                       end : M ((unit * {n : Z & ArithFact (n >=
                                                                        0)}))) >>= fun '(tt, existT _ _stringappend_660_ _) =>
                                                                      let _stringappend_661_ :=
                                                                        string_drop
                                                                          _stringappend_659_
                                                                          (build_ex _stringappend_660_) in
                                                                      (match (reg_name_matches_prefix
                                                                                _stringappend_661_) with
                                                                       | Some
                                                                         (rs1,(existT _ _stringappend_662_ _)) =>
                                                                          returnm (rs1, build_ex _stringappend_662_)
                                                                       | _ =>
                                                                          exit tt
                                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                            0)}))
                                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                        0)}))) >>= fun '(rs1, existT _ _stringappend_662_ _) =>
                                                                      let _stringappend_663_ :=
                                                                        string_drop
                                                                          _stringappend_661_
                                                                          (build_ex _stringappend_662_) in
                                                                      sep_matches_prefix
                                                                        _stringappend_663_ >>= fun w__490 : option ((unit * {n : Z & ArithFact (n >=
                                                                        0)})) =>
                                                                      (match w__490 with
                                                                       | Some
                                                                         (tt,(existT _ _stringappend_664_ _)) =>
                                                                          returnm (tt, build_ex _stringappend_664_)
                                                                       | _ =>
                                                                          exit tt
                                                                           : M ((unit * {n : Z & ArithFact (n >=
                                                                            0)}))
                                                                       end : M ((unit * {n : Z & ArithFact (n >=
                                                                        0)}))) >>= fun '(tt, existT _ _stringappend_664_ _) =>
                                                                      let _stringappend_665_ :=
                                                                        string_drop
                                                                          _stringappend_663_
                                                                          (build_ex _stringappend_664_) in
                                                                      (match (reg_name_matches_prefix
                                                                                _stringappend_665_) with
                                                                       | Some
                                                                         (rs2,(existT _ _stringappend_666_ _)) =>
                                                                          returnm (rs2, build_ex _stringappend_666_)
                                                                       | _ =>
                                                                          exit tt
                                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                            0)}))
                                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                        0)}))) >>= fun '(rs2, existT _ _stringappend_666_ _) =>
                                                                      (match (string_drop
                                                                                _stringappend_665_
                                                                                (build_ex _stringappend_666_)) with
                                                                       | "" =>
                                                                          returnm (true  : bool)
                                                                       | _ => exit tt  : M (bool)
                                                                       end)
                                                                       : M (bool)
                                                                    else
                                                                      and_boolM
                                                                        (returnm ((string_startswith
                                                                                     _stringappend_381_
                                                                                     "lr.")
                                                                          : bool))
                                                                        (let _stringappend_668_ :=
                                                                          string_drop
                                                                            _stringappend_381_
                                                                            (build_ex (projT1 (string_length
                                                                                                 "lr."))) in
                                                                        match (maybe_aq_matches_prefix
                                                                                 _stringappend_668_) with
                                                                        | Some
                                                                          (aq,(existT _ _stringappend_669_ _)) =>
                                                                           let _stringappend_670_ :=
                                                                             string_drop
                                                                               _stringappend_668_
                                                                               (build_ex _stringappend_669_) in
                                                                           match (maybe_rl_matches_prefix
                                                                                    _stringappend_670_) with
                                                                           | Some
                                                                             (rl,(existT _ _stringappend_671_ _)) =>
                                                                              let _stringappend_672_ :=
                                                                                string_drop
                                                                                  _stringappend_670_
                                                                                  (build_ex _stringappend_671_) in
                                                                              match (size_mnemonic_matches_prefix
                                                                                       _stringappend_672_) with
                                                                              | Some
                                                                                (size,(existT _ _stringappend_673_ _)) =>
                                                                                 let _stringappend_674_ :=
                                                                                   string_drop
                                                                                     _stringappend_672_
                                                                                     (build_ex _stringappend_673_) in
                                                                                 match (spc_matches_prefix
                                                                                          _stringappend_674_) with
                                                                                 | Some
                                                                                   (tt,(existT _ _stringappend_675_ _)) =>
                                                                                    let _stringappend_676_ :=
                                                                                      string_drop
                                                                                        _stringappend_674_
                                                                                        (build_ex _stringappend_675_) in
                                                                                    match (reg_name_matches_prefix
                                                                                             _stringappend_676_) with
                                                                                    | Some
                                                                                      (rd,(existT _ _stringappend_677_ _)) =>
                                                                                       let _stringappend_678_ :=
                                                                                         string_drop
                                                                                           _stringappend_676_
                                                                                           (build_ex _stringappend_677_) in
                                                                                       sep_matches_prefix
                                                                                         _stringappend_678_ >>= fun w__497 : option ((unit * {n : Z & ArithFact (n >=
                                                                                         0)})) =>
                                                                                       returnm ((if ((match w__497 with
                                                                                                      | Some
                                                                                                        (tt,(existT _ _stringappend_679_ _)) =>
                                                                                                         let _stringappend_680_ :=
                                                                                                           string_drop
                                                                                                             _stringappend_678_
                                                                                                             (build_ex _stringappend_679_) in
                                                                                                         if
                                                                                                           ((match (reg_name_matches_prefix
                                                                                                                      _stringappend_680_) with
                                                                                                             | Some
                                                                                                               (rs1,(existT _ _stringappend_681_ _)) =>
                                                                                                                match (string_drop
                                                                                                                         _stringappend_680_
                                                                                                                         (build_ex _stringappend_681_)) with
                                                                                                                | "" =>
                                                                                                                   true
                                                                                                                | _ =>
                                                                                                                   false
                                                                                                                end
                                                                                                             | None =>
                                                                                                                false
                                                                                                             end))
                                                                                                         then
                                                                                                           true
                                                                                                         else
                                                                                                           false
                                                                                                      | None =>
                                                                                                         false
                                                                                                      end))
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__498 : bool =>
                                                                                    returnm ((if (w__498)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__499 : bool =>
                                                                                 returnm ((if (w__499)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)
                                                                              | None =>
                                                                                 returnm (false
                                                                                  : bool)
                                                                              end >>= fun w__500 : bool =>
                                                                              returnm ((if (w__500)
                                                                                        then
                                                                                          true
                                                                                        else false)
                                                                               : bool)
                                                                           | None =>
                                                                              returnm (false
                                                                               : bool)
                                                                           end >>= fun w__501 : bool =>
                                                                           returnm ((if (w__501)
                                                                                     then
                                                                                       true
                                                                                     else false)
                                                                            : bool)
                                                                        | None =>
                                                                           returnm (false  : bool)
                                                                        end >>= fun w__502 : bool =>
                                                                        returnm ((if (w__502) then
                                                                                    true
                                                                                  else false)
                                                                         : bool)) >>= fun w__503 : bool =>
                                                                      (if (w__503) then
                                                                         let _stringappend_668_ :=
                                                                           string_drop
                                                                             _stringappend_381_
                                                                             (build_ex (projT1 (string_length
                                                                                                  "lr."))) in
                                                                         (match (maybe_aq_matches_prefix
                                                                                   _stringappend_668_) with
                                                                          | Some
                                                                            (aq,(existT _ _stringappend_669_ _)) =>
                                                                             returnm (aq, build_ex _stringappend_669_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((bool * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((bool * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(aq, existT _ _stringappend_669_ _) =>
                                                                         let _stringappend_670_ :=
                                                                           string_drop
                                                                             _stringappend_668_
                                                                             (build_ex _stringappend_669_) in
                                                                         (match (maybe_rl_matches_prefix
                                                                                   _stringappend_670_) with
                                                                          | Some
                                                                            (rl,(existT _ _stringappend_671_ _)) =>
                                                                             returnm (rl, build_ex _stringappend_671_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((bool * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((bool * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(rl, existT _ _stringappend_671_ _) =>
                                                                         let _stringappend_672_ :=
                                                                           string_drop
                                                                             _stringappend_670_
                                                                             (build_ex _stringappend_671_) in
                                                                         (match (size_mnemonic_matches_prefix
                                                                                   _stringappend_672_) with
                                                                          | Some
                                                                            (size,(existT _ _stringappend_673_ _)) =>
                                                                             returnm (size, build_ex _stringappend_673_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((word_width * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((word_width * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(size, existT _ _stringappend_673_ _) =>
                                                                         let _stringappend_674_ :=
                                                                           string_drop
                                                                             _stringappend_672_
                                                                             (build_ex _stringappend_673_) in
                                                                         (match (spc_matches_prefix
                                                                                   _stringappend_674_) with
                                                                          | Some
                                                                            (tt,(existT _ _stringappend_675_ _)) =>
                                                                             returnm (tt, build_ex _stringappend_675_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(tt, existT _ _stringappend_675_ _) =>
                                                                         let _stringappend_676_ :=
                                                                           string_drop
                                                                             _stringappend_674_
                                                                             (build_ex _stringappend_675_) in
                                                                         (match (reg_name_matches_prefix
                                                                                   _stringappend_676_) with
                                                                          | Some
                                                                            (rd,(existT _ _stringappend_677_ _)) =>
                                                                             returnm (rd, build_ex _stringappend_677_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(rd, existT _ _stringappend_677_ _) =>
                                                                         let _stringappend_678_ :=
                                                                           string_drop
                                                                             _stringappend_676_
                                                                             (build_ex _stringappend_677_) in
                                                                         sep_matches_prefix
                                                                           _stringappend_678_ >>= fun w__514 : option ((unit * {n : Z & ArithFact (n >=
                                                                           0)})) =>
                                                                         (match w__514 with
                                                                          | Some
                                                                            (tt,(existT _ _stringappend_679_ _)) =>
                                                                             returnm (tt, build_ex _stringappend_679_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(tt, existT _ _stringappend_679_ _) =>
                                                                         let _stringappend_680_ :=
                                                                           string_drop
                                                                             _stringappend_678_
                                                                             (build_ex _stringappend_679_) in
                                                                         (match (reg_name_matches_prefix
                                                                                   _stringappend_680_) with
                                                                          | Some
                                                                            (rs1,(existT _ _stringappend_681_ _)) =>
                                                                             returnm (rs1, build_ex _stringappend_681_)
                                                                          | _ =>
                                                                             exit tt
                                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                               0)}))
                                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))) >>= fun '(rs1, existT _ _stringappend_681_ _) =>
                                                                         (match (string_drop
                                                                                   _stringappend_680_
                                                                                   (build_ex _stringappend_681_)) with
                                                                          | "" =>
                                                                             returnm (true  : bool)
                                                                          | _ => exit tt  : M (bool)
                                                                          end)
                                                                          : M (bool)
                                                                       else
                                                                         and_boolM
                                                                           (returnm ((string_startswith
                                                                                        _stringappend_381_
                                                                                        "sc.")
                                                                             : bool))
                                                                           (let _stringappend_683_ :=
                                                                             string_drop
                                                                               _stringappend_381_
                                                                               (build_ex (projT1 (string_length
                                                                                                    "sc."))) in
                                                                           match (maybe_aq_matches_prefix
                                                                                    _stringappend_683_) with
                                                                           | Some
                                                                             (aq,(existT _ _stringappend_684_ _)) =>
                                                                              let _stringappend_685_ :=
                                                                                string_drop
                                                                                  _stringappend_683_
                                                                                  (build_ex _stringappend_684_) in
                                                                              match (maybe_rl_matches_prefix
                                                                                       _stringappend_685_) with
                                                                              | Some
                                                                                (rl,(existT _ _stringappend_686_ _)) =>
                                                                                 let _stringappend_687_ :=
                                                                                   string_drop
                                                                                     _stringappend_685_
                                                                                     (build_ex _stringappend_686_) in
                                                                                 match (size_mnemonic_matches_prefix
                                                                                          _stringappend_687_) with
                                                                                 | Some
                                                                                   (size,(existT _ _stringappend_688_ _)) =>
                                                                                    let _stringappend_689_ :=
                                                                                      string_drop
                                                                                        _stringappend_687_
                                                                                        (build_ex _stringappend_688_) in
                                                                                    match (spc_matches_prefix
                                                                                             _stringappend_689_) with
                                                                                    | Some
                                                                                      (tt,(existT _ _stringappend_690_ _)) =>
                                                                                       let _stringappend_691_ :=
                                                                                         string_drop
                                                                                           _stringappend_689_
                                                                                           (build_ex _stringappend_690_) in
                                                                                       match (reg_name_matches_prefix
                                                                                                _stringappend_691_) with
                                                                                       | Some
                                                                                         (rd,(existT _ _stringappend_692_ _)) =>
                                                                                          let _stringappend_693_ :=
                                                                                            string_drop
                                                                                              _stringappend_691_
                                                                                              (build_ex _stringappend_692_) in
                                                                                          sep_matches_prefix
                                                                                            _stringappend_693_ >>= fun w__521 : option ((unit * {n : Z & ArithFact (n >=
                                                                                            0)})) =>
                                                                                          match w__521 with
                                                                                          | Some
                                                                                            (tt,(existT _ _stringappend_694_ _)) =>
                                                                                             let _stringappend_695_ :=
                                                                                               string_drop
                                                                                                 _stringappend_693_
                                                                                                 (build_ex _stringappend_694_) in
                                                                                             match (reg_name_matches_prefix
                                                                                                      _stringappend_695_) with
                                                                                             | Some
                                                                                               (rs1,(existT _ _stringappend_696_ _)) =>
                                                                                                let _stringappend_697_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_695_
                                                                                                    (build_ex _stringappend_696_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_697_ >>= fun w__522 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                returnm ((if
                                                                                                            ((match w__522 with
                                                                                                              | Some
                                                                                                                (tt,(existT _ _stringappend_698_ _)) =>
                                                                                                                 let _stringappend_699_ :=
                                                                                                                   string_drop
                                                                                                                     _stringappend_697_
                                                                                                                     (build_ex _stringappend_698_) in
                                                                                                                 if
                                                                                                                   ((match (reg_name_matches_prefix
                                                                                                                              _stringappend_699_) with
                                                                                                                     | Some
                                                                                                                       (rs2,(existT _ _stringappend_700_ _)) =>
                                                                                                                        match (string_drop
                                                                                                                                 _stringappend_699_
                                                                                                                                 (build_ex _stringappend_700_)) with
                                                                                                                        | "" =>
                                                                                                                           true
                                                                                                                        | _ =>
                                                                                                                           false
                                                                                                                        end
                                                                                                                     | None =>
                                                                                                                        false
                                                                                                                     end))
                                                                                                                 then
                                                                                                                   true
                                                                                                                 else
                                                                                                                   false
                                                                                                              | None =>
                                                                                                                 false
                                                                                                              end))
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__523 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__523)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__524 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__524)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__525 : bool =>
                                                                                       returnm ((if (w__525)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__526 : bool =>
                                                                                    returnm ((if (w__526)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__527 : bool =>
                                                                                 returnm ((if (w__527)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)
                                                                              | None =>
                                                                                 returnm (false
                                                                                  : bool)
                                                                              end >>= fun w__528 : bool =>
                                                                              returnm ((if (w__528)
                                                                                        then
                                                                                          true
                                                                                        else false)
                                                                               : bool)
                                                                           | None =>
                                                                              returnm (false
                                                                               : bool)
                                                                           end >>= fun w__529 : bool =>
                                                                           returnm ((if (w__529)
                                                                                     then
                                                                                       true
                                                                                     else false)
                                                                            : bool)) >>= fun w__530 : bool =>
                                                                         (if (w__530) then
                                                                            let _stringappend_683_ :=
                                                                              string_drop
                                                                                _stringappend_381_
                                                                                (build_ex (projT1 (string_length
                                                                                                     "sc."))) in
                                                                            (match (maybe_aq_matches_prefix
                                                                                      _stringappend_683_) with
                                                                             | Some
                                                                               (aq,(existT _ _stringappend_684_ _)) =>
                                                                                returnm (aq, build_ex _stringappend_684_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((bool * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((bool * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(aq, existT _ _stringappend_684_ _) =>
                                                                            let _stringappend_685_ :=
                                                                              string_drop
                                                                                _stringappend_683_
                                                                                (build_ex _stringappend_684_) in
                                                                            (match (maybe_rl_matches_prefix
                                                                                      _stringappend_685_) with
                                                                             | Some
                                                                               (rl,(existT _ _stringappend_686_ _)) =>
                                                                                returnm (rl, build_ex _stringappend_686_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((bool * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((bool * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(rl, existT _ _stringappend_686_ _) =>
                                                                            let _stringappend_687_ :=
                                                                              string_drop
                                                                                _stringappend_685_
                                                                                (build_ex _stringappend_686_) in
                                                                            (match (size_mnemonic_matches_prefix
                                                                                      _stringappend_687_) with
                                                                             | Some
                                                                               (size,(existT _ _stringappend_688_ _)) =>
                                                                                returnm (size, build_ex _stringappend_688_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((word_width * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((word_width * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(size, existT _ _stringappend_688_ _) =>
                                                                            let _stringappend_689_ :=
                                                                              string_drop
                                                                                _stringappend_687_
                                                                                (build_ex _stringappend_688_) in
                                                                            (match (spc_matches_prefix
                                                                                      _stringappend_689_) with
                                                                             | Some
                                                                               (tt,(existT _ _stringappend_690_ _)) =>
                                                                                returnm (tt, build_ex _stringappend_690_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(tt, existT _ _stringappend_690_ _) =>
                                                                            let _stringappend_691_ :=
                                                                              string_drop
                                                                                _stringappend_689_
                                                                                (build_ex _stringappend_690_) in
                                                                            (match (reg_name_matches_prefix
                                                                                      _stringappend_691_) with
                                                                             | Some
                                                                               (rd,(existT _ _stringappend_692_ _)) =>
                                                                                returnm (rd, build_ex _stringappend_692_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(rd, existT _ _stringappend_692_ _) =>
                                                                            let _stringappend_693_ :=
                                                                              string_drop
                                                                                _stringappend_691_
                                                                                (build_ex _stringappend_692_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_693_ >>= fun w__541 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            (match w__541 with
                                                                             | Some
                                                                               (tt,(existT _ _stringappend_694_ _)) =>
                                                                                returnm (tt, build_ex _stringappend_694_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(tt, existT _ _stringappend_694_ _) =>
                                                                            let _stringappend_695_ :=
                                                                              string_drop
                                                                                _stringappend_693_
                                                                                (build_ex _stringappend_694_) in
                                                                            (match (reg_name_matches_prefix
                                                                                      _stringappend_695_) with
                                                                             | Some
                                                                               (rs1,(existT _ _stringappend_696_ _)) =>
                                                                                returnm (rs1, build_ex _stringappend_696_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(rs1, existT _ _stringappend_696_ _) =>
                                                                            let _stringappend_697_ :=
                                                                              string_drop
                                                                                _stringappend_695_
                                                                                (build_ex _stringappend_696_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_697_ >>= fun w__546 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            (match w__546 with
                                                                             | Some
                                                                               (tt,(existT _ _stringappend_698_ _)) =>
                                                                                returnm (tt, build_ex _stringappend_698_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(tt, existT _ _stringappend_698_ _) =>
                                                                            let _stringappend_699_ :=
                                                                              string_drop
                                                                                _stringappend_697_
                                                                                (build_ex _stringappend_698_) in
                                                                            (match (reg_name_matches_prefix
                                                                                      _stringappend_699_) with
                                                                             | Some
                                                                               (rs2,(existT _ _stringappend_700_ _)) =>
                                                                                returnm (rs2, build_ex _stringappend_700_)
                                                                             | _ =>
                                                                                exit tt
                                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                  0)}))
                                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))) >>= fun '(rs2, existT _ _stringappend_700_ _) =>
                                                                            (match (string_drop
                                                                                      _stringappend_699_
                                                                                      (build_ex _stringappend_700_)) with
                                                                             | "" =>
                                                                                returnm (true
                                                                                 : bool)
                                                                             | _ =>
                                                                                exit tt  : M (bool)
                                                                             end)
                                                                             : M (bool)
                                                                          else
                                                                            match (amo_mnemonic_matches_prefix
                                                                                     _stringappend_381_) with
                                                                            | Some
                                                                              (op,(existT _ _stringappend_702_ _)) =>
                                                                               let _stringappend_703_ :=
                                                                                 string_drop
                                                                                   _stringappend_381_
                                                                                   (build_ex _stringappend_702_) in
                                                                               and_boolM
                                                                                 (returnm ((string_startswith
                                                                                              _stringappend_703_
                                                                                              ".")
                                                                                   : bool))
                                                                                 (let _stringappend_704_ :=
                                                                                   string_drop
                                                                                     _stringappend_703_
                                                                                     (build_ex (projT1 (string_length
                                                                                                          "."))) in
                                                                                 match (size_mnemonic_matches_prefix
                                                                                          _stringappend_704_) with
                                                                                 | Some
                                                                                   (width,(existT _ _stringappend_705_ _)) =>
                                                                                    let _stringappend_706_ :=
                                                                                      string_drop
                                                                                        _stringappend_704_
                                                                                        (build_ex _stringappend_705_) in
                                                                                    match (maybe_aq_matches_prefix
                                                                                             _stringappend_706_) with
                                                                                    | Some
                                                                                      (aq,(existT _ _stringappend_707_ _)) =>
                                                                                       let _stringappend_708_ :=
                                                                                         string_drop
                                                                                           _stringappend_706_
                                                                                           (build_ex _stringappend_707_) in
                                                                                       match (maybe_rl_matches_prefix
                                                                                                _stringappend_708_) with
                                                                                       | Some
                                                                                         (rl,(existT _ _stringappend_709_ _)) =>
                                                                                          let _stringappend_710_ :=
                                                                                            string_drop
                                                                                              _stringappend_708_
                                                                                              (build_ex _stringappend_709_) in
                                                                                          match (spc_matches_prefix
                                                                                                   _stringappend_710_) with
                                                                                          | Some
                                                                                            (tt,(existT _ _stringappend_711_ _)) =>
                                                                                             let _stringappend_712_ :=
                                                                                               string_drop
                                                                                                 _stringappend_710_
                                                                                                 (build_ex _stringappend_711_) in
                                                                                             match (reg_name_matches_prefix
                                                                                                      _stringappend_712_) with
                                                                                             | Some
                                                                                               (rd,(existT _ _stringappend_713_ _)) =>
                                                                                                let _stringappend_714_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_712_
                                                                                                    (build_ex _stringappend_713_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_714_ >>= fun w__553 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                match w__553 with
                                                                                                | Some
                                                                                                  (tt,(existT _ _stringappend_715_ _)) =>
                                                                                                   let _stringappend_716_ :=
                                                                                                     string_drop
                                                                                                       _stringappend_714_
                                                                                                       (build_ex _stringappend_715_) in
                                                                                                   match (reg_name_matches_prefix
                                                                                                            _stringappend_716_) with
                                                                                                   | Some
                                                                                                     (rs1,(existT _ _stringappend_717_ _)) =>
                                                                                                      let _stringappend_718_ :=
                                                                                                        string_drop
                                                                                                          _stringappend_716_
                                                                                                          (build_ex _stringappend_717_) in
                                                                                                      sep_matches_prefix
                                                                                                        _stringappend_718_ >>= fun w__554 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                        0)})) =>
                                                                                                      returnm ((if
                                                                                                                  ((match w__554 with
                                                                                                                    | Some
                                                                                                                      (tt,(existT _ _stringappend_719_ _)) =>
                                                                                                                       let _stringappend_720_ :=
                                                                                                                         string_drop
                                                                                                                           _stringappend_718_
                                                                                                                           (build_ex _stringappend_719_) in
                                                                                                                       if
                                                                                                                         ((match (reg_name_matches_prefix
                                                                                                                                    _stringappend_720_) with
                                                                                                                           | Some
                                                                                                                             (rs2,(existT _ _stringappend_721_ _)) =>
                                                                                                                              match (string_drop
                                                                                                                                       _stringappend_720_
                                                                                                                                       (build_ex _stringappend_721_)) with
                                                                                                                              | "" =>
                                                                                                                                 true
                                                                                                                              | _ =>
                                                                                                                                 false
                                                                                                                              end
                                                                                                                           | None =>
                                                                                                                              false
                                                                                                                           end))
                                                                                                                       then
                                                                                                                         true
                                                                                                                       else
                                                                                                                         false
                                                                                                                    | None =>
                                                                                                                       false
                                                                                                                    end))
                                                                                                                then
                                                                                                                  true
                                                                                                                else
                                                                                                                  false)
                                                                                                       : bool)
                                                                                                   | None =>
                                                                                                      returnm (false
                                                                                                       : bool)
                                                                                                   end >>= fun w__555 : bool =>
                                                                                                   returnm ((if
                                                                                                               (w__555)
                                                                                                             then
                                                                                                               true
                                                                                                             else
                                                                                                               false)
                                                                                                    : bool)
                                                                                                | None =>
                                                                                                   returnm (false
                                                                                                    : bool)
                                                                                                end >>= fun w__556 : bool =>
                                                                                                returnm ((if
                                                                                                            (w__556)
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__557 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__557)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__558 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__558)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__559 : bool =>
                                                                                       returnm ((if (w__559)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__560 : bool =>
                                                                                    returnm ((if (w__560)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__561 : bool =>
                                                                                 returnm ((if (w__561)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)) >>= fun w__562 : bool =>
                                                                               returnm ((if (w__562)
                                                                                         then
                                                                                           true
                                                                                         else false)
                                                                                : bool)
                                                                            | None =>
                                                                               returnm (false
                                                                                : bool)
                                                                            end >>= fun w__563 : bool =>
                                                                            (if (w__563) then
                                                                               (match (amo_mnemonic_matches_prefix
                                                                                         _stringappend_381_) with
                                                                                | Some
                                                                                  (op,(existT _ _stringappend_702_ _)) =>
                                                                                   returnm (op, build_ex _stringappend_702_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((amoop * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((amoop * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(op, existT _ _stringappend_702_ _) =>
                                                                               let _stringappend_703_ :=
                                                                                 string_drop
                                                                                   _stringappend_381_
                                                                                   (build_ex _stringappend_702_) in
                                                                               let _stringappend_704_ :=
                                                                                 string_drop
                                                                                   _stringappend_703_
                                                                                   (build_ex (projT1 (string_length
                                                                                                        "."))) in
                                                                               (match (size_mnemonic_matches_prefix
                                                                                         _stringappend_704_) with
                                                                                | Some
                                                                                  (width,(existT _ _stringappend_705_ _)) =>
                                                                                   returnm (width, build_ex _stringappend_705_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((word_width * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((word_width * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(width, existT _ _stringappend_705_ _) =>
                                                                               let _stringappend_706_ :=
                                                                                 string_drop
                                                                                   _stringappend_704_
                                                                                   (build_ex _stringappend_705_) in
                                                                               (match (maybe_aq_matches_prefix
                                                                                         _stringappend_706_) with
                                                                                | Some
                                                                                  (aq,(existT _ _stringappend_707_ _)) =>
                                                                                   returnm (aq, build_ex _stringappend_707_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((bool * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((bool * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(aq, existT _ _stringappend_707_ _) =>
                                                                               let _stringappend_708_ :=
                                                                                 string_drop
                                                                                   _stringappend_706_
                                                                                   (build_ex _stringappend_707_) in
                                                                               (match (maybe_rl_matches_prefix
                                                                                         _stringappend_708_) with
                                                                                | Some
                                                                                  (rl,(existT _ _stringappend_709_ _)) =>
                                                                                   returnm (rl, build_ex _stringappend_709_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((bool * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((bool * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(rl, existT _ _stringappend_709_ _) =>
                                                                               let _stringappend_710_ :=
                                                                                 string_drop
                                                                                   _stringappend_708_
                                                                                   (build_ex _stringappend_709_) in
                                                                               (match (spc_matches_prefix
                                                                                         _stringappend_710_) with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_711_ _)) =>
                                                                                   returnm (tt, build_ex _stringappend_711_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_711_ _) =>
                                                                               let _stringappend_712_ :=
                                                                                 string_drop
                                                                                   _stringappend_710_
                                                                                   (build_ex _stringappend_711_) in
                                                                               (match (reg_name_matches_prefix
                                                                                         _stringappend_712_) with
                                                                                | Some
                                                                                  (rd,(existT _ _stringappend_713_ _)) =>
                                                                                   returnm (rd, build_ex _stringappend_713_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(rd, existT _ _stringappend_713_ _) =>
                                                                               let _stringappend_714_ :=
                                                                                 string_drop
                                                                                   _stringappend_712_
                                                                                   (build_ex _stringappend_713_) in
                                                                               sep_matches_prefix
                                                                                 _stringappend_714_ >>= fun w__576 : option ((unit * {n : Z & ArithFact (n >=
                                                                                 0)})) =>
                                                                               (match w__576 with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_715_ _)) =>
                                                                                   returnm (tt, build_ex _stringappend_715_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_715_ _) =>
                                                                               let _stringappend_716_ :=
                                                                                 string_drop
                                                                                   _stringappend_714_
                                                                                   (build_ex _stringappend_715_) in
                                                                               (match (reg_name_matches_prefix
                                                                                         _stringappend_716_) with
                                                                                | Some
                                                                                  (rs1,(existT _ _stringappend_717_ _)) =>
                                                                                   returnm (rs1, build_ex _stringappend_717_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(rs1, existT _ _stringappend_717_ _) =>
                                                                               let _stringappend_718_ :=
                                                                                 string_drop
                                                                                   _stringappend_716_
                                                                                   (build_ex _stringappend_717_) in
                                                                               sep_matches_prefix
                                                                                 _stringappend_718_ >>= fun w__581 : option ((unit * {n : Z & ArithFact (n >=
                                                                                 0)})) =>
                                                                               (match w__581 with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_719_ _)) =>
                                                                                   returnm (tt, build_ex _stringappend_719_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_719_ _) =>
                                                                               let _stringappend_720_ :=
                                                                                 string_drop
                                                                                   _stringappend_718_
                                                                                   (build_ex _stringappend_719_) in
                                                                               (match (reg_name_matches_prefix
                                                                                         _stringappend_720_) with
                                                                                | Some
                                                                                  (rs2,(existT _ _stringappend_721_ _)) =>
                                                                                   returnm (rs2, build_ex _stringappend_721_)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                     0)}))
                                                                                end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))) >>= fun '(rs2, existT _ _stringappend_721_ _) =>
                                                                               (match (string_drop
                                                                                         _stringappend_720_
                                                                                         (build_ex _stringappend_721_)) with
                                                                                | "" =>
                                                                                   returnm (true
                                                                                    : bool)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M (bool)
                                                                                end)
                                                                                : M (bool)
                                                                             else
                                                                               match (csr_mnemonic_matches_prefix
                                                                                        _stringappend_381_) with
                                                                               | Some
                                                                                 (op,(existT _ _stringappend_723_ _)) =>
                                                                                  let _stringappend_724_ :=
                                                                                    string_drop
                                                                                      _stringappend_381_
                                                                                      (build_ex _stringappend_723_) in
                                                                                  and_boolM
                                                                                    (returnm ((string_startswith
                                                                                                 _stringappend_724_
                                                                                                 "i")
                                                                                      : bool))
                                                                                    (let _stringappend_725_ :=
                                                                                      string_drop
                                                                                        _stringappend_724_
                                                                                        (build_ex (projT1 (string_length
                                                                                                             "i"))) in
                                                                                    match (spc_matches_prefix
                                                                                             _stringappend_725_) with
                                                                                    | Some
                                                                                      (tt,(existT _ _stringappend_726_ _)) =>
                                                                                       let _stringappend_727_ :=
                                                                                         string_drop
                                                                                           _stringappend_725_
                                                                                           (build_ex _stringappend_726_) in
                                                                                       match (reg_name_matches_prefix
                                                                                                _stringappend_727_) with
                                                                                       | Some
                                                                                         (rd,(existT _ _stringappend_728_ _)) =>
                                                                                          let _stringappend_729_ :=
                                                                                            string_drop
                                                                                              _stringappend_727_
                                                                                              (build_ex _stringappend_728_) in
                                                                                          sep_matches_prefix
                                                                                            _stringappend_729_ >>= fun w__588 : option ((unit * {n : Z & ArithFact (n >=
                                                                                            0)})) =>
                                                                                          match w__588 with
                                                                                          | Some
                                                                                            (tt,(existT _ _stringappend_730_ _)) =>
                                                                                             let _stringappend_731_ :=
                                                                                               string_drop
                                                                                                 _stringappend_729_
                                                                                                 (build_ex _stringappend_730_) in
                                                                                             match (hex_bits_5_matches_prefix
                                                                                                      _stringappend_731_) with
                                                                                             | Some
                                                                                               (rs1,(existT _ _stringappend_732_ _)) =>
                                                                                                let _stringappend_733_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_731_
                                                                                                    (build_ex _stringappend_732_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_733_ >>= fun w__589 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                returnm ((if
                                                                                                            ((match w__589 with
                                                                                                              | Some
                                                                                                                (tt,(existT _ _stringappend_734_ _)) =>
                                                                                                                 let _stringappend_735_ :=
                                                                                                                   string_drop
                                                                                                                     _stringappend_733_
                                                                                                                     (build_ex _stringappend_734_) in
                                                                                                                 if
                                                                                                                   ((match (csr_name_map_matches_prefix
                                                                                                                              _stringappend_735_) with
                                                                                                                     | Some
                                                                                                                       (csr,(existT _ _stringappend_736_ _)) =>
                                                                                                                        match (string_drop
                                                                                                                                 _stringappend_735_
                                                                                                                                 (build_ex _stringappend_736_)) with
                                                                                                                        | "" =>
                                                                                                                           true
                                                                                                                        | _ =>
                                                                                                                           false
                                                                                                                        end
                                                                                                                     | None =>
                                                                                                                        false
                                                                                                                     end))
                                                                                                                 then
                                                                                                                   true
                                                                                                                 else
                                                                                                                   false
                                                                                                              | None =>
                                                                                                                 false
                                                                                                              end))
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__590 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__590)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__591 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__591)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__592 : bool =>
                                                                                       returnm ((if (w__592)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__593 : bool =>
                                                                                    returnm ((if (w__593)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)) >>= fun w__594 : bool =>
                                                                                  returnm ((if (w__594)
                                                                                            then
                                                                                              true
                                                                                            else
                                                                                              false)
                                                                                   : bool)
                                                                               | None =>
                                                                                  returnm (false
                                                                                   : bool)
                                                                               end >>= fun w__595 : bool =>
                                                                               (if (w__595) then
                                                                                  (match (csr_mnemonic_matches_prefix
                                                                                            _stringappend_381_) with
                                                                                   | Some
                                                                                     (op,(existT _ _stringappend_723_ _)) =>
                                                                                      returnm (op, build_ex _stringappend_723_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((csrop * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((csrop * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(op, existT _ _stringappend_723_ _) =>
                                                                                  let _stringappend_724_ :=
                                                                                    string_drop
                                                                                      _stringappend_381_
                                                                                      (build_ex _stringappend_723_) in
                                                                                  let _stringappend_725_ :=
                                                                                    string_drop
                                                                                      _stringappend_724_
                                                                                      (build_ex (projT1 (string_length
                                                                                                           "i"))) in
                                                                                  (match (spc_matches_prefix
                                                                                            _stringappend_725_) with
                                                                                   | Some
                                                                                     (tt,(existT _ _stringappend_726_ _)) =>
                                                                                      returnm (tt, build_ex _stringappend_726_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((unit * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(tt, existT _ _stringappend_726_ _) =>
                                                                                  let _stringappend_727_ :=
                                                                                    string_drop
                                                                                      _stringappend_725_
                                                                                      (build_ex _stringappend_726_) in
                                                                                  (match (reg_name_matches_prefix
                                                                                            _stringappend_727_) with
                                                                                   | Some
                                                                                     (rd,(existT _ _stringappend_728_ _)) =>
                                                                                      returnm (rd, build_ex _stringappend_728_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(rd, existT _ _stringappend_728_ _) =>
                                                                                  let _stringappend_729_ :=
                                                                                    string_drop
                                                                                      _stringappend_727_
                                                                                      (build_ex _stringappend_728_) in
                                                                                  sep_matches_prefix
                                                                                    _stringappend_729_ >>= fun w__602 : option ((unit * {n : Z & ArithFact (n >=
                                                                                    0)})) =>
                                                                                  (match w__602 with
                                                                                   | Some
                                                                                     (tt,(existT _ _stringappend_730_ _)) =>
                                                                                      returnm (tt, build_ex _stringappend_730_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((unit * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(tt, existT _ _stringappend_730_ _) =>
                                                                                  let _stringappend_731_ :=
                                                                                    string_drop
                                                                                      _stringappend_729_
                                                                                      (build_ex _stringappend_730_) in
                                                                                  (match (hex_bits_5_matches_prefix
                                                                                            _stringappend_731_) with
                                                                                   | Some
                                                                                     (rs1,(existT _ _stringappend_732_ _)) =>
                                                                                      returnm (rs1, build_ex _stringappend_732_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(rs1, existT _ _stringappend_732_ _) =>
                                                                                  let _stringappend_733_ :=
                                                                                    string_drop
                                                                                      _stringappend_731_
                                                                                      (build_ex _stringappend_732_) in
                                                                                  sep_matches_prefix
                                                                                    _stringappend_733_ >>= fun w__607 : option ((unit * {n : Z & ArithFact (n >=
                                                                                    0)})) =>
                                                                                  (match w__607 with
                                                                                   | Some
                                                                                     (tt,(existT _ _stringappend_734_ _)) =>
                                                                                      returnm (tt, build_ex _stringappend_734_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((unit * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(tt, existT _ _stringappend_734_ _) =>
                                                                                  let _stringappend_735_ :=
                                                                                    string_drop
                                                                                      _stringappend_733_
                                                                                      (build_ex _stringappend_734_) in
                                                                                  (match (csr_name_map_matches_prefix
                                                                                            _stringappend_735_) with
                                                                                   | Some
                                                                                     (csr,(existT _ _stringappend_736_ _)) =>
                                                                                      returnm (csr, build_ex _stringappend_736_)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                        0)}))
                                                                                   end : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                    0)}))) >>= fun '(csr, existT _ _stringappend_736_ _) =>
                                                                                  (match (string_drop
                                                                                            _stringappend_735_
                                                                                            (build_ex _stringappend_736_)) with
                                                                                   | "" =>
                                                                                      returnm (true
                                                                                       : bool)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M (bool)
                                                                                   end)
                                                                                   : M (bool)
                                                                                else
                                                                                  match (csr_mnemonic_matches_prefix
                                                                                           _stringappend_381_) with
                                                                                  | Some
                                                                                    (op,(existT _ _stringappend_738_ _)) =>
                                                                                     let _stringappend_739_ :=
                                                                                       string_drop
                                                                                         _stringappend_381_
                                                                                         (build_ex _stringappend_738_) in
                                                                                     match (spc_matches_prefix
                                                                                              _stringappend_739_) with
                                                                                     | Some
                                                                                       (tt,(existT _ _stringappend_740_ _)) =>
                                                                                        let _stringappend_741_ :=
                                                                                          string_drop
                                                                                            _stringappend_739_
                                                                                            (build_ex _stringappend_740_) in
                                                                                        match (reg_name_matches_prefix
                                                                                                 _stringappend_741_) with
                                                                                        | Some
                                                                                          (rd,(existT _ _stringappend_742_ _)) =>
                                                                                           let _stringappend_743_ :=
                                                                                             string_drop
                                                                                               _stringappend_741_
                                                                                               (build_ex _stringappend_742_) in
                                                                                           sep_matches_prefix
                                                                                             _stringappend_743_ >>= fun w__614 : option ((unit * {n : Z & ArithFact (n >=
                                                                                             0)})) =>
                                                                                           match w__614 with
                                                                                           | Some
                                                                                             (tt,(existT _ _stringappend_744_ _)) =>
                                                                                              let _stringappend_745_ :=
                                                                                                string_drop
                                                                                                  _stringappend_743_
                                                                                                  (build_ex _stringappend_744_) in
                                                                                              match (reg_name_matches_prefix
                                                                                                       _stringappend_745_) with
                                                                                              | Some
                                                                                                (rs1,(existT _ _stringappend_746_ _)) =>
                                                                                                 let _stringappend_747_ :=
                                                                                                   string_drop
                                                                                                     _stringappend_745_
                                                                                                     (build_ex _stringappend_746_) in
                                                                                                 sep_matches_prefix
                                                                                                   _stringappend_747_ >>= fun w__615 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                   0)})) =>
                                                                                                 returnm ((if
                                                                                                             ((match w__615 with
                                                                                                               | Some
                                                                                                                 (tt,(existT _ _stringappend_748_ _)) =>
                                                                                                                  let _stringappend_749_ :=
                                                                                                                    string_drop
                                                                                                                      _stringappend_747_
                                                                                                                      (build_ex _stringappend_748_) in
                                                                                                                  if
                                                                                                                    ((match (csr_name_map_matches_prefix
                                                                                                                               _stringappend_749_) with
                                                                                                                      | Some
                                                                                                                        (csr,(existT _ _stringappend_750_ _)) =>
                                                                                                                         match (string_drop
                                                                                                                                  _stringappend_749_
                                                                                                                                  (build_ex _stringappend_750_)) with
                                                                                                                         | "" =>
                                                                                                                            true
                                                                                                                         | _ =>
                                                                                                                            false
                                                                                                                         end
                                                                                                                      | None =>
                                                                                                                         false
                                                                                                                      end))
                                                                                                                  then
                                                                                                                    true
                                                                                                                  else
                                                                                                                    false
                                                                                                               | None =>
                                                                                                                  false
                                                                                                               end))
                                                                                                           then
                                                                                                             true
                                                                                                           else
                                                                                                             false)
                                                                                                  : bool)
                                                                                              | None =>
                                                                                                 returnm (false
                                                                                                  : bool)
                                                                                              end >>= fun w__616 : bool =>
                                                                                              returnm ((if
                                                                                                          (w__616)
                                                                                                        then
                                                                                                          true
                                                                                                        else
                                                                                                          false)
                                                                                               : bool)
                                                                                           | None =>
                                                                                              returnm (false
                                                                                               : bool)
                                                                                           end >>= fun w__617 : bool =>
                                                                                           returnm ((if
                                                                                                       (w__617)
                                                                                                     then
                                                                                                       true
                                                                                                     else
                                                                                                       false)
                                                                                            : bool)
                                                                                        | None =>
                                                                                           returnm (false
                                                                                            : bool)
                                                                                        end >>= fun w__618 : bool =>
                                                                                        returnm ((if
                                                                                                    (w__618)
                                                                                                  then
                                                                                                    true
                                                                                                  else
                                                                                                    false)
                                                                                         : bool)
                                                                                     | None =>
                                                                                        returnm (false
                                                                                         : bool)
                                                                                     end >>= fun w__619 : bool =>
                                                                                     returnm ((if (w__619)
                                                                                               then
                                                                                                 true
                                                                                               else
                                                                                                 false)
                                                                                      : bool)
                                                                                  | None =>
                                                                                     returnm (false
                                                                                      : bool)
                                                                                  end >>= fun w__620 : bool =>
                                                                                  (if (w__620) then
                                                                                     (match (csr_mnemonic_matches_prefix
                                                                                               _stringappend_381_) with
                                                                                      | Some
                                                                                        (op,(existT _ _stringappend_738_ _)) =>
                                                                                         returnm (op, build_ex _stringappend_738_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((csrop * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((csrop * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(op, existT _ _stringappend_738_ _) =>
                                                                                     let _stringappend_739_ :=
                                                                                       string_drop
                                                                                         _stringappend_381_
                                                                                         (build_ex _stringappend_738_) in
                                                                                     (match (spc_matches_prefix
                                                                                               _stringappend_739_) with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_740_ _)) =>
                                                                                         returnm (tt, build_ex _stringappend_740_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(tt, existT _ _stringappend_740_ _) =>
                                                                                     let _stringappend_741_ :=
                                                                                       string_drop
                                                                                         _stringappend_739_
                                                                                         (build_ex _stringappend_740_) in
                                                                                     (match (reg_name_matches_prefix
                                                                                               _stringappend_741_) with
                                                                                      | Some
                                                                                        (rd,(existT _ _stringappend_742_ _)) =>
                                                                                         returnm (rd, build_ex _stringappend_742_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(rd, existT _ _stringappend_742_ _) =>
                                                                                     let _stringappend_743_ :=
                                                                                       string_drop
                                                                                         _stringappend_741_
                                                                                         (build_ex _stringappend_742_) in
                                                                                     sep_matches_prefix
                                                                                       _stringappend_743_ >>= fun w__627 : option ((unit * {n : Z & ArithFact (n >=
                                                                                       0)})) =>
                                                                                     (match w__627 with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_744_ _)) =>
                                                                                         returnm (tt, build_ex _stringappend_744_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(tt, existT _ _stringappend_744_ _) =>
                                                                                     let _stringappend_745_ :=
                                                                                       string_drop
                                                                                         _stringappend_743_
                                                                                         (build_ex _stringappend_744_) in
                                                                                     (match (reg_name_matches_prefix
                                                                                               _stringappend_745_) with
                                                                                      | Some
                                                                                        (rs1,(existT _ _stringappend_746_ _)) =>
                                                                                         returnm (rs1, build_ex _stringappend_746_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(rs1, existT _ _stringappend_746_ _) =>
                                                                                     let _stringappend_747_ :=
                                                                                       string_drop
                                                                                         _stringappend_745_
                                                                                         (build_ex _stringappend_746_) in
                                                                                     sep_matches_prefix
                                                                                       _stringappend_747_ >>= fun w__632 : option ((unit * {n : Z & ArithFact (n >=
                                                                                       0)})) =>
                                                                                     (match w__632 with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_748_ _)) =>
                                                                                         returnm (tt, build_ex _stringappend_748_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(tt, existT _ _stringappend_748_ _) =>
                                                                                     let _stringappend_749_ :=
                                                                                       string_drop
                                                                                         _stringappend_747_
                                                                                         (build_ex _stringappend_748_) in
                                                                                     (match (csr_name_map_matches_prefix
                                                                                               _stringappend_749_) with
                                                                                      | Some
                                                                                        (csr,(existT _ _stringappend_750_ _)) =>
                                                                                         returnm (csr, build_ex _stringappend_750_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(csr, existT _ _stringappend_750_ _) =>
                                                                                     (match (string_drop
                                                                                               _stringappend_749_
                                                                                               (build_ex _stringappend_750_)) with
                                                                                      | "" =>
                                                                                         returnm (true
                                                                                          : bool)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M (bool)
                                                                                      end)
                                                                                      : M (bool)
                                                                                   else if ((andb
                                                                                               (string_startswith
                                                                                                  _stringappend_381_
                                                                                                  "illegal")
                                                                                               (let _stringappend_752_ :=
                                                                                                 string_drop
                                                                                                   _stringappend_381_
                                                                                                   (build_ex (projT1 (string_length
                                                                                                                        "illegal"))) in
                                                                                               if ((match (spc_matches_prefix
                                                                                                             _stringappend_752_) with
                                                                                                    | Some
                                                                                                      (tt,(existT _ _stringappend_753_ _)) =>
                                                                                                       let _stringappend_754_ :=
                                                                                                         string_drop
                                                                                                           _stringappend_752_
                                                                                                           (build_ex _stringappend_753_) in
                                                                                                       if
                                                                                                         ((match (hex_bits_32_matches_prefix
                                                                                                                    _stringappend_754_) with
                                                                                                           | Some
                                                                                                             (s,(existT _ _stringappend_755_ _)) =>
                                                                                                              match (string_drop
                                                                                                                       _stringappend_754_
                                                                                                                       (build_ex _stringappend_755_)) with
                                                                                                              | "" =>
                                                                                                                 true
                                                                                                              | _ =>
                                                                                                                 false
                                                                                                              end
                                                                                                           | None =>
                                                                                                              false
                                                                                                           end))
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false
                                                                                                    | None =>
                                                                                                       false
                                                                                                    end))
                                                                                               then
                                                                                                 true
                                                                                               else
                                                                                                 false)))
                                                                                   then
                                                                                     let _stringappend_752_ :=
                                                                                       string_drop
                                                                                         _stringappend_381_
                                                                                         (build_ex (projT1 (string_length
                                                                                                              "illegal"))) in
                                                                                     (match (spc_matches_prefix
                                                                                               _stringappend_752_) with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_753_ _)) =>
                                                                                         returnm (tt, build_ex _stringappend_753_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(tt, existT _ _stringappend_753_ _) =>
                                                                                     let _stringappend_754_ :=
                                                                                       string_drop
                                                                                         _stringappend_752_
                                                                                         (build_ex _stringappend_753_) in
                                                                                     (match (hex_bits_32_matches_prefix
                                                                                               _stringappend_754_) with
                                                                                      | Some
                                                                                        (s,(existT _ _stringappend_755_ _)) =>
                                                                                         returnm (s, build_ex _stringappend_755_)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M ((mword 32 * {n : Z & ArithFact (n >=
                                                                                           0)}))
                                                                                      end : M ((mword 32 * {n : Z & ArithFact (n >=
                                                                                       0)}))) >>= fun '(s, existT _ _stringappend_755_ _) =>
                                                                                     (match (string_drop
                                                                                               _stringappend_754_
                                                                                               (build_ex _stringappend_755_)) with
                                                                                      | "" =>
                                                                                         returnm (true
                                                                                          : bool)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M (bool)
                                                                                      end)
                                                                                      : M (bool)
                                                                                   else
                                                                                     returnm (false
                                                                                      : bool))
                                                                                   : M (bool))
                                                                                : M (bool))
                                                                             : M (bool))
                                                                          : M (bool))
                                                                       : M (bool))
                                                                    : M (bool)
                                                                end)
                                                                : M (bool))
                                                             : M (bool))
                                                          : M (bool))
                                                       : M (bool))
                                                    : M (bool))
                                                 : M (bool))
                                              : M (bool))
                                           : M (bool))
                                        : M (bool))
                                     : M (bool))
                                  : M (bool))
                               : M (bool))
                            : M (bool))
                         : M (bool))
                      : M (bool))
                   : M (bool))
                : M (bool))
             : M (bool))
          : M (bool))
       : M (bool))
    : M (bool).

Definition assembly_matches_prefix (arg_ : string) 
: M (option ((ast * {n : Z & ArithFact (n >= 0)}))) :=
   let _stringappend_0_ := arg_ in
   match (utype_mnemonic_matches_prefix _stringappend_0_) with
   | Some (op,(existT _ _stringappend_1_ _)) =>
      let _stringappend_2_ := string_drop _stringappend_0_ (build_ex _stringappend_1_) in
      match (spc_matches_prefix _stringappend_2_) with
      | Some (tt,(existT _ _stringappend_3_ _)) =>
         let _stringappend_4_ := string_drop _stringappend_2_ (build_ex _stringappend_3_) in
         match (reg_name_matches_prefix _stringappend_4_) with
         | Some (rd,(existT _ _stringappend_5_ _)) =>
            let _stringappend_6_ := string_drop _stringappend_4_ (build_ex _stringappend_5_) in
            sep_matches_prefix _stringappend_6_ >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            returnm ((if ((match w__0 with
                           | Some (tt,(existT _ _stringappend_7_ _)) =>
                              let _stringappend_8_ :=
                                string_drop _stringappend_6_ (build_ex _stringappend_7_) in
                              if ((match (hex_bits_20_matches_prefix _stringappend_8_) with
                                   | Some (imm,(existT _ _stringappend_9_ _)) =>
                                      match (string_drop _stringappend_8_
                                               (build_ex _stringappend_9_)) with
                                      | s_ => true
                                      end
                                   | None => false
                                   end)) then
                                true
                              else false
                           | None => false
                           end)) then
                        true
                      else false)
             : bool)
         | None => returnm (false  : bool)
         end >>= fun w__1 : bool =>
         returnm ((if (w__1) then true
                   else false)
          : bool)
      | None => returnm (false  : bool)
      end >>= fun w__2 : bool =>
      returnm ((if (w__2) then true
                else false)
       : bool)
   | None => returnm (false  : bool)
   end >>= fun w__3 : bool =>
   (if (w__3) then
      (match (utype_mnemonic_matches_prefix _stringappend_0_) with
       | Some (op,(existT _ _stringappend_1_ _)) => returnm (op, build_ex _stringappend_1_)
       | _ => exit tt  : M ((uop * {n : Z & ArithFact (n >= 0)}))
       end : M ((uop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_1_ _) =>
      let _stringappend_2_ := string_drop _stringappend_0_ (build_ex _stringappend_1_) in
      (match (spc_matches_prefix _stringappend_2_) with
       | Some (tt,(existT _ _stringappend_3_ _)) => returnm (tt, build_ex _stringappend_3_)
       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_3_ _) =>
      let _stringappend_4_ := string_drop _stringappend_2_ (build_ex _stringappend_3_) in
      (match (reg_name_matches_prefix _stringappend_4_) with
       | Some (rd,(existT _ _stringappend_5_ _)) => returnm (rd, build_ex _stringappend_5_)
       | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_5_ _) =>
      let _stringappend_6_ := string_drop _stringappend_4_ (build_ex _stringappend_5_) in
      sep_matches_prefix _stringappend_6_ >>= fun w__10 : option ((unit * {n : Z & ArithFact (n >= 0)})) =>
      (match w__10 with
       | Some (tt,(existT _ _stringappend_7_ _)) => returnm (tt, build_ex _stringappend_7_)
       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_7_ _) =>
      let _stringappend_8_ := string_drop _stringappend_6_ (build_ex _stringappend_7_) in
      (match (hex_bits_20_matches_prefix _stringappend_8_) with
       | Some (imm,(existT _ _stringappend_9_ _)) => returnm (imm, build_ex _stringappend_9_)
       | _ => exit tt  : M ((mword 20 * {n : Z & ArithFact (n >= 0)}))
       end : M ((mword 20 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_9_ _) =>
      returnm ((match (string_drop _stringappend_8_ (build_ex _stringappend_9_)) with
                | s_ =>
                   Some
                     ((UTYPE
                         (imm, rd, op), build_ex (projT1 (sub_nat
                                                            (build_ex (projT1 (string_length arg_)))
                                                            (build_ex (projT1 (string_length s_)))))))
                end)
       : option ((ast * {n : Z & ArithFact (n >= 0)})))
    else
      and_boolM (returnm ((string_startswith _stringappend_0_ "jal")  : bool))
        (let _stringappend_11_ :=
          string_drop _stringappend_0_ (build_ex (projT1 (string_length "jal"))) in
        match (spc_matches_prefix _stringappend_11_) with
        | Some (tt,(existT _ _stringappend_12_ _)) =>
           let _stringappend_13_ := string_drop _stringappend_11_ (build_ex _stringappend_12_) in
           match (reg_name_matches_prefix _stringappend_13_) with
           | Some (rd,(existT _ _stringappend_14_ _)) =>
              let _stringappend_15_ := string_drop _stringappend_13_ (build_ex _stringappend_14_) in
              sep_matches_prefix _stringappend_15_ >>= fun w__15 : option ((unit * {n : Z & ArithFact (n >=
                0)})) =>
              returnm ((if ((match w__15 with
                             | Some (tt,(existT _ _stringappend_16_ _)) =>
                                let _stringappend_17_ :=
                                  string_drop _stringappend_15_ (build_ex _stringappend_16_) in
                                if ((match (hex_bits_21_matches_prefix _stringappend_17_) with
                                     | Some (imm,(existT _ _stringappend_18_ _)) =>
                                        match (string_drop _stringappend_17_
                                                 (build_ex _stringappend_18_)) with
                                        | s_ => true
                                        end
                                     | None => false
                                     end)) then
                                  true
                                else false
                             | None => false
                             end)) then
                          true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__16 : bool =>
           returnm ((if (w__16) then true
                     else false)
            : bool)
        | None => returnm (false  : bool)
        end >>= fun w__17 : bool =>
        returnm ((if (w__17) then true
                  else false)
         : bool)) >>= fun w__18 : bool =>
      (if (w__18) then
         let _stringappend_11_ :=
           string_drop _stringappend_0_ (build_ex (projT1 (string_length "jal"))) in
         (match (spc_matches_prefix _stringappend_11_) with
          | Some (tt,(existT _ _stringappend_12_ _)) => returnm (tt, build_ex _stringappend_12_)
          | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
          end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_12_ _) =>
         let _stringappend_13_ := string_drop _stringappend_11_ (build_ex _stringappend_12_) in
         (match (reg_name_matches_prefix _stringappend_13_) with
          | Some (rd,(existT _ _stringappend_14_ _)) => returnm (rd, build_ex _stringappend_14_)
          | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
          end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_14_ _) =>
         let _stringappend_15_ := string_drop _stringappend_13_ (build_ex _stringappend_14_) in
         sep_matches_prefix _stringappend_15_ >>= fun w__23 : option ((unit * {n : Z & ArithFact (n >=
           0)})) =>
         (match w__23 with
          | Some (tt,(existT _ _stringappend_16_ _)) => returnm (tt, build_ex _stringappend_16_)
          | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
          end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_16_ _) =>
         let _stringappend_17_ := string_drop _stringappend_15_ (build_ex _stringappend_16_) in
         (match (hex_bits_21_matches_prefix _stringappend_17_) with
          | Some (imm,(existT _ _stringappend_18_ _)) => returnm (imm, build_ex _stringappend_18_)
          | _ => exit tt  : M ((mword 21 * {n : Z & ArithFact (n >= 0)}))
          end : M ((mword 21 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_18_ _) =>
         returnm ((match (string_drop _stringappend_17_ (build_ex _stringappend_18_)) with
                   | s_ =>
                      Some
                        ((RISCV_JAL
                            (imm, rd), build_ex (projT1 (sub_nat
                                                           (build_ex (projT1 (string_length arg_)))
                                                           (build_ex (projT1 (string_length s_)))))))
                   end)
          : option ((ast * {n : Z & ArithFact (n >= 0)})))
       else
         and_boolM (returnm ((string_startswith _stringappend_0_ "jalr")  : bool))
           (let _stringappend_20_ :=
             string_drop _stringappend_0_ (build_ex (projT1 (string_length "jalr"))) in
           match (spc_matches_prefix _stringappend_20_) with
           | Some (tt,(existT _ _stringappend_21_ _)) =>
              let _stringappend_22_ := string_drop _stringappend_20_ (build_ex _stringappend_21_) in
              match (reg_name_matches_prefix _stringappend_22_) with
              | Some (rd,(existT _ _stringappend_23_ _)) =>
                 let _stringappend_24_ := string_drop _stringappend_22_ (build_ex _stringappend_23_) in
                 sep_matches_prefix _stringappend_24_ >>= fun w__28 : option ((unit * {n : Z & ArithFact (n >=
                   0)})) =>
                 match w__28 with
                 | Some (tt,(existT _ _stringappend_25_ _)) =>
                    let _stringappend_26_ :=
                      string_drop _stringappend_24_ (build_ex _stringappend_25_) in
                    match (reg_name_matches_prefix _stringappend_26_) with
                    | Some (rs1,(existT _ _stringappend_27_ _)) =>
                       let _stringappend_28_ :=
                         string_drop _stringappend_26_ (build_ex _stringappend_27_) in
                       sep_matches_prefix _stringappend_28_ >>= fun w__29 : option ((unit * {n : Z & ArithFact (n >=
                         0)})) =>
                       returnm ((if ((match w__29 with
                                      | Some (tt,(existT _ _stringappend_29_ _)) =>
                                         let _stringappend_30_ :=
                                           string_drop _stringappend_28_
                                             (build_ex _stringappend_29_) in
                                         if ((match (hex_bits_12_matches_prefix _stringappend_30_) with
                                              | Some (imm,(existT _ _stringappend_31_ _)) =>
                                                 match (string_drop _stringappend_30_
                                                          (build_ex _stringappend_31_)) with
                                                 | s_ => true
                                                 end
                                              | None => false
                                              end)) then
                                           true
                                         else false
                                      | None => false
                                      end)) then
                                   true
                                 else false)
                        : bool)
                    | None => returnm (false  : bool)
                    end >>= fun w__30 : bool =>
                    returnm ((if (w__30) then true
                              else false)
                     : bool)
                 | None => returnm (false  : bool)
                 end >>= fun w__31 : bool =>
                 returnm ((if (w__31) then true
                           else false)
                  : bool)
              | None => returnm (false  : bool)
              end >>= fun w__32 : bool =>
              returnm ((if (w__32) then true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__33 : bool =>
           returnm ((if (w__33) then true
                     else false)
            : bool)) >>= fun w__34 : bool =>
         (if (w__34) then
            let _stringappend_20_ :=
              string_drop _stringappend_0_ (build_ex (projT1 (string_length "jalr"))) in
            (match (spc_matches_prefix _stringappend_20_) with
             | Some (tt,(existT _ _stringappend_21_ _)) => returnm (tt, build_ex _stringappend_21_)
             | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
             end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_21_ _) =>
            let _stringappend_22_ := string_drop _stringappend_20_ (build_ex _stringappend_21_) in
            (match (reg_name_matches_prefix _stringappend_22_) with
             | Some (rd,(existT _ _stringappend_23_ _)) => returnm (rd, build_ex _stringappend_23_)
             | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
             end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_23_ _) =>
            let _stringappend_24_ := string_drop _stringappend_22_ (build_ex _stringappend_23_) in
            sep_matches_prefix _stringappend_24_ >>= fun w__39 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            (match w__39 with
             | Some (tt,(existT _ _stringappend_25_ _)) => returnm (tt, build_ex _stringappend_25_)
             | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
             end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_25_ _) =>
            let _stringappend_26_ := string_drop _stringappend_24_ (build_ex _stringappend_25_) in
            (match (reg_name_matches_prefix _stringappend_26_) with
             | Some (rs1,(existT _ _stringappend_27_ _)) =>
                returnm (rs1, build_ex _stringappend_27_)
             | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
             end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_27_ _) =>
            let _stringappend_28_ := string_drop _stringappend_26_ (build_ex _stringappend_27_) in
            sep_matches_prefix _stringappend_28_ >>= fun w__44 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            (match w__44 with
             | Some (tt,(existT _ _stringappend_29_ _)) => returnm (tt, build_ex _stringappend_29_)
             | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
             end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_29_ _) =>
            let _stringappend_30_ := string_drop _stringappend_28_ (build_ex _stringappend_29_) in
            (match (hex_bits_12_matches_prefix _stringappend_30_) with
             | Some (imm,(existT _ _stringappend_31_ _)) =>
                returnm (imm, build_ex _stringappend_31_)
             | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
             end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_31_ _) =>
            returnm ((match (string_drop _stringappend_30_ (build_ex _stringappend_31_)) with
                      | s_ =>
                         Some
                           ((RISCV_JALR
                               (imm, rs1, rd), build_ex (projT1 (sub_nat
                                                                   (build_ex (projT1 (string_length
                                                                                        arg_)))
                                                                   (build_ex (projT1 (string_length
                                                                                        s_)))))))
                      end)
             : option ((ast * {n : Z & ArithFact (n >= 0)})))
          else
            match (btype_mnemonic_matches_prefix _stringappend_0_) with
            | Some (op,(existT _ _stringappend_33_ _)) =>
               let _stringappend_34_ := string_drop _stringappend_0_ (build_ex _stringappend_33_) in
               match (spc_matches_prefix _stringappend_34_) with
               | Some (tt,(existT _ _stringappend_35_ _)) =>
                  let _stringappend_36_ :=
                    string_drop _stringappend_34_ (build_ex _stringappend_35_) in
                  match (reg_name_matches_prefix _stringappend_36_) with
                  | Some (rs1,(existT _ _stringappend_37_ _)) =>
                     let _stringappend_38_ :=
                       string_drop _stringappend_36_ (build_ex _stringappend_37_) in
                     sep_matches_prefix _stringappend_38_ >>= fun w__49 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     match w__49 with
                     | Some (tt,(existT _ _stringappend_39_ _)) =>
                        let _stringappend_40_ :=
                          string_drop _stringappend_38_ (build_ex _stringappend_39_) in
                        match (reg_name_matches_prefix _stringappend_40_) with
                        | Some (rs2,(existT _ _stringappend_41_ _)) =>
                           let _stringappend_42_ :=
                             string_drop _stringappend_40_ (build_ex _stringappend_41_) in
                           sep_matches_prefix _stringappend_42_ >>= fun w__50 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__50 with
                                          | Some (tt,(existT _ _stringappend_43_ _)) =>
                                             let _stringappend_44_ :=
                                               string_drop _stringappend_42_
                                                 (build_ex _stringappend_43_) in
                                             if ((match (hex_bits_13_matches_prefix
                                                           _stringappend_44_) with
                                                  | Some (imm,(existT _ _stringappend_45_ _)) =>
                                                     match (string_drop _stringappend_44_
                                                              (build_ex _stringappend_45_)) with
                                                     | s_ => true
                                                     end
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__51 : bool =>
                        returnm ((if (w__51) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__52 : bool =>
                     returnm ((if (w__52) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__53 : bool =>
                  returnm ((if (w__53) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__54 : bool =>
               returnm ((if (w__54) then true
                         else false)
                : bool)
            | None => returnm (false  : bool)
            end >>= fun w__55 : bool =>
            (if (w__55) then
               (match (btype_mnemonic_matches_prefix _stringappend_0_) with
                | Some (op,(existT _ _stringappend_33_ _)) =>
                   returnm (op, build_ex _stringappend_33_)
                | _ => exit tt  : M ((bop * {n : Z & ArithFact (n >= 0)}))
                end : M ((bop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_33_ _) =>
               let _stringappend_34_ := string_drop _stringappend_0_ (build_ex _stringappend_33_) in
               (match (spc_matches_prefix _stringappend_34_) with
                | Some (tt,(existT _ _stringappend_35_ _)) =>
                   returnm (tt, build_ex _stringappend_35_)
                | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_35_ _) =>
               let _stringappend_36_ := string_drop _stringappend_34_ (build_ex _stringappend_35_) in
               (match (reg_name_matches_prefix _stringappend_36_) with
                | Some (rs1,(existT _ _stringappend_37_ _)) =>
                   returnm (rs1, build_ex _stringappend_37_)
                | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_37_ _) =>
               let _stringappend_38_ := string_drop _stringappend_36_ (build_ex _stringappend_37_) in
               sep_matches_prefix _stringappend_38_ >>= fun w__62 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               (match w__62 with
                | Some (tt,(existT _ _stringappend_39_ _)) =>
                   returnm (tt, build_ex _stringappend_39_)
                | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_39_ _) =>
               let _stringappend_40_ := string_drop _stringappend_38_ (build_ex _stringappend_39_) in
               (match (reg_name_matches_prefix _stringappend_40_) with
                | Some (rs2,(existT _ _stringappend_41_ _)) =>
                   returnm (rs2, build_ex _stringappend_41_)
                | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_41_ _) =>
               let _stringappend_42_ := string_drop _stringappend_40_ (build_ex _stringappend_41_) in
               sep_matches_prefix _stringappend_42_ >>= fun w__67 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               (match w__67 with
                | Some (tt,(existT _ _stringappend_43_ _)) =>
                   returnm (tt, build_ex _stringappend_43_)
                | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_43_ _) =>
               let _stringappend_44_ := string_drop _stringappend_42_ (build_ex _stringappend_43_) in
               (match (hex_bits_13_matches_prefix _stringappend_44_) with
                | Some (imm,(existT _ _stringappend_45_ _)) =>
                   returnm (imm, build_ex _stringappend_45_)
                | _ => exit tt  : M ((mword 13 * {n : Z & ArithFact (n >= 0)}))
                end : M ((mword 13 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_45_ _) =>
               returnm ((match (string_drop _stringappend_44_ (build_ex _stringappend_45_)) with
                         | s_ =>
                            Some
                              ((BTYPE
                                  (imm, rs2, rs1, op), build_ex (projT1 (sub_nat
                                                                           (build_ex (projT1 (string_length
                                                                                                arg_)))
                                                                           (build_ex (projT1 (string_length
                                                                                                s_)))))))
                         end)
                : option ((ast * {n : Z & ArithFact (n >= 0)})))
             else
               match (itype_mnemonic_matches_prefix _stringappend_0_) with
               | Some (op,(existT _ _stringappend_47_ _)) =>
                  let _stringappend_48_ := string_drop _stringappend_0_ (build_ex _stringappend_47_) in
                  match (spc_matches_prefix _stringappend_48_) with
                  | Some (tt,(existT _ _stringappend_49_ _)) =>
                     let _stringappend_50_ :=
                       string_drop _stringappend_48_ (build_ex _stringappend_49_) in
                     match (reg_name_matches_prefix _stringappend_50_) with
                     | Some (rd,(existT _ _stringappend_51_ _)) =>
                        let _stringappend_52_ :=
                          string_drop _stringappend_50_ (build_ex _stringappend_51_) in
                        sep_matches_prefix _stringappend_52_ >>= fun w__72 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__72 with
                        | Some (tt,(existT _ _stringappend_53_ _)) =>
                           let _stringappend_54_ :=
                             string_drop _stringappend_52_ (build_ex _stringappend_53_) in
                           match (reg_name_matches_prefix _stringappend_54_) with
                           | Some (rs1,(existT _ _stringappend_55_ _)) =>
                              let _stringappend_56_ :=
                                string_drop _stringappend_54_ (build_ex _stringappend_55_) in
                              sep_matches_prefix _stringappend_56_ >>= fun w__73 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              returnm ((if ((match w__73 with
                                             | Some (tt,(existT _ _stringappend_57_ _)) =>
                                                let _stringappend_58_ :=
                                                  string_drop _stringappend_56_
                                                    (build_ex _stringappend_57_) in
                                                if ((match (hex_bits_12_matches_prefix
                                                              _stringappend_58_) with
                                                     | Some (imm,(existT _ _stringappend_59_ _)) =>
                                                        match (string_drop _stringappend_58_
                                                                 (build_ex _stringappend_59_)) with
                                                        | s_ => true
                                                        end
                                                     | None => false
                                                     end)) then
                                                  true
                                                else false
                                             | None => false
                                             end)) then
                                          true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__74 : bool =>
                           returnm ((if (w__74) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__75 : bool =>
                        returnm ((if (w__75) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__76 : bool =>
                     returnm ((if (w__76) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__77 : bool =>
                  returnm ((if (w__77) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__78 : bool =>
               (if (w__78) then
                  (match (itype_mnemonic_matches_prefix _stringappend_0_) with
                   | Some (op,(existT _ _stringappend_47_ _)) =>
                      returnm (op, build_ex _stringappend_47_)
                   | _ => exit tt  : M ((iop * {n : Z & ArithFact (n >= 0)}))
                   end : M ((iop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_47_ _) =>
                  let _stringappend_48_ := string_drop _stringappend_0_ (build_ex _stringappend_47_) in
                  (match (spc_matches_prefix _stringappend_48_) with
                   | Some (tt,(existT _ _stringappend_49_ _)) =>
                      returnm (tt, build_ex _stringappend_49_)
                   | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                   end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_49_ _) =>
                  let _stringappend_50_ :=
                    string_drop _stringappend_48_ (build_ex _stringappend_49_) in
                  (match (reg_name_matches_prefix _stringappend_50_) with
                   | Some (rd,(existT _ _stringappend_51_ _)) =>
                      returnm (rd, build_ex _stringappend_51_)
                   | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                   end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_51_ _) =>
                  let _stringappend_52_ :=
                    string_drop _stringappend_50_ (build_ex _stringappend_51_) in
                  sep_matches_prefix _stringappend_52_ >>= fun w__85 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  (match w__85 with
                   | Some (tt,(existT _ _stringappend_53_ _)) =>
                      returnm (tt, build_ex _stringappend_53_)
                   | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                   end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_53_ _) =>
                  let _stringappend_54_ :=
                    string_drop _stringappend_52_ (build_ex _stringappend_53_) in
                  (match (reg_name_matches_prefix _stringappend_54_) with
                   | Some (rs1,(existT _ _stringappend_55_ _)) =>
                      returnm (rs1, build_ex _stringappend_55_)
                   | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                   end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_55_ _) =>
                  let _stringappend_56_ :=
                    string_drop _stringappend_54_ (build_ex _stringappend_55_) in
                  sep_matches_prefix _stringappend_56_ >>= fun w__90 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  (match w__90 with
                   | Some (tt,(existT _ _stringappend_57_ _)) =>
                      returnm (tt, build_ex _stringappend_57_)
                   | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                   end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_57_ _) =>
                  let _stringappend_58_ :=
                    string_drop _stringappend_56_ (build_ex _stringappend_57_) in
                  (match (hex_bits_12_matches_prefix _stringappend_58_) with
                   | Some (imm,(existT _ _stringappend_59_ _)) =>
                      returnm (imm, build_ex _stringappend_59_)
                   | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                   end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_59_ _) =>
                  returnm ((match (string_drop _stringappend_58_ (build_ex _stringappend_59_)) with
                            | s_ =>
                               Some
                                 ((ITYPE
                                     (imm, rs1, rd, op), build_ex (projT1 (sub_nat
                                                                             (build_ex (projT1 (string_length
                                                                                                  arg_)))
                                                                             (build_ex (projT1 (string_length
                                                                                                  s_)))))))
                            end)
                   : option ((ast * {n : Z & ArithFact (n >= 0)})))
                else
                  match (shiftiop_mnemonic_matches_prefix _stringappend_0_) with
                  | Some (op,(existT _ _stringappend_61_ _)) =>
                     let _stringappend_62_ :=
                       string_drop _stringappend_0_ (build_ex _stringappend_61_) in
                     match (spc_matches_prefix _stringappend_62_) with
                     | Some (tt,(existT _ _stringappend_63_ _)) =>
                        let _stringappend_64_ :=
                          string_drop _stringappend_62_ (build_ex _stringappend_63_) in
                        match (reg_name_matches_prefix _stringappend_64_) with
                        | Some (rd,(existT _ _stringappend_65_ _)) =>
                           let _stringappend_66_ :=
                             string_drop _stringappend_64_ (build_ex _stringappend_65_) in
                           sep_matches_prefix _stringappend_66_ >>= fun w__95 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__95 with
                                          | Some (tt,(existT _ _stringappend_67_ _)) =>
                                             let _stringappend_68_ :=
                                               string_drop _stringappend_66_
                                                 (build_ex _stringappend_67_) in
                                             if ((match (reg_name_matches_prefix _stringappend_68_) with
                                                  | Some (rs1,(existT _ _stringappend_69_ _)) =>
                                                     let _stringappend_70_ :=
                                                       string_drop _stringappend_68_
                                                         (build_ex _stringappend_69_) in
                                                     if ((match (hex_bits_6_matches_prefix
                                                                   _stringappend_70_) with
                                                          | Some
                                                            (shamt,(existT _ _stringappend_71_ _)) =>
                                                             match (string_drop _stringappend_70_
                                                                      (build_ex _stringappend_71_)) with
                                                             | s_ => true
                                                             end
                                                          | None => false
                                                          end)) then
                                                       true
                                                     else false
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__96 : bool =>
                        returnm ((if (w__96) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__97 : bool =>
                     returnm ((if (w__97) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__98 : bool =>
                  (if (w__98) then
                     (match (shiftiop_mnemonic_matches_prefix _stringappend_0_) with
                      | Some (op,(existT _ _stringappend_61_ _)) =>
                         returnm (op, build_ex _stringappend_61_)
                      | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                      end : M ((sop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_61_ _) =>
                     let _stringappend_62_ :=
                       string_drop _stringappend_0_ (build_ex _stringappend_61_) in
                     (match (spc_matches_prefix _stringappend_62_) with
                      | Some (tt,(existT _ _stringappend_63_ _)) =>
                         returnm (tt, build_ex _stringappend_63_)
                      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                      end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_63_ _) =>
                     let _stringappend_64_ :=
                       string_drop _stringappend_62_ (build_ex _stringappend_63_) in
                     (match (reg_name_matches_prefix _stringappend_64_) with
                      | Some (rd,(existT _ _stringappend_65_ _)) =>
                         returnm (rd, build_ex _stringappend_65_)
                      | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                      end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_65_ _) =>
                     let _stringappend_66_ :=
                       string_drop _stringappend_64_ (build_ex _stringappend_65_) in
                     sep_matches_prefix _stringappend_66_ >>= fun w__105 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     (match w__105 with
                      | Some (tt,(existT _ _stringappend_67_ _)) =>
                         returnm (tt, build_ex _stringappend_67_)
                      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                      end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_67_ _) =>
                     let _stringappend_68_ :=
                       string_drop _stringappend_66_ (build_ex _stringappend_67_) in
                     (match (reg_name_matches_prefix _stringappend_68_) with
                      | Some (rs1,(existT _ _stringappend_69_ _)) =>
                         returnm (rs1, build_ex _stringappend_69_)
                      | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                      end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_69_ _) =>
                     let _stringappend_70_ :=
                       string_drop _stringappend_68_ (build_ex _stringappend_69_) in
                     (match (hex_bits_6_matches_prefix _stringappend_70_) with
                      | Some (shamt,(existT _ _stringappend_71_ _)) =>
                         returnm (shamt, build_ex _stringappend_71_)
                      | _ => exit tt  : M ((mword 6 * {n : Z & ArithFact (n >= 0)}))
                      end : M ((mword 6 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(shamt, existT _ _stringappend_71_ _) =>
                     returnm ((match (string_drop _stringappend_70_ (build_ex _stringappend_71_)) with
                               | s_ =>
                                  Some
                                    ((SHIFTIOP
                                        (shamt, rs1, rd, op), build_ex (projT1 (sub_nat
                                                                                  (build_ex (projT1 (string_length
                                                                                                       arg_)))
                                                                                  (build_ex (projT1 (string_length
                                                                                                       s_)))))))
                               end)
                      : option ((ast * {n : Z & ArithFact (n >= 0)})))
                   else
                     match (rtype_mnemonic_matches_prefix _stringappend_0_) with
                     | Some (op,(existT _ _stringappend_73_ _)) =>
                        let _stringappend_74_ :=
                          string_drop _stringappend_0_ (build_ex _stringappend_73_) in
                        match (spc_matches_prefix _stringappend_74_) with
                        | Some (tt,(existT _ _stringappend_75_ _)) =>
                           let _stringappend_76_ :=
                             string_drop _stringappend_74_ (build_ex _stringappend_75_) in
                           match (reg_name_matches_prefix _stringappend_76_) with
                           | Some (rd,(existT _ _stringappend_77_ _)) =>
                              let _stringappend_78_ :=
                                string_drop _stringappend_76_ (build_ex _stringappend_77_) in
                              sep_matches_prefix _stringappend_78_ >>= fun w__112 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__112 with
                              | Some (tt,(existT _ _stringappend_79_ _)) =>
                                 let _stringappend_80_ :=
                                   string_drop _stringappend_78_ (build_ex _stringappend_79_) in
                                 match (reg_name_matches_prefix _stringappend_80_) with
                                 | Some (rs1,(existT _ _stringappend_81_ _)) =>
                                    let _stringappend_82_ :=
                                      string_drop _stringappend_80_ (build_ex _stringappend_81_) in
                                    sep_matches_prefix _stringappend_82_ >>= fun w__113 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    returnm ((if ((match w__113 with
                                                   | Some (tt,(existT _ _stringappend_83_ _)) =>
                                                      let _stringappend_84_ :=
                                                        string_drop _stringappend_82_
                                                          (build_ex _stringappend_83_) in
                                                      if ((match (reg_name_matches_prefix
                                                                    _stringappend_84_) with
                                                           | Some
                                                             (rs2,(existT _ _stringappend_85_ _)) =>
                                                              match (string_drop _stringappend_84_
                                                                       (build_ex _stringappend_85_)) with
                                                              | s_ => true
                                                              end
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false
                                                   | None => false
                                                   end)) then
                                                true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__114 : bool =>
                                 returnm ((if (w__114) then true
                                           else false)
                                  : bool)
                              | None => returnm (false  : bool)
                              end >>= fun w__115 : bool =>
                              returnm ((if (w__115) then true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__116 : bool =>
                           returnm ((if (w__116) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__117 : bool =>
                        returnm ((if (w__117) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__118 : bool =>
                     (if (w__118) then
                        (match (rtype_mnemonic_matches_prefix _stringappend_0_) with
                         | Some (op,(existT _ _stringappend_73_ _)) =>
                            returnm (op, build_ex _stringappend_73_)
                         | _ => exit tt  : M ((rop * {n : Z & ArithFact (n >= 0)}))
                         end : M ((rop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_73_ _) =>
                        let _stringappend_74_ :=
                          string_drop _stringappend_0_ (build_ex _stringappend_73_) in
                        (match (spc_matches_prefix _stringappend_74_) with
                         | Some (tt,(existT _ _stringappend_75_ _)) =>
                            returnm (tt, build_ex _stringappend_75_)
                         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                         end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_75_ _) =>
                        let _stringappend_76_ :=
                          string_drop _stringappend_74_ (build_ex _stringappend_75_) in
                        (match (reg_name_matches_prefix _stringappend_76_) with
                         | Some (rd,(existT _ _stringappend_77_ _)) =>
                            returnm (rd, build_ex _stringappend_77_)
                         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                         end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_77_ _) =>
                        let _stringappend_78_ :=
                          string_drop _stringappend_76_ (build_ex _stringappend_77_) in
                        sep_matches_prefix _stringappend_78_ >>= fun w__125 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        (match w__125 with
                         | Some (tt,(existT _ _stringappend_79_ _)) =>
                            returnm (tt, build_ex _stringappend_79_)
                         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                         end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_79_ _) =>
                        let _stringappend_80_ :=
                          string_drop _stringappend_78_ (build_ex _stringappend_79_) in
                        (match (reg_name_matches_prefix _stringappend_80_) with
                         | Some (rs1,(existT _ _stringappend_81_ _)) =>
                            returnm (rs1, build_ex _stringappend_81_)
                         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                         end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_81_ _) =>
                        let _stringappend_82_ :=
                          string_drop _stringappend_80_ (build_ex _stringappend_81_) in
                        sep_matches_prefix _stringappend_82_ >>= fun w__130 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        (match w__130 with
                         | Some (tt,(existT _ _stringappend_83_ _)) =>
                            returnm (tt, build_ex _stringappend_83_)
                         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                         end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_83_ _) =>
                        let _stringappend_84_ :=
                          string_drop _stringappend_82_ (build_ex _stringappend_83_) in
                        (match (reg_name_matches_prefix _stringappend_84_) with
                         | Some (rs2,(existT _ _stringappend_85_ _)) =>
                            returnm (rs2, build_ex _stringappend_85_)
                         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                         end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_85_ _) =>
                        returnm ((match (string_drop _stringappend_84_ (build_ex _stringappend_85_)) with
                                  | s_ =>
                                     Some
                                       ((RTYPE
                                           (rs2, rs1, rd, op), build_ex (projT1 (sub_nat
                                                                                   (build_ex (projT1 (string_length
                                                                                                        arg_)))
                                                                                   (build_ex (projT1 (string_length
                                                                                                        s_)))))))
                                  end)
                         : option ((ast * {n : Z & ArithFact (n >= 0)})))
                      else
                        and_boolM (returnm ((string_startswith _stringappend_0_ "l")  : bool))
                          (let _stringappend_87_ :=
                            string_drop _stringappend_0_ (build_ex (projT1 (string_length "l"))) in
                          match (size_mnemonic_matches_prefix _stringappend_87_) with
                          | Some (size,(existT _ _stringappend_88_ _)) =>
                             let _stringappend_89_ :=
                               string_drop _stringappend_87_ (build_ex _stringappend_88_) in
                             match (maybe_u_matches_prefix _stringappend_89_) with
                             | Some (is_unsigned,(existT _ _stringappend_90_ _)) =>
                                let _stringappend_91_ :=
                                  string_drop _stringappend_89_ (build_ex _stringappend_90_) in
                                match (maybe_aq_matches_prefix _stringappend_91_) with
                                | Some (aq,(existT _ _stringappend_92_ _)) =>
                                   let _stringappend_93_ :=
                                     string_drop _stringappend_91_ (build_ex _stringappend_92_) in
                                   match (maybe_rl_matches_prefix _stringappend_93_) with
                                   | Some (rl,(existT _ _stringappend_94_ _)) =>
                                      let _stringappend_95_ :=
                                        string_drop _stringappend_93_ (build_ex _stringappend_94_) in
                                      match (spc_matches_prefix _stringappend_95_) with
                                      | Some (tt,(existT _ _stringappend_96_ _)) =>
                                         let _stringappend_97_ :=
                                           string_drop _stringappend_95_
                                             (build_ex _stringappend_96_) in
                                         match (reg_name_matches_prefix _stringappend_97_) with
                                         | Some (rd,(existT _ _stringappend_98_ _)) =>
                                            let _stringappend_99_ :=
                                              string_drop _stringappend_97_
                                                (build_ex _stringappend_98_) in
                                            sep_matches_prefix _stringappend_99_ >>= fun w__135 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__135 with
                                            | Some (tt,(existT _ _stringappend_100_ _)) =>
                                               let _stringappend_101_ :=
                                                 string_drop _stringappend_99_
                                                   (build_ex _stringappend_100_) in
                                               match (reg_name_matches_prefix _stringappend_101_) with
                                               | Some (rs1,(existT _ _stringappend_102_ _)) =>
                                                  let _stringappend_103_ :=
                                                    string_drop _stringappend_101_
                                                      (build_ex _stringappend_102_) in
                                                  sep_matches_prefix _stringappend_103_ >>= fun w__136 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__136 with
                                                                 | Some
                                                                   (tt,(existT _ _stringappend_104_ _)) =>
                                                                    let _stringappend_105_ :=
                                                                      string_drop _stringappend_103_
                                                                        (build_ex _stringappend_104_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_105_) with
                                                                         | Some
                                                                           (imm,(existT _ _stringappend_106_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_105_
                                                                                     (build_ex _stringappend_106_)) with
                                                                            | s_ => true
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__137 : bool =>
                                               returnm ((if (w__137) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__138 : bool =>
                                            returnm ((if (w__138) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__139 : bool =>
                                         returnm ((if (w__139) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__140 : bool =>
                                      returnm ((if (w__140) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__141 : bool =>
                                   returnm ((if (w__141) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__142 : bool =>
                                returnm ((if (w__142) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__143 : bool =>
                             returnm ((if (w__143) then true
                                       else false)
                              : bool)
                          | None => returnm (false  : bool)
                          end >>= fun w__144 : bool =>
                          returnm ((if (w__144) then true
                                    else false)
                           : bool)) >>= fun w__145 : bool =>
                        (if (w__145) then
                           let _stringappend_87_ :=
                             string_drop _stringappend_0_ (build_ex (projT1 (string_length "l"))) in
                           (match (size_mnemonic_matches_prefix _stringappend_87_) with
                            | Some (size,(existT _ _stringappend_88_ _)) =>
                               returnm (size, build_ex _stringappend_88_)
                            | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                            end : M ((word_width * {n : Z & ArithFact (n >= 0)}))) >>= fun '(size, existT _ _stringappend_88_ _) =>
                           let _stringappend_89_ :=
                             string_drop _stringappend_87_ (build_ex _stringappend_88_) in
                           (match (maybe_u_matches_prefix _stringappend_89_) with
                            | Some (is_unsigned,(existT _ _stringappend_90_ _)) =>
                               returnm (is_unsigned, build_ex _stringappend_90_)
                            | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                            end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(is_unsigned, existT _ _stringappend_90_ _) =>
                           let _stringappend_91_ :=
                             string_drop _stringappend_89_ (build_ex _stringappend_90_) in
                           (match (maybe_aq_matches_prefix _stringappend_91_) with
                            | Some (aq,(existT _ _stringappend_92_ _)) =>
                               returnm (aq, build_ex _stringappend_92_)
                            | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                            end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(aq, existT _ _stringappend_92_ _) =>
                           let _stringappend_93_ :=
                             string_drop _stringappend_91_ (build_ex _stringappend_92_) in
                           (match (maybe_rl_matches_prefix _stringappend_93_) with
                            | Some (rl,(existT _ _stringappend_94_ _)) =>
                               returnm (rl, build_ex _stringappend_94_)
                            | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                            end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rl, existT _ _stringappend_94_ _) =>
                           let _stringappend_95_ :=
                             string_drop _stringappend_93_ (build_ex _stringappend_94_) in
                           (match (spc_matches_prefix _stringappend_95_) with
                            | Some (tt,(existT _ _stringappend_96_ _)) =>
                               returnm (tt, build_ex _stringappend_96_)
                            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                            end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_96_ _) =>
                           let _stringappend_97_ :=
                             string_drop _stringappend_95_ (build_ex _stringappend_96_) in
                           (match (reg_name_matches_prefix _stringappend_97_) with
                            | Some (rd,(existT _ _stringappend_98_ _)) =>
                               returnm (rd, build_ex _stringappend_98_)
                            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                            end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_98_ _) =>
                           let _stringappend_99_ :=
                             string_drop _stringappend_97_ (build_ex _stringappend_98_) in
                           sep_matches_prefix _stringappend_99_ >>= fun w__158 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           (match w__158 with
                            | Some (tt,(existT _ _stringappend_100_ _)) =>
                               returnm (tt, build_ex _stringappend_100_)
                            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                            end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_100_ _) =>
                           let _stringappend_101_ :=
                             string_drop _stringappend_99_ (build_ex _stringappend_100_) in
                           (match (reg_name_matches_prefix _stringappend_101_) with
                            | Some (rs1,(existT _ _stringappend_102_ _)) =>
                               returnm (rs1, build_ex _stringappend_102_)
                            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                            end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_102_ _) =>
                           let _stringappend_103_ :=
                             string_drop _stringappend_101_ (build_ex _stringappend_102_) in
                           sep_matches_prefix _stringappend_103_ >>= fun w__163 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           (match w__163 with
                            | Some (tt,(existT _ _stringappend_104_ _)) =>
                               returnm (tt, build_ex _stringappend_104_)
                            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                            end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_104_ _) =>
                           let _stringappend_105_ :=
                             string_drop _stringappend_103_ (build_ex _stringappend_104_) in
                           (match (hex_bits_12_matches_prefix _stringappend_105_) with
                            | Some (imm,(existT _ _stringappend_106_ _)) =>
                               returnm (imm, build_ex _stringappend_106_)
                            | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                            end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_106_ _) =>
                           returnm ((match (string_drop _stringappend_105_
                                              (build_ex _stringappend_106_)) with
                                     | s_ =>
                                        Some
                                          ((LOAD
                                              (imm, rs1, rd, is_unsigned, size, aq, rl), build_ex (projT1 (sub_nat
                                                                                                             (build_ex (projT1 (string_length
                                                                                                                                  arg_)))
                                                                                                             (build_ex (projT1 (string_length
                                                                                                                                  s_)))))))
                                     end)
                            : option ((ast * {n : Z & ArithFact (n >= 0)})))
                         else
                           and_boolM (returnm ((string_startswith _stringappend_0_ "s")  : bool))
                             (let _stringappend_108_ :=
                               string_drop _stringappend_0_ (build_ex (projT1 (string_length "s"))) in
                             match (size_mnemonic_matches_prefix _stringappend_108_) with
                             | Some (size,(existT _ _stringappend_109_ _)) =>
                                let _stringappend_110_ :=
                                  string_drop _stringappend_108_ (build_ex _stringappend_109_) in
                                match (maybe_aq_matches_prefix _stringappend_110_) with
                                | Some (aq,(existT _ _stringappend_111_ _)) =>
                                   let _stringappend_112_ :=
                                     string_drop _stringappend_110_ (build_ex _stringappend_111_) in
                                   match (maybe_rl_matches_prefix _stringappend_112_) with
                                   | Some (rl,(existT _ _stringappend_113_ _)) =>
                                      let _stringappend_114_ :=
                                        string_drop _stringappend_112_ (build_ex _stringappend_113_) in
                                      match (spc_matches_prefix _stringappend_114_) with
                                      | Some (tt,(existT _ _stringappend_115_ _)) =>
                                         let _stringappend_116_ :=
                                           string_drop _stringappend_114_
                                             (build_ex _stringappend_115_) in
                                         match (reg_name_matches_prefix _stringappend_116_) with
                                         | Some (rd,(existT _ _stringappend_117_ _)) =>
                                            let _stringappend_118_ :=
                                              string_drop _stringappend_116_
                                                (build_ex _stringappend_117_) in
                                            sep_matches_prefix _stringappend_118_ >>= fun w__168 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__168 with
                                            | Some (tt,(existT _ _stringappend_119_ _)) =>
                                               let _stringappend_120_ :=
                                                 string_drop _stringappend_118_
                                                   (build_ex _stringappend_119_) in
                                               match (reg_name_matches_prefix _stringappend_120_) with
                                               | Some (rs1,(existT _ _stringappend_121_ _)) =>
                                                  let _stringappend_122_ :=
                                                    string_drop _stringappend_120_
                                                      (build_ex _stringappend_121_) in
                                                  sep_matches_prefix _stringappend_122_ >>= fun w__169 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__169 with
                                                                 | Some
                                                                   (tt,(existT _ _stringappend_123_ _)) =>
                                                                    let _stringappend_124_ :=
                                                                      string_drop _stringappend_122_
                                                                        (build_ex _stringappend_123_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_124_) with
                                                                         | Some
                                                                           (imm,(existT _ _stringappend_125_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_124_
                                                                                     (build_ex _stringappend_125_)) with
                                                                            | s_ => true
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__170 : bool =>
                                               returnm ((if (w__170) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__171 : bool =>
                                            returnm ((if (w__171) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__172 : bool =>
                                         returnm ((if (w__172) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__173 : bool =>
                                      returnm ((if (w__173) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__174 : bool =>
                                   returnm ((if (w__174) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__175 : bool =>
                                returnm ((if (w__175) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__176 : bool =>
                             returnm ((if (w__176) then true
                                       else false)
                              : bool)) >>= fun w__177 : bool =>
                           (if (w__177) then
                              let _stringappend_108_ :=
                                string_drop _stringappend_0_ (build_ex (projT1 (string_length "s"))) in
                              (match (size_mnemonic_matches_prefix _stringappend_108_) with
                               | Some (size,(existT _ _stringappend_109_ _)) =>
                                  returnm (size, build_ex _stringappend_109_)
                               | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                               end : M ((word_width * {n : Z & ArithFact (n >= 0)}))) >>= fun '(size, existT _ _stringappend_109_ _) =>
                              let _stringappend_110_ :=
                                string_drop _stringappend_108_ (build_ex _stringappend_109_) in
                              (match (maybe_aq_matches_prefix _stringappend_110_) with
                               | Some (aq,(existT _ _stringappend_111_ _)) =>
                                  returnm (aq, build_ex _stringappend_111_)
                               | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                               end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(aq, existT _ _stringappend_111_ _) =>
                              let _stringappend_112_ :=
                                string_drop _stringappend_110_ (build_ex _stringappend_111_) in
                              (match (maybe_rl_matches_prefix _stringappend_112_) with
                               | Some (rl,(existT _ _stringappend_113_ _)) =>
                                  returnm (rl, build_ex _stringappend_113_)
                               | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                               end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rl, existT _ _stringappend_113_ _) =>
                              let _stringappend_114_ :=
                                string_drop _stringappend_112_ (build_ex _stringappend_113_) in
                              (match (spc_matches_prefix _stringappend_114_) with
                               | Some (tt,(existT _ _stringappend_115_ _)) =>
                                  returnm (tt, build_ex _stringappend_115_)
                               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                               end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_115_ _) =>
                              let _stringappend_116_ :=
                                string_drop _stringappend_114_ (build_ex _stringappend_115_) in
                              (match (reg_name_matches_prefix _stringappend_116_) with
                               | Some (rd,(existT _ _stringappend_117_ _)) =>
                                  returnm (rd, build_ex _stringappend_117_)
                               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                               end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_117_ _) =>
                              let _stringappend_118_ :=
                                string_drop _stringappend_116_ (build_ex _stringappend_117_) in
                              sep_matches_prefix _stringappend_118_ >>= fun w__188 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              (match w__188 with
                               | Some (tt,(existT _ _stringappend_119_ _)) =>
                                  returnm (tt, build_ex _stringappend_119_)
                               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                               end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_119_ _) =>
                              let _stringappend_120_ :=
                                string_drop _stringappend_118_ (build_ex _stringappend_119_) in
                              (match (reg_name_matches_prefix _stringappend_120_) with
                               | Some (rs1,(existT _ _stringappend_121_ _)) =>
                                  returnm (rs1, build_ex _stringappend_121_)
                               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                               end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_121_ _) =>
                              let _stringappend_122_ :=
                                string_drop _stringappend_120_ (build_ex _stringappend_121_) in
                              sep_matches_prefix _stringappend_122_ >>= fun w__193 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              (match w__193 with
                               | Some (tt,(existT _ _stringappend_123_ _)) =>
                                  returnm (tt, build_ex _stringappend_123_)
                               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                               end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_123_ _) =>
                              let _stringappend_124_ :=
                                string_drop _stringappend_122_ (build_ex _stringappend_123_) in
                              (match (hex_bits_12_matches_prefix _stringappend_124_) with
                               | Some (imm,(existT _ _stringappend_125_ _)) =>
                                  returnm (imm, build_ex _stringappend_125_)
                               | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                               end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_125_ _) =>
                              returnm ((match (string_drop _stringappend_124_
                                                 (build_ex _stringappend_125_)) with
                                        | s_ =>
                                           Some
                                             ((STORE
                                                 (imm, rs1, rd, size, aq, rl), build_ex (projT1 (sub_nat
                                                                                                   (build_ex (projT1 (string_length
                                                                                                                        arg_)))
                                                                                                   (build_ex (projT1 (string_length
                                                                                                                        s_)))))))
                                        end)
                               : option ((ast * {n : Z & ArithFact (n >= 0)})))
                            else
                              and_boolM
                                (returnm ((string_startswith _stringappend_0_ "addiw")
                                  : bool))
                                (let _stringappend_127_ :=
                                  string_drop _stringappend_0_
                                    (build_ex (projT1 (string_length "addiw"))) in
                                match (spc_matches_prefix _stringappend_127_) with
                                | Some (tt,(existT _ _stringappend_128_ _)) =>
                                   let _stringappend_129_ :=
                                     string_drop _stringappend_127_ (build_ex _stringappend_128_) in
                                   match (reg_name_matches_prefix _stringappend_129_) with
                                   | Some (rd,(existT _ _stringappend_130_ _)) =>
                                      let _stringappend_131_ :=
                                        string_drop _stringappend_129_ (build_ex _stringappend_130_) in
                                      sep_matches_prefix _stringappend_131_ >>= fun w__198 : option ((unit * {n : Z & ArithFact (n >=
                                        0)})) =>
                                      match w__198 with
                                      | Some (tt,(existT _ _stringappend_132_ _)) =>
                                         let _stringappend_133_ :=
                                           string_drop _stringappend_131_
                                             (build_ex _stringappend_132_) in
                                         match (reg_name_matches_prefix _stringappend_133_) with
                                         | Some (rs1,(existT _ _stringappend_134_ _)) =>
                                            let _stringappend_135_ :=
                                              string_drop _stringappend_133_
                                                (build_ex _stringappend_134_) in
                                            sep_matches_prefix _stringappend_135_ >>= fun w__199 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            returnm ((if ((match w__199 with
                                                           | Some
                                                             (tt,(existT _ _stringappend_136_ _)) =>
                                                              let _stringappend_137_ :=
                                                                string_drop _stringappend_135_
                                                                  (build_ex _stringappend_136_) in
                                                              if ((match (hex_bits_12_matches_prefix
                                                                            _stringappend_137_) with
                                                                   | Some
                                                                     (imm,(existT _ _stringappend_138_ _)) =>
                                                                      match (string_drop
                                                                               _stringappend_137_
                                                                               (build_ex _stringappend_138_)) with
                                                                      | s_ => true
                                                                      end
                                                                   | None => false
                                                                   end)) then
                                                                true
                                                              else false
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__200 : bool =>
                                         returnm ((if (w__200) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__201 : bool =>
                                      returnm ((if (w__201) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__202 : bool =>
                                   returnm ((if (w__202) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__203 : bool =>
                                returnm ((if (w__203) then true
                                          else false)
                                 : bool)) >>= fun w__204 : bool =>
                              (if (w__204) then
                                 let _stringappend_127_ :=
                                   string_drop _stringappend_0_
                                     (build_ex (projT1 (string_length "addiw"))) in
                                 (match (spc_matches_prefix _stringappend_127_) with
                                  | Some (tt,(existT _ _stringappend_128_ _)) =>
                                     returnm (tt, build_ex _stringappend_128_)
                                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_128_ _) =>
                                 let _stringappend_129_ :=
                                   string_drop _stringappend_127_ (build_ex _stringappend_128_) in
                                 (match (reg_name_matches_prefix _stringappend_129_) with
                                  | Some (rd,(existT _ _stringappend_130_ _)) =>
                                     returnm (rd, build_ex _stringappend_130_)
                                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_130_ _) =>
                                 let _stringappend_131_ :=
                                   string_drop _stringappend_129_ (build_ex _stringappend_130_) in
                                 sep_matches_prefix _stringappend_131_ >>= fun w__209 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 (match w__209 with
                                  | Some (tt,(existT _ _stringappend_132_ _)) =>
                                     returnm (tt, build_ex _stringappend_132_)
                                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_132_ _) =>
                                 let _stringappend_133_ :=
                                   string_drop _stringappend_131_ (build_ex _stringappend_132_) in
                                 (match (reg_name_matches_prefix _stringappend_133_) with
                                  | Some (rs1,(existT _ _stringappend_134_ _)) =>
                                     returnm (rs1, build_ex _stringappend_134_)
                                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_134_ _) =>
                                 let _stringappend_135_ :=
                                   string_drop _stringappend_133_ (build_ex _stringappend_134_) in
                                 sep_matches_prefix _stringappend_135_ >>= fun w__214 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 (match w__214 with
                                  | Some (tt,(existT _ _stringappend_136_ _)) =>
                                     returnm (tt, build_ex _stringappend_136_)
                                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_136_ _) =>
                                 let _stringappend_137_ :=
                                   string_drop _stringappend_135_ (build_ex _stringappend_136_) in
                                 (match (hex_bits_12_matches_prefix _stringappend_137_) with
                                  | Some (imm,(existT _ _stringappend_138_ _)) =>
                                     returnm (imm, build_ex _stringappend_138_)
                                  | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                                  end : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(imm, existT _ _stringappend_138_ _) =>
                                 returnm ((match (string_drop _stringappend_137_
                                                    (build_ex _stringappend_138_)) with
                                           | s_ =>
                                              Some
                                                ((ADDIW
                                                    (imm, rs1, rd), build_ex (projT1 (sub_nat
                                                                                        (build_ex (projT1 (string_length
                                                                                                             arg_)))
                                                                                        (build_ex (projT1 (string_length
                                                                                                             s_)))))))
                                           end)
                                  : option ((ast * {n : Z & ArithFact (n >= 0)})))
                               else
                                 match (shiftw_mnemonic_matches_prefix _stringappend_0_) with
                                 | Some (op,(existT _ _stringappend_140_ _)) =>
                                    let _stringappend_141_ :=
                                      string_drop _stringappend_0_ (build_ex _stringappend_140_) in
                                    match (spc_matches_prefix _stringappend_141_) with
                                    | Some (tt,(existT _ _stringappend_142_ _)) =>
                                       let _stringappend_143_ :=
                                         string_drop _stringappend_141_
                                           (build_ex _stringappend_142_) in
                                       match (reg_name_matches_prefix _stringappend_143_) with
                                       | Some (rd,(existT _ _stringappend_144_ _)) =>
                                          let _stringappend_145_ :=
                                            string_drop _stringappend_143_
                                              (build_ex _stringappend_144_) in
                                          sep_matches_prefix _stringappend_145_ >>= fun w__219 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          match w__219 with
                                          | Some (tt,(existT _ _stringappend_146_ _)) =>
                                             let _stringappend_147_ :=
                                               string_drop _stringappend_145_
                                                 (build_ex _stringappend_146_) in
                                             match (reg_name_matches_prefix _stringappend_147_) with
                                             | Some (rs1,(existT _ _stringappend_148_ _)) =>
                                                let _stringappend_149_ :=
                                                  string_drop _stringappend_147_
                                                    (build_ex _stringappend_148_) in
                                                sep_matches_prefix _stringappend_149_ >>= fun w__220 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__220 with
                                                               | Some
                                                                 (tt,(existT _ _stringappend_150_ _)) =>
                                                                  let _stringappend_151_ :=
                                                                    string_drop _stringappend_149_
                                                                      (build_ex _stringappend_150_) in
                                                                  if ((match (hex_bits_5_matches_prefix
                                                                                _stringappend_151_) with
                                                                       | Some
                                                                         (shamt,(existT _ _stringappend_152_ _)) =>
                                                                          match (string_drop
                                                                                   _stringappend_151_
                                                                                   (build_ex _stringappend_152_)) with
                                                                          | s_ => true
                                                                          end
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__221 : bool =>
                                             returnm ((if (w__221) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__222 : bool =>
                                          returnm ((if (w__222) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__223 : bool =>
                                       returnm ((if (w__223) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__224 : bool =>
                                    returnm ((if (w__224) then true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__225 : bool =>
                                 (if (w__225) then
                                    (match (shiftw_mnemonic_matches_prefix _stringappend_0_) with
                                     | Some (op,(existT _ _stringappend_140_ _)) =>
                                        returnm (op, build_ex _stringappend_140_)
                                     | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((sop * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_140_ _) =>
                                    let _stringappend_141_ :=
                                      string_drop _stringappend_0_ (build_ex _stringappend_140_) in
                                    (match (spc_matches_prefix _stringappend_141_) with
                                     | Some (tt,(existT _ _stringappend_142_ _)) =>
                                        returnm (tt, build_ex _stringappend_142_)
                                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_142_ _) =>
                                    let _stringappend_143_ :=
                                      string_drop _stringappend_141_ (build_ex _stringappend_142_) in
                                    (match (reg_name_matches_prefix _stringappend_143_) with
                                     | Some (rd,(existT _ _stringappend_144_ _)) =>
                                        returnm (rd, build_ex _stringappend_144_)
                                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_144_ _) =>
                                    let _stringappend_145_ :=
                                      string_drop _stringappend_143_ (build_ex _stringappend_144_) in
                                    sep_matches_prefix _stringappend_145_ >>= fun w__232 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    (match w__232 with
                                     | Some (tt,(existT _ _stringappend_146_ _)) =>
                                        returnm (tt, build_ex _stringappend_146_)
                                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_146_ _) =>
                                    let _stringappend_147_ :=
                                      string_drop _stringappend_145_ (build_ex _stringappend_146_) in
                                    (match (reg_name_matches_prefix _stringappend_147_) with
                                     | Some (rs1,(existT _ _stringappend_148_ _)) =>
                                        returnm (rs1, build_ex _stringappend_148_)
                                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_148_ _) =>
                                    let _stringappend_149_ :=
                                      string_drop _stringappend_147_ (build_ex _stringappend_148_) in
                                    sep_matches_prefix _stringappend_149_ >>= fun w__237 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    (match w__237 with
                                     | Some (tt,(existT _ _stringappend_150_ _)) =>
                                        returnm (tt, build_ex _stringappend_150_)
                                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_150_ _) =>
                                    let _stringappend_151_ :=
                                      string_drop _stringappend_149_ (build_ex _stringappend_150_) in
                                    (match (hex_bits_5_matches_prefix _stringappend_151_) with
                                     | Some (shamt,(existT _ _stringappend_152_ _)) =>
                                        returnm (shamt, build_ex _stringappend_152_)
                                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                     end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(shamt, existT _ _stringappend_152_ _) =>
                                    returnm ((match (string_drop _stringappend_151_
                                                       (build_ex _stringappend_152_)) with
                                              | s_ =>
                                                 Some
                                                   ((SHIFTW
                                                       (shamt, rs1, rd, op), build_ex (projT1 (sub_nat
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      arg_)))
                                                                                                 (build_ex (projT1 (string_length
                                                                                                                      s_)))))))
                                              end)
                                     : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                  else
                                    match (rtypew_mnemonic_matches_prefix _stringappend_0_) with
                                    | Some (op,(existT _ _stringappend_154_ _)) =>
                                       let _stringappend_155_ :=
                                         string_drop _stringappend_0_ (build_ex _stringappend_154_) in
                                       match (spc_matches_prefix _stringappend_155_) with
                                       | Some (tt,(existT _ _stringappend_156_ _)) =>
                                          let _stringappend_157_ :=
                                            string_drop _stringappend_155_
                                              (build_ex _stringappend_156_) in
                                          match (reg_name_matches_prefix _stringappend_157_) with
                                          | Some (rd,(existT _ _stringappend_158_ _)) =>
                                             let _stringappend_159_ :=
                                               string_drop _stringappend_157_
                                                 (build_ex _stringappend_158_) in
                                             sep_matches_prefix _stringappend_159_ >>= fun w__242 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__242 with
                                             | Some (tt,(existT _ _stringappend_160_ _)) =>
                                                let _stringappend_161_ :=
                                                  string_drop _stringappend_159_
                                                    (build_ex _stringappend_160_) in
                                                match (reg_name_matches_prefix _stringappend_161_) with
                                                | Some (rs1,(existT _ _stringappend_162_ _)) =>
                                                   let _stringappend_163_ :=
                                                     string_drop _stringappend_161_
                                                       (build_ex _stringappend_162_) in
                                                   sep_matches_prefix _stringappend_163_ >>= fun w__243 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   returnm ((if ((match w__243 with
                                                                  | Some
                                                                    (tt,(existT _ _stringappend_164_ _)) =>
                                                                     let _stringappend_165_ :=
                                                                       string_drop
                                                                         _stringappend_163_
                                                                         (build_ex _stringappend_164_) in
                                                                     if ((match (reg_name_matches_prefix
                                                                                   _stringappend_165_) with
                                                                          | Some
                                                                            (rs2,(existT _ _stringappend_166_ _)) =>
                                                                             match (string_drop
                                                                                      _stringappend_165_
                                                                                      (build_ex _stringappend_166_)) with
                                                                             | s_ => true
                                                                             end
                                                                          | None => false
                                                                          end)) then
                                                                       true
                                                                     else false
                                                                  | None => false
                                                                  end)) then
                                                               true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__244 : bool =>
                                                returnm ((if (w__244) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__245 : bool =>
                                             returnm ((if (w__245) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__246 : bool =>
                                          returnm ((if (w__246) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__247 : bool =>
                                       returnm ((if (w__247) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__248 : bool =>
                                    (if (w__248) then
                                       (match (rtypew_mnemonic_matches_prefix _stringappend_0_) with
                                        | Some (op,(existT _ _stringappend_154_ _)) =>
                                           returnm (op, build_ex _stringappend_154_)
                                        | _ => exit tt  : M ((ropw * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((ropw * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_154_ _) =>
                                       let _stringappend_155_ :=
                                         string_drop _stringappend_0_ (build_ex _stringappend_154_) in
                                       (match (spc_matches_prefix _stringappend_155_) with
                                        | Some (tt,(existT _ _stringappend_156_ _)) =>
                                           returnm (tt, build_ex _stringappend_156_)
                                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_156_ _) =>
                                       let _stringappend_157_ :=
                                         string_drop _stringappend_155_
                                           (build_ex _stringappend_156_) in
                                       (match (reg_name_matches_prefix _stringappend_157_) with
                                        | Some (rd,(existT _ _stringappend_158_ _)) =>
                                           returnm (rd, build_ex _stringappend_158_)
                                        | _ =>
                                           exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_158_ _) =>
                                       let _stringappend_159_ :=
                                         string_drop _stringappend_157_
                                           (build_ex _stringappend_158_) in
                                       sep_matches_prefix _stringappend_159_ >>= fun w__255 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       (match w__255 with
                                        | Some (tt,(existT _ _stringappend_160_ _)) =>
                                           returnm (tt, build_ex _stringappend_160_)
                                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_160_ _) =>
                                       let _stringappend_161_ :=
                                         string_drop _stringappend_159_
                                           (build_ex _stringappend_160_) in
                                       (match (reg_name_matches_prefix _stringappend_161_) with
                                        | Some (rs1,(existT _ _stringappend_162_ _)) =>
                                           returnm (rs1, build_ex _stringappend_162_)
                                        | _ =>
                                           exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_162_ _) =>
                                       let _stringappend_163_ :=
                                         string_drop _stringappend_161_
                                           (build_ex _stringappend_162_) in
                                       sep_matches_prefix _stringappend_163_ >>= fun w__260 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       (match w__260 with
                                        | Some (tt,(existT _ _stringappend_164_ _)) =>
                                           returnm (tt, build_ex _stringappend_164_)
                                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_164_ _) =>
                                       let _stringappend_165_ :=
                                         string_drop _stringappend_163_
                                           (build_ex _stringappend_164_) in
                                       (match (reg_name_matches_prefix _stringappend_165_) with
                                        | Some (rs2,(existT _ _stringappend_166_ _)) =>
                                           returnm (rs2, build_ex _stringappend_166_)
                                        | _ =>
                                           exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                        end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_166_ _) =>
                                       returnm ((match (string_drop _stringappend_165_
                                                          (build_ex _stringappend_166_)) with
                                                 | s_ =>
                                                    Some
                                                      ((RTYPEW
                                                          (rs2, rs1, rd, op), build_ex (projT1 (sub_nat
                                                                                                  (build_ex (projT1 (string_length
                                                                                                                       arg_)))
                                                                                                  (build_ex (projT1 (string_length
                                                                                                                       s_)))))))
                                                 end)
                                        : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                     else
                                       match (shiftiwop_mnemonic_matches_prefix _stringappend_0_) with
                                       | Some (op,(existT _ _stringappend_168_ _)) =>
                                          let _stringappend_169_ :=
                                            string_drop _stringappend_0_
                                              (build_ex _stringappend_168_) in
                                          match (spc_matches_prefix _stringappend_169_) with
                                          | Some (tt,(existT _ _stringappend_170_ _)) =>
                                             let _stringappend_171_ :=
                                               string_drop _stringappend_169_
                                                 (build_ex _stringappend_170_) in
                                             match (reg_name_matches_prefix _stringappend_171_) with
                                             | Some (rd,(existT _ _stringappend_172_ _)) =>
                                                let _stringappend_173_ :=
                                                  string_drop _stringappend_171_
                                                    (build_ex _stringappend_172_) in
                                                sep_matches_prefix _stringappend_173_ >>= fun w__265 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__265 with
                                                               | Some
                                                                 (tt,(existT _ _stringappend_174_ _)) =>
                                                                  let _stringappend_175_ :=
                                                                    string_drop _stringappend_173_
                                                                      (build_ex _stringappend_174_) in
                                                                  if ((match (reg_name_matches_prefix
                                                                                _stringappend_175_) with
                                                                       | Some
                                                                         (rs1,(existT _ _stringappend_176_ _)) =>
                                                                          let _stringappend_177_ :=
                                                                            string_drop
                                                                              _stringappend_175_
                                                                              (build_ex _stringappend_176_) in
                                                                          if ((match (hex_bits_5_matches_prefix
                                                                                        _stringappend_177_) with
                                                                               | Some
                                                                                 (shamt,(existT _ _stringappend_178_ _)) =>
                                                                                  match (string_drop
                                                                                           _stringappend_177_
                                                                                           (build_ex _stringappend_178_)) with
                                                                                  | s_ => true
                                                                                  end
                                                                               | None => false
                                                                               end)) then
                                                                            true
                                                                          else false
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__266 : bool =>
                                             returnm ((if (w__266) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__267 : bool =>
                                          returnm ((if (w__267) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__268 : bool =>
                                       (if (w__268) then
                                          (match (shiftiwop_mnemonic_matches_prefix _stringappend_0_) with
                                           | Some (op,(existT _ _stringappend_168_ _)) =>
                                              returnm (op, build_ex _stringappend_168_)
                                           | _ =>
                                              exit tt  : M ((sopw * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((sopw * {n : Z & ArithFact (n >= 0)}))) >>= fun '(op, existT _ _stringappend_168_ _) =>
                                          let _stringappend_169_ :=
                                            string_drop _stringappend_0_
                                              (build_ex _stringappend_168_) in
                                          (match (spc_matches_prefix _stringappend_169_) with
                                           | Some (tt,(existT _ _stringappend_170_ _)) =>
                                              returnm (tt, build_ex _stringappend_170_)
                                           | _ =>
                                              exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_170_ _) =>
                                          let _stringappend_171_ :=
                                            string_drop _stringappend_169_
                                              (build_ex _stringappend_170_) in
                                          (match (reg_name_matches_prefix _stringappend_171_) with
                                           | Some (rd,(existT _ _stringappend_172_ _)) =>
                                              returnm (rd, build_ex _stringappend_172_)
                                           | _ =>
                                              exit tt
                                               : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_172_ _) =>
                                          let _stringappend_173_ :=
                                            string_drop _stringappend_171_
                                              (build_ex _stringappend_172_) in
                                          sep_matches_prefix _stringappend_173_ >>= fun w__275 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          (match w__275 with
                                           | Some (tt,(existT _ _stringappend_174_ _)) =>
                                              returnm (tt, build_ex _stringappend_174_)
                                           | _ =>
                                              exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_174_ _) =>
                                          let _stringappend_175_ :=
                                            string_drop _stringappend_173_
                                              (build_ex _stringappend_174_) in
                                          (match (reg_name_matches_prefix _stringappend_175_) with
                                           | Some (rs1,(existT _ _stringappend_176_ _)) =>
                                              returnm (rs1, build_ex _stringappend_176_)
                                           | _ =>
                                              exit tt
                                               : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_176_ _) =>
                                          let _stringappend_177_ :=
                                            string_drop _stringappend_175_
                                              (build_ex _stringappend_176_) in
                                          (match (hex_bits_5_matches_prefix _stringappend_177_) with
                                           | Some (shamt,(existT _ _stringappend_178_ _)) =>
                                              returnm (shamt, build_ex _stringappend_178_)
                                           | _ =>
                                              exit tt
                                               : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                           end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(shamt, existT _ _stringappend_178_ _) =>
                                          returnm ((match (string_drop _stringappend_177_
                                                             (build_ex _stringappend_178_)) with
                                                    | s_ =>
                                                       Some
                                                         ((SHIFTIWOP
                                                             (shamt, rs1, rd, op), build_ex (projT1 (sub_nat
                                                                                                       (build_ex (projT1 (string_length
                                                                                                                            arg_)))
                                                                                                       (build_ex (projT1 (string_length
                                                                                                                            s_)))))))
                                                    end)
                                           : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                        else
                                          match (mul_mnemonic_matches_prefix _stringappend_0_) with
                                          | Some
                                            ((high, signed1, signed2),(existT _ _stringappend_180_ _)) =>
                                             let _stringappend_181_ :=
                                               string_drop _stringappend_0_
                                                 (build_ex _stringappend_180_) in
                                             match (spc_matches_prefix _stringappend_181_) with
                                             | Some (tt,(existT _ _stringappend_182_ _)) =>
                                                let _stringappend_183_ :=
                                                  string_drop _stringappend_181_
                                                    (build_ex _stringappend_182_) in
                                                match (reg_name_matches_prefix _stringappend_183_) with
                                                | Some (rd,(existT _ _stringappend_184_ _)) =>
                                                   let _stringappend_185_ :=
                                                     string_drop _stringappend_183_
                                                       (build_ex _stringappend_184_) in
                                                   sep_matches_prefix _stringappend_185_ >>= fun w__282 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__282 with
                                                   | Some (tt,(existT _ _stringappend_186_ _)) =>
                                                      let _stringappend_187_ :=
                                                        string_drop _stringappend_185_
                                                          (build_ex _stringappend_186_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_187_) with
                                                      | Some (rs1,(existT _ _stringappend_188_ _)) =>
                                                         let _stringappend_189_ :=
                                                           string_drop _stringappend_187_
                                                             (build_ex _stringappend_188_) in
                                                         sep_matches_prefix _stringappend_189_ >>= fun w__283 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         returnm ((if ((match w__283 with
                                                                        | Some
                                                                          (tt,(existT _ _stringappend_190_ _)) =>
                                                                           let _stringappend_191_ :=
                                                                             string_drop
                                                                               _stringappend_189_
                                                                               (build_ex _stringappend_190_) in
                                                                           if ((match (reg_name_matches_prefix
                                                                                         _stringappend_191_) with
                                                                                | Some
                                                                                  (rs2,(existT _ _stringappend_192_ _)) =>
                                                                                   match (string_drop
                                                                                            _stringappend_191_
                                                                                            (build_ex _stringappend_192_)) with
                                                                                   | s_ => true
                                                                                   end
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false
                                                                        | None => false
                                                                        end)) then
                                                                     true
                                                                   else false)
                                                          : bool)
                                                      | None => returnm (false  : bool)
                                                      end >>= fun w__284 : bool =>
                                                      returnm ((if (w__284) then true
                                                                else false)
                                                       : bool)
                                                   | None => returnm (false  : bool)
                                                   end >>= fun w__285 : bool =>
                                                   returnm ((if (w__285) then true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__286 : bool =>
                                                returnm ((if (w__286) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__287 : bool =>
                                             returnm ((if (w__287) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__288 : bool =>
                                          (if (w__288) then
                                             (match (mul_mnemonic_matches_prefix _stringappend_0_) with
                                              | Some
                                                ((high, signed1, signed2),(existT _ _stringappend_180_ _)) =>
                                                 returnm ((high, signed1, signed2), build_ex _stringappend_180_)
                                              | _ =>
                                                 exit tt
                                                  : M (((bool * bool * bool) * {n : Z & ArithFact (n >=
                                                   0)}))
                                              end : M (((bool * bool * bool) * {n : Z & ArithFact (n >=
                                               0)}))) >>= fun '((high, signed1, signed2), existT _ _stringappend_180_ _) =>
                                             let _stringappend_181_ :=
                                               string_drop _stringappend_0_
                                                 (build_ex _stringappend_180_) in
                                             (match (spc_matches_prefix _stringappend_181_) with
                                              | Some (tt,(existT _ _stringappend_182_ _)) =>
                                                 returnm (tt, build_ex _stringappend_182_)
                                              | _ =>
                                                 exit tt
                                                  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_182_ _) =>
                                             let _stringappend_183_ :=
                                               string_drop _stringappend_181_
                                                 (build_ex _stringappend_182_) in
                                             (match (reg_name_matches_prefix _stringappend_183_) with
                                              | Some (rd,(existT _ _stringappend_184_ _)) =>
                                                 returnm (rd, build_ex _stringappend_184_)
                                              | _ =>
                                                 exit tt
                                                  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_184_ _) =>
                                             let _stringappend_185_ :=
                                               string_drop _stringappend_183_
                                                 (build_ex _stringappend_184_) in
                                             sep_matches_prefix _stringappend_185_ >>= fun w__295 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             (match w__295 with
                                              | Some (tt,(existT _ _stringappend_186_ _)) =>
                                                 returnm (tt, build_ex _stringappend_186_)
                                              | _ =>
                                                 exit tt
                                                  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_186_ _) =>
                                             let _stringappend_187_ :=
                                               string_drop _stringappend_185_
                                                 (build_ex _stringappend_186_) in
                                             (match (reg_name_matches_prefix _stringappend_187_) with
                                              | Some (rs1,(existT _ _stringappend_188_ _)) =>
                                                 returnm (rs1, build_ex _stringappend_188_)
                                              | _ =>
                                                 exit tt
                                                  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_188_ _) =>
                                             let _stringappend_189_ :=
                                               string_drop _stringappend_187_
                                                 (build_ex _stringappend_188_) in
                                             sep_matches_prefix _stringappend_189_ >>= fun w__300 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             (match w__300 with
                                              | Some (tt,(existT _ _stringappend_190_ _)) =>
                                                 returnm (tt, build_ex _stringappend_190_)
                                              | _ =>
                                                 exit tt
                                                  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_190_ _) =>
                                             let _stringappend_191_ :=
                                               string_drop _stringappend_189_
                                                 (build_ex _stringappend_190_) in
                                             (match (reg_name_matches_prefix _stringappend_191_) with
                                              | Some (rs2,(existT _ _stringappend_192_ _)) =>
                                                 returnm (rs2, build_ex _stringappend_192_)
                                              | _ =>
                                                 exit tt
                                                  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                              end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_192_ _) =>
                                             returnm ((match (string_drop _stringappend_191_
                                                                (build_ex _stringappend_192_)) with
                                                       | s_ =>
                                                          Some
                                                            ((MUL
                                                                (rs2, rs1, rd, high, signed1,
                                                                signed2), build_ex (projT1 (sub_nat
                                                                                              (build_ex (projT1 (string_length
                                                                                                                   arg_)))
                                                                                              (build_ex (projT1 (string_length
                                                                                                                   s_)))))))
                                                       end)
                                              : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                           else
                                             and_boolM
                                               (returnm ((string_startswith _stringappend_0_ "div")
                                                 : bool))
                                               (let _stringappend_194_ :=
                                                 string_drop _stringappend_0_
                                                   (build_ex (projT1 (string_length "div"))) in
                                               match (maybe_not_u_matches_prefix _stringappend_194_) with
                                               | Some (s,(existT _ _stringappend_195_ _)) =>
                                                  let _stringappend_196_ :=
                                                    string_drop _stringappend_194_
                                                      (build_ex _stringappend_195_) in
                                                  match (spc_matches_prefix _stringappend_196_) with
                                                  | Some (tt,(existT _ _stringappend_197_ _)) =>
                                                     let _stringappend_198_ :=
                                                       string_drop _stringappend_196_
                                                         (build_ex _stringappend_197_) in
                                                     match (reg_name_matches_prefix
                                                              _stringappend_198_) with
                                                     | Some (rd,(existT _ _stringappend_199_ _)) =>
                                                        let _stringappend_200_ :=
                                                          string_drop _stringappend_198_
                                                            (build_ex _stringappend_199_) in
                                                        sep_matches_prefix _stringappend_200_ >>= fun w__305 : option ((unit * {n : Z & ArithFact (n >=
                                                          0)})) =>
                                                        match w__305 with
                                                        | Some (tt,(existT _ _stringappend_201_ _)) =>
                                                           let _stringappend_202_ :=
                                                             string_drop _stringappend_200_
                                                               (build_ex _stringappend_201_) in
                                                           match (reg_name_matches_prefix
                                                                    _stringappend_202_) with
                                                           | Some
                                                             (rs1,(existT _ _stringappend_203_ _)) =>
                                                              let _stringappend_204_ :=
                                                                string_drop _stringappend_202_
                                                                  (build_ex _stringappend_203_) in
                                                              sep_matches_prefix _stringappend_204_ >>= fun w__306 : option ((unit * {n : Z & ArithFact (n >=
                                                                0)})) =>
                                                              returnm ((if ((match w__306 with
                                                                             | Some
                                                                               (tt,(existT _ _stringappend_205_ _)) =>
                                                                                let _stringappend_206_ :=
                                                                                  string_drop
                                                                                    _stringappend_204_
                                                                                    (build_ex _stringappend_205_) in
                                                                                if ((match (reg_name_matches_prefix
                                                                                              _stringappend_206_) with
                                                                                     | Some
                                                                                       (rs2,(existT _ _stringappend_207_ _)) =>
                                                                                        match (string_drop
                                                                                                 _stringappend_206_
                                                                                                 (build_ex _stringappend_207_)) with
                                                                                        | s_ => true
                                                                                        end
                                                                                     | None => false
                                                                                     end)) then
                                                                                  true
                                                                                else false
                                                                             | None => false
                                                                             end)) then
                                                                          true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__307 : bool =>
                                                           returnm ((if (w__307) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__308 : bool =>
                                                        returnm ((if (w__308) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__309 : bool =>
                                                     returnm ((if (w__309) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__310 : bool =>
                                                  returnm ((if (w__310) then true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__311 : bool =>
                                               returnm ((if (w__311) then true
                                                         else false)
                                                : bool)) >>= fun w__312 : bool =>
                                             (if (w__312) then
                                                let _stringappend_194_ :=
                                                  string_drop _stringappend_0_
                                                    (build_ex (projT1 (string_length "div"))) in
                                                (match (maybe_not_u_matches_prefix
                                                          _stringappend_194_) with
                                                 | Some (s,(existT _ _stringappend_195_ _)) =>
                                                    returnm (s, build_ex _stringappend_195_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(s, existT _ _stringappend_195_ _) =>
                                                let _stringappend_196_ :=
                                                  string_drop _stringappend_194_
                                                    (build_ex _stringappend_195_) in
                                                (match (spc_matches_prefix _stringappend_196_) with
                                                 | Some (tt,(existT _ _stringappend_197_ _)) =>
                                                    returnm (tt, build_ex _stringappend_197_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_197_ _) =>
                                                let _stringappend_198_ :=
                                                  string_drop _stringappend_196_
                                                    (build_ex _stringappend_197_) in
                                                (match (reg_name_matches_prefix _stringappend_198_) with
                                                 | Some (rd,(existT _ _stringappend_199_ _)) =>
                                                    returnm (rd, build_ex _stringappend_199_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_199_ _) =>
                                                let _stringappend_200_ :=
                                                  string_drop _stringappend_198_
                                                    (build_ex _stringappend_199_) in
                                                sep_matches_prefix _stringappend_200_ >>= fun w__319 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                (match w__319 with
                                                 | Some (tt,(existT _ _stringappend_201_ _)) =>
                                                    returnm (tt, build_ex _stringappend_201_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_201_ _) =>
                                                let _stringappend_202_ :=
                                                  string_drop _stringappend_200_
                                                    (build_ex _stringappend_201_) in
                                                (match (reg_name_matches_prefix _stringappend_202_) with
                                                 | Some (rs1,(existT _ _stringappend_203_ _)) =>
                                                    returnm (rs1, build_ex _stringappend_203_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_203_ _) =>
                                                let _stringappend_204_ :=
                                                  string_drop _stringappend_202_
                                                    (build_ex _stringappend_203_) in
                                                sep_matches_prefix _stringappend_204_ >>= fun w__324 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                (match w__324 with
                                                 | Some (tt,(existT _ _stringappend_205_ _)) =>
                                                    returnm (tt, build_ex _stringappend_205_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_205_ _) =>
                                                let _stringappend_206_ :=
                                                  string_drop _stringappend_204_
                                                    (build_ex _stringappend_205_) in
                                                (match (reg_name_matches_prefix _stringappend_206_) with
                                                 | Some (rs2,(existT _ _stringappend_207_ _)) =>
                                                    returnm (rs2, build_ex _stringappend_207_)
                                                 | _ =>
                                                    exit tt
                                                     : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                 end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_207_ _) =>
                                                returnm ((match (string_drop _stringappend_206_
                                                                   (build_ex _stringappend_207_)) with
                                                          | s_ =>
                                                             Some
                                                               ((DIV
                                                                   (rs2, rs1, rd, s), build_ex (projT1 (sub_nat
                                                                                                          (build_ex (projT1 (string_length
                                                                                                                               arg_)))
                                                                                                          (build_ex (projT1 (string_length
                                                                                                                               s_)))))))
                                                          end)
                                                 : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                              else
                                                and_boolM
                                                  (returnm ((string_startswith _stringappend_0_
                                                               "rem")
                                                    : bool))
                                                  (let _stringappend_209_ :=
                                                    string_drop _stringappend_0_
                                                      (build_ex (projT1 (string_length "rem"))) in
                                                  match (maybe_not_u_matches_prefix
                                                           _stringappend_209_) with
                                                  | Some (s,(existT _ _stringappend_210_ _)) =>
                                                     let _stringappend_211_ :=
                                                       string_drop _stringappend_209_
                                                         (build_ex _stringappend_210_) in
                                                     match (spc_matches_prefix _stringappend_211_) with
                                                     | Some (tt,(existT _ _stringappend_212_ _)) =>
                                                        let _stringappend_213_ :=
                                                          string_drop _stringappend_211_
                                                            (build_ex _stringappend_212_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_213_) with
                                                        | Some (rd,(existT _ _stringappend_214_ _)) =>
                                                           let _stringappend_215_ :=
                                                             string_drop _stringappend_213_
                                                               (build_ex _stringappend_214_) in
                                                           sep_matches_prefix _stringappend_215_ >>= fun w__329 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__329 with
                                                           | Some
                                                             (tt,(existT _ _stringappend_216_ _)) =>
                                                              let _stringappend_217_ :=
                                                                string_drop _stringappend_215_
                                                                  (build_ex _stringappend_216_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_217_) with
                                                              | Some
                                                                (rs1,(existT _ _stringappend_218_ _)) =>
                                                                 let _stringappend_219_ :=
                                                                   string_drop _stringappend_217_
                                                                     (build_ex _stringappend_218_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_219_ >>= fun w__330 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__330 with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_220_ _)) =>
                                                                                   let _stringappend_221_ :=
                                                                                     string_drop
                                                                                       _stringappend_219_
                                                                                       (build_ex _stringappend_220_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_221_) with
                                                                                        | Some
                                                                                          (rs2,(existT _ _stringappend_222_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_221_
                                                                                                    (build_ex _stringappend_222_)) with
                                                                                           | s_ =>
                                                                                              true
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__331 : bool =>
                                                              returnm ((if (w__331) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__332 : bool =>
                                                           returnm ((if (w__332) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__333 : bool =>
                                                        returnm ((if (w__333) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__334 : bool =>
                                                     returnm ((if (w__334) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__335 : bool =>
                                                  returnm ((if (w__335) then true
                                                            else false)
                                                   : bool)) >>= fun w__336 : bool =>
                                                (if (w__336) then
                                                   let _stringappend_209_ :=
                                                     string_drop _stringappend_0_
                                                       (build_ex (projT1 (string_length "rem"))) in
                                                   (match (maybe_not_u_matches_prefix
                                                             _stringappend_209_) with
                                                    | Some (s,(existT _ _stringappend_210_ _)) =>
                                                       returnm (s, build_ex _stringappend_210_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((bool * {n : Z & ArithFact (n >= 0)}))) >>= fun '(s, existT _ _stringappend_210_ _) =>
                                                   let _stringappend_211_ :=
                                                     string_drop _stringappend_209_
                                                       (build_ex _stringappend_210_) in
                                                   (match (spc_matches_prefix _stringappend_211_) with
                                                    | Some (tt,(existT _ _stringappend_212_ _)) =>
                                                       returnm (tt, build_ex _stringappend_212_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_212_ _) =>
                                                   let _stringappend_213_ :=
                                                     string_drop _stringappend_211_
                                                       (build_ex _stringappend_212_) in
                                                   (match (reg_name_matches_prefix
                                                             _stringappend_213_) with
                                                    | Some (rd,(existT _ _stringappend_214_ _)) =>
                                                       returnm (rd, build_ex _stringappend_214_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rd, existT _ _stringappend_214_ _) =>
                                                   let _stringappend_215_ :=
                                                     string_drop _stringappend_213_
                                                       (build_ex _stringappend_214_) in
                                                   sep_matches_prefix _stringappend_215_ >>= fun w__343 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   (match w__343 with
                                                    | Some (tt,(existT _ _stringappend_216_ _)) =>
                                                       returnm (tt, build_ex _stringappend_216_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_216_ _) =>
                                                   let _stringappend_217_ :=
                                                     string_drop _stringappend_215_
                                                       (build_ex _stringappend_216_) in
                                                   (match (reg_name_matches_prefix
                                                             _stringappend_217_) with
                                                    | Some (rs1,(existT _ _stringappend_218_ _)) =>
                                                       returnm (rs1, build_ex _stringappend_218_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs1, existT _ _stringappend_218_ _) =>
                                                   let _stringappend_219_ :=
                                                     string_drop _stringappend_217_
                                                       (build_ex _stringappend_218_) in
                                                   sep_matches_prefix _stringappend_219_ >>= fun w__348 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   (match w__348 with
                                                    | Some (tt,(existT _ _stringappend_220_ _)) =>
                                                       returnm (tt, build_ex _stringappend_220_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_220_ _) =>
                                                   let _stringappend_221_ :=
                                                     string_drop _stringappend_219_
                                                       (build_ex _stringappend_220_) in
                                                   (match (reg_name_matches_prefix
                                                             _stringappend_221_) with
                                                    | Some (rs2,(existT _ _stringappend_222_ _)) =>
                                                       returnm (rs2, build_ex _stringappend_222_)
                                                    | _ =>
                                                       exit tt
                                                        : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                    end : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))) >>= fun '(rs2, existT _ _stringappend_222_ _) =>
                                                   returnm ((match (string_drop _stringappend_221_
                                                                      (build_ex _stringappend_222_)) with
                                                             | s_ =>
                                                                Some
                                                                  ((REM
                                                                      (rs2, rs1, rd, s), build_ex (projT1 (sub_nat
                                                                                                             (build_ex (projT1 (string_length
                                                                                                                                  arg_)))
                                                                                                             (build_ex (projT1 (string_length
                                                                                                                                  s_)))))))
                                                             end)
                                                    : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                                 else
                                                   and_boolM
                                                     (returnm ((string_startswith _stringappend_0_
                                                                  "mulw")
                                                       : bool))
                                                     (let _stringappend_224_ :=
                                                       string_drop _stringappend_0_
                                                         (build_ex (projT1 (string_length "mulw"))) in
                                                     match (spc_matches_prefix _stringappend_224_) with
                                                     | Some (tt,(existT _ _stringappend_225_ _)) =>
                                                        let _stringappend_226_ :=
                                                          string_drop _stringappend_224_
                                                            (build_ex _stringappend_225_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_226_) with
                                                        | Some (rd,(existT _ _stringappend_227_ _)) =>
                                                           let _stringappend_228_ :=
                                                             string_drop _stringappend_226_
                                                               (build_ex _stringappend_227_) in
                                                           sep_matches_prefix _stringappend_228_ >>= fun w__353 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__353 with
                                                           | Some
                                                             (tt,(existT _ _stringappend_229_ _)) =>
                                                              let _stringappend_230_ :=
                                                                string_drop _stringappend_228_
                                                                  (build_ex _stringappend_229_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_230_) with
                                                              | Some
                                                                (rs1,(existT _ _stringappend_231_ _)) =>
                                                                 let _stringappend_232_ :=
                                                                   string_drop _stringappend_230_
                                                                     (build_ex _stringappend_231_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_232_ >>= fun w__354 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__354 with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_233_ _)) =>
                                                                                   let _stringappend_234_ :=
                                                                                     string_drop
                                                                                       _stringappend_232_
                                                                                       (build_ex _stringappend_233_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_234_) with
                                                                                        | Some
                                                                                          (rs2,(existT _ _stringappend_235_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_234_
                                                                                                    (build_ex _stringappend_235_)) with
                                                                                           | s_ =>
                                                                                              true
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__355 : bool =>
                                                              returnm ((if (w__355) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__356 : bool =>
                                                           returnm ((if (w__356) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__357 : bool =>
                                                        returnm ((if (w__357) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__358 : bool =>
                                                     returnm ((if (w__358) then true
                                                               else false)
                                                      : bool)) >>= fun w__359 : bool =>
                                                   (if (w__359) then
                                                      let _stringappend_224_ :=
                                                        string_drop _stringappend_0_
                                                          (build_ex (projT1 (string_length "mulw"))) in
                                                      (match (spc_matches_prefix _stringappend_224_) with
                                                       | Some (tt,(existT _ _stringappend_225_ _)) =>
                                                          returnm (tt, build_ex _stringappend_225_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_225_ _) =>
                                                      let _stringappend_226_ :=
                                                        string_drop _stringappend_224_
                                                          (build_ex _stringappend_225_) in
                                                      (match (reg_name_matches_prefix
                                                                _stringappend_226_) with
                                                       | Some (rd,(existT _ _stringappend_227_ _)) =>
                                                          returnm (rd, build_ex _stringappend_227_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                            0)}))
                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                        0)}))) >>= fun '(rd, existT _ _stringappend_227_ _) =>
                                                      let _stringappend_228_ :=
                                                        string_drop _stringappend_226_
                                                          (build_ex _stringappend_227_) in
                                                      sep_matches_prefix _stringappend_228_ >>= fun w__364 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      (match w__364 with
                                                       | Some (tt,(existT _ _stringappend_229_ _)) =>
                                                          returnm (tt, build_ex _stringappend_229_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_229_ _) =>
                                                      let _stringappend_230_ :=
                                                        string_drop _stringappend_228_
                                                          (build_ex _stringappend_229_) in
                                                      (match (reg_name_matches_prefix
                                                                _stringappend_230_) with
                                                       | Some (rs1,(existT _ _stringappend_231_ _)) =>
                                                          returnm (rs1, build_ex _stringappend_231_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                            0)}))
                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                        0)}))) >>= fun '(rs1, existT _ _stringappend_231_ _) =>
                                                      let _stringappend_232_ :=
                                                        string_drop _stringappend_230_
                                                          (build_ex _stringappend_231_) in
                                                      sep_matches_prefix _stringappend_232_ >>= fun w__369 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      (match w__369 with
                                                       | Some (tt,(existT _ _stringappend_233_ _)) =>
                                                          returnm (tt, build_ex _stringappend_233_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                       end : M ((unit * {n : Z & ArithFact (n >= 0)}))) >>= fun '(tt, existT _ _stringappend_233_ _) =>
                                                      let _stringappend_234_ :=
                                                        string_drop _stringappend_232_
                                                          (build_ex _stringappend_233_) in
                                                      (match (reg_name_matches_prefix
                                                                _stringappend_234_) with
                                                       | Some (rs2,(existT _ _stringappend_235_ _)) =>
                                                          returnm (rs2, build_ex _stringappend_235_)
                                                       | _ =>
                                                          exit tt
                                                           : M ((mword 5 * {n : Z & ArithFact (n >=
                                                            0)}))
                                                       end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                        0)}))) >>= fun '(rs2, existT _ _stringappend_235_ _) =>
                                                      returnm ((match (string_drop
                                                                         _stringappend_234_
                                                                         (build_ex _stringappend_235_)) with
                                                                | s_ =>
                                                                   Some
                                                                     ((MULW
                                                                         (rs2, rs1, rd), build_ex (projT1 (sub_nat
                                                                                                             (build_ex (projT1 (string_length
                                                                                                                                  arg_)))
                                                                                                             (build_ex (projT1 (string_length
                                                                                                                                  s_)))))))
                                                                end)
                                                       : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                                    else
                                                      and_boolM
                                                        (returnm ((string_startswith
                                                                     _stringappend_0_ "div")
                                                          : bool))
                                                        (let _stringappend_237_ :=
                                                          string_drop _stringappend_0_
                                                            (build_ex (projT1 (string_length "div"))) in
                                                        match (maybe_not_u_matches_prefix
                                                                 _stringappend_237_) with
                                                        | Some (s,(existT _ _stringappend_238_ _)) =>
                                                           let _stringappend_239_ :=
                                                             string_drop _stringappend_237_
                                                               (build_ex _stringappend_238_) in
                                                           and_boolM
                                                             (returnm ((string_startswith
                                                                          _stringappend_239_ "w")
                                                               : bool))
                                                             (let _stringappend_240_ :=
                                                               string_drop _stringappend_239_
                                                                 (build_ex (projT1 (string_length
                                                                                      "w"))) in
                                                             match (spc_matches_prefix
                                                                      _stringappend_240_) with
                                                             | Some
                                                               (tt,(existT _ _stringappend_241_ _)) =>
                                                                let _stringappend_242_ :=
                                                                  string_drop _stringappend_240_
                                                                    (build_ex _stringappend_241_) in
                                                                match (reg_name_matches_prefix
                                                                         _stringappend_242_) with
                                                                | Some
                                                                  (rd,(existT _ _stringappend_243_ _)) =>
                                                                   let _stringappend_244_ :=
                                                                     string_drop _stringappend_242_
                                                                       (build_ex _stringappend_243_) in
                                                                   sep_matches_prefix
                                                                     _stringappend_244_ >>= fun w__374 : option ((unit * {n : Z & ArithFact (n >=
                                                                     0)})) =>
                                                                   match w__374 with
                                                                   | Some
                                                                     (tt,(existT _ _stringappend_245_ _)) =>
                                                                      let _stringappend_246_ :=
                                                                        string_drop
                                                                          _stringappend_244_
                                                                          (build_ex _stringappend_245_) in
                                                                      match (reg_name_matches_prefix
                                                                               _stringappend_246_) with
                                                                      | Some
                                                                        (rs1,(existT _ _stringappend_247_ _)) =>
                                                                         let _stringappend_248_ :=
                                                                           string_drop
                                                                             _stringappend_246_
                                                                             (build_ex _stringappend_247_) in
                                                                         sep_matches_prefix
                                                                           _stringappend_248_ >>= fun w__375 : option ((unit * {n : Z & ArithFact (n >=
                                                                           0)})) =>
                                                                         returnm ((if ((match w__375 with
                                                                                        | Some
                                                                                          (tt,(existT _ _stringappend_249_ _)) =>
                                                                                           let _stringappend_250_ :=
                                                                                             string_drop
                                                                                               _stringappend_248_
                                                                                               (build_ex _stringappend_249_) in
                                                                                           if ((match (reg_name_matches_prefix
                                                                                                         _stringappend_250_) with
                                                                                                | Some
                                                                                                  (rs2,(existT _ _stringappend_251_ _)) =>
                                                                                                   match (string_drop
                                                                                                            _stringappend_250_
                                                                                                            (build_ex _stringappend_251_)) with
                                                                                                   | s_ =>
                                                                                                      true
                                                                                                   end
                                                                                                | None =>
                                                                                                   false
                                                                                                end))
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__376 : bool =>
                                                                      returnm ((if (w__376) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__377 : bool =>
                                                                   returnm ((if (w__377) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__378 : bool =>
                                                                returnm ((if (w__378) then true
                                                                          else false)
                                                                 : bool)
                                                             | None => returnm (false  : bool)
                                                             end >>= fun w__379 : bool =>
                                                             returnm ((if (w__379) then true
                                                                       else false)
                                                              : bool)) >>= fun w__380 : bool =>
                                                           returnm ((if (w__380) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__381 : bool =>
                                                        returnm ((if (w__381) then true
                                                                  else false)
                                                         : bool)) >>= fun w__382 : bool =>
                                                      (if (w__382) then
                                                         let _stringappend_237_ :=
                                                           string_drop _stringappend_0_
                                                             (build_ex (projT1 (string_length "div"))) in
                                                         (match (maybe_not_u_matches_prefix
                                                                   _stringappend_237_) with
                                                          | Some (s,(existT _ _stringappend_238_ _)) =>
                                                             returnm (s, build_ex _stringappend_238_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((bool * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((bool * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(s, existT _ _stringappend_238_ _) =>
                                                         let _stringappend_239_ :=
                                                           string_drop _stringappend_237_
                                                             (build_ex _stringappend_238_) in
                                                         let _stringappend_240_ :=
                                                           string_drop _stringappend_239_
                                                             (build_ex (projT1 (string_length "w"))) in
                                                         (match (spc_matches_prefix
                                                                   _stringappend_240_) with
                                                          | Some
                                                            (tt,(existT _ _stringappend_241_ _)) =>
                                                             returnm (tt, build_ex _stringappend_241_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(tt, existT _ _stringappend_241_ _) =>
                                                         let _stringappend_242_ :=
                                                           string_drop _stringappend_240_
                                                             (build_ex _stringappend_241_) in
                                                         (match (reg_name_matches_prefix
                                                                   _stringappend_242_) with
                                                          | Some
                                                            (rd,(existT _ _stringappend_243_ _)) =>
                                                             returnm (rd, build_ex _stringappend_243_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(rd, existT _ _stringappend_243_ _) =>
                                                         let _stringappend_244_ :=
                                                           string_drop _stringappend_242_
                                                             (build_ex _stringappend_243_) in
                                                         sep_matches_prefix _stringappend_244_ >>= fun w__389 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         (match w__389 with
                                                          | Some
                                                            (tt,(existT _ _stringappend_245_ _)) =>
                                                             returnm (tt, build_ex _stringappend_245_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(tt, existT _ _stringappend_245_ _) =>
                                                         let _stringappend_246_ :=
                                                           string_drop _stringappend_244_
                                                             (build_ex _stringappend_245_) in
                                                         (match (reg_name_matches_prefix
                                                                   _stringappend_246_) with
                                                          | Some
                                                            (rs1,(existT _ _stringappend_247_ _)) =>
                                                             returnm (rs1, build_ex _stringappend_247_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(rs1, existT _ _stringappend_247_ _) =>
                                                         let _stringappend_248_ :=
                                                           string_drop _stringappend_246_
                                                             (build_ex _stringappend_247_) in
                                                         sep_matches_prefix _stringappend_248_ >>= fun w__394 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         (match w__394 with
                                                          | Some
                                                            (tt,(existT _ _stringappend_249_ _)) =>
                                                             returnm (tt, build_ex _stringappend_249_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((unit * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((unit * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(tt, existT _ _stringappend_249_ _) =>
                                                         let _stringappend_250_ :=
                                                           string_drop _stringappend_248_
                                                             (build_ex _stringappend_249_) in
                                                         (match (reg_name_matches_prefix
                                                                   _stringappend_250_) with
                                                          | Some
                                                            (rs2,(existT _ _stringappend_251_ _)) =>
                                                             returnm (rs2, build_ex _stringappend_251_)
                                                          | _ =>
                                                             exit tt
                                                              : M ((mword 5 * {n : Z & ArithFact (n >=
                                                               0)}))
                                                          end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                           0)}))) >>= fun '(rs2, existT _ _stringappend_251_ _) =>
                                                         returnm ((match (string_drop
                                                                            _stringappend_250_
                                                                            (build_ex _stringappend_251_)) with
                                                                   | s_ =>
                                                                      Some
                                                                        ((DIVW
                                                                            (rs2, rs1, rd, s), build_ex (projT1 (sub_nat
                                                                                                                   (build_ex (projT1 (string_length
                                                                                                                                        arg_)))
                                                                                                                   (build_ex (projT1 (string_length
                                                                                                                                        s_)))))))
                                                                   end)
                                                          : option ((ast * {n : Z & ArithFact (n >=
                                                           0)})))
                                                       else
                                                         and_boolM
                                                           (returnm ((string_startswith
                                                                        _stringappend_0_ "rem")
                                                             : bool))
                                                           (let _stringappend_253_ :=
                                                             string_drop _stringappend_0_
                                                               (build_ex (projT1 (string_length
                                                                                    "rem"))) in
                                                           match (maybe_not_u_matches_prefix
                                                                    _stringappend_253_) with
                                                           | Some
                                                             (s,(existT _ _stringappend_254_ _)) =>
                                                              let _stringappend_255_ :=
                                                                string_drop _stringappend_253_
                                                                  (build_ex _stringappend_254_) in
                                                              and_boolM
                                                                (returnm ((string_startswith
                                                                             _stringappend_255_ "w")
                                                                  : bool))
                                                                (let _stringappend_256_ :=
                                                                  string_drop _stringappend_255_
                                                                    (build_ex (projT1 (string_length
                                                                                         "w"))) in
                                                                match (spc_matches_prefix
                                                                         _stringappend_256_) with
                                                                | Some
                                                                  (tt,(existT _ _stringappend_257_ _)) =>
                                                                   let _stringappend_258_ :=
                                                                     string_drop _stringappend_256_
                                                                       (build_ex _stringappend_257_) in
                                                                   match (reg_name_matches_prefix
                                                                            _stringappend_258_) with
                                                                   | Some
                                                                     (rd,(existT _ _stringappend_259_ _)) =>
                                                                      let _stringappend_260_ :=
                                                                        string_drop
                                                                          _stringappend_258_
                                                                          (build_ex _stringappend_259_) in
                                                                      sep_matches_prefix
                                                                        _stringappend_260_ >>= fun w__399 : option ((unit * {n : Z & ArithFact (n >=
                                                                        0)})) =>
                                                                      match w__399 with
                                                                      | Some
                                                                        (tt,(existT _ _stringappend_261_ _)) =>
                                                                         let _stringappend_262_ :=
                                                                           string_drop
                                                                             _stringappend_260_
                                                                             (build_ex _stringappend_261_) in
                                                                         match (reg_name_matches_prefix
                                                                                  _stringappend_262_) with
                                                                         | Some
                                                                           (rs1,(existT _ _stringappend_263_ _)) =>
                                                                            let _stringappend_264_ :=
                                                                              string_drop
                                                                                _stringappend_262_
                                                                                (build_ex _stringappend_263_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_264_ >>= fun w__400 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            returnm ((if ((match w__400 with
                                                                                           | Some
                                                                                             (tt,(existT _ _stringappend_265_ _)) =>
                                                                                              let _stringappend_266_ :=
                                                                                                string_drop
                                                                                                  _stringappend_264_
                                                                                                  (build_ex _stringappend_265_) in
                                                                                              if ((match (reg_name_matches_prefix
                                                                                                            _stringappend_266_) with
                                                                                                   | Some
                                                                                                     (rs2,(existT _ _stringappend_267_ _)) =>
                                                                                                      match (string_drop
                                                                                                               _stringappend_266_
                                                                                                               (build_ex _stringappend_267_)) with
                                                                                                      | s_ =>
                                                                                                         true
                                                                                                      end
                                                                                                   | None =>
                                                                                                      false
                                                                                                   end))
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false
                                                                                           | None =>
                                                                                              false
                                                                                           end))
                                                                                      then
                                                                                        true
                                                                                      else false)
                                                                             : bool)
                                                                         | None =>
                                                                            returnm (false  : bool)
                                                                         end >>= fun w__401 : bool =>
                                                                         returnm ((if (w__401) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__402 : bool =>
                                                                      returnm ((if (w__402) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__403 : bool =>
                                                                   returnm ((if (w__403) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__404 : bool =>
                                                                returnm ((if (w__404) then true
                                                                          else false)
                                                                 : bool)) >>= fun w__405 : bool =>
                                                              returnm ((if (w__405) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__406 : bool =>
                                                           returnm ((if (w__406) then true
                                                                     else false)
                                                            : bool)) >>= fun w__407 : bool =>
                                                         (if (w__407) then
                                                            let _stringappend_253_ :=
                                                              string_drop _stringappend_0_
                                                                (build_ex (projT1 (string_length
                                                                                     "rem"))) in
                                                            (match (maybe_not_u_matches_prefix
                                                                      _stringappend_253_) with
                                                             | Some
                                                               (s,(existT _ _stringappend_254_ _)) =>
                                                                returnm (s, build_ex _stringappend_254_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((bool * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((bool * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(s, existT _ _stringappend_254_ _) =>
                                                            let _stringappend_255_ :=
                                                              string_drop _stringappend_253_
                                                                (build_ex _stringappend_254_) in
                                                            let _stringappend_256_ :=
                                                              string_drop _stringappend_255_
                                                                (build_ex (projT1 (string_length "w"))) in
                                                            (match (spc_matches_prefix
                                                                      _stringappend_256_) with
                                                             | Some
                                                               (tt,(existT _ _stringappend_257_ _)) =>
                                                                returnm (tt, build_ex _stringappend_257_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(tt, existT _ _stringappend_257_ _) =>
                                                            let _stringappend_258_ :=
                                                              string_drop _stringappend_256_
                                                                (build_ex _stringappend_257_) in
                                                            (match (reg_name_matches_prefix
                                                                      _stringappend_258_) with
                                                             | Some
                                                               (rd,(existT _ _stringappend_259_ _)) =>
                                                                returnm (rd, build_ex _stringappend_259_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(rd, existT _ _stringappend_259_ _) =>
                                                            let _stringappend_260_ :=
                                                              string_drop _stringappend_258_
                                                                (build_ex _stringappend_259_) in
                                                            sep_matches_prefix _stringappend_260_ >>= fun w__414 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            (match w__414 with
                                                             | Some
                                                               (tt,(existT _ _stringappend_261_ _)) =>
                                                                returnm (tt, build_ex _stringappend_261_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(tt, existT _ _stringappend_261_ _) =>
                                                            let _stringappend_262_ :=
                                                              string_drop _stringappend_260_
                                                                (build_ex _stringappend_261_) in
                                                            (match (reg_name_matches_prefix
                                                                      _stringappend_262_) with
                                                             | Some
                                                               (rs1,(existT _ _stringappend_263_ _)) =>
                                                                returnm (rs1, build_ex _stringappend_263_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(rs1, existT _ _stringappend_263_ _) =>
                                                            let _stringappend_264_ :=
                                                              string_drop _stringappend_262_
                                                                (build_ex _stringappend_263_) in
                                                            sep_matches_prefix _stringappend_264_ >>= fun w__419 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            (match w__419 with
                                                             | Some
                                                               (tt,(existT _ _stringappend_265_ _)) =>
                                                                returnm (tt, build_ex _stringappend_265_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((unit * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((unit * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(tt, existT _ _stringappend_265_ _) =>
                                                            let _stringappend_266_ :=
                                                              string_drop _stringappend_264_
                                                                (build_ex _stringappend_265_) in
                                                            (match (reg_name_matches_prefix
                                                                      _stringappend_266_) with
                                                             | Some
                                                               (rs2,(existT _ _stringappend_267_ _)) =>
                                                                returnm (rs2, build_ex _stringappend_267_)
                                                             | _ =>
                                                                exit tt
                                                                 : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                  0)}))
                                                             end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))) >>= fun '(rs2, existT _ _stringappend_267_ _) =>
                                                            returnm ((match (string_drop
                                                                               _stringappend_266_
                                                                               (build_ex _stringappend_267_)) with
                                                                      | s_ =>
                                                                         Some
                                                                           ((REMW
                                                                               (rs2, rs1, rd, s), build_ex (projT1 (sub_nat
                                                                                                                      (build_ex (projT1 (string_length
                                                                                                                                           arg_)))
                                                                                                                      (build_ex (projT1 (string_length
                                                                                                                                           s_)))))))
                                                                      end)
                                                             : option ((ast * {n : Z & ArithFact (n >=
                                                              0)})))
                                                          else
                                                            and_boolM
                                                              (returnm ((string_startswith
                                                                           _stringappend_0_ "fence")
                                                                : bool))
                                                              (let _stringappend_269_ :=
                                                                string_drop _stringappend_0_
                                                                  (build_ex (projT1 (string_length
                                                                                       "fence"))) in
                                                              match (spc_matches_prefix
                                                                       _stringappend_269_) with
                                                              | Some
                                                                (tt,(existT _ _stringappend_270_ _)) =>
                                                                 let _stringappend_271_ :=
                                                                   string_drop _stringappend_269_
                                                                     (build_ex _stringappend_270_) in
                                                                 fence_bits_matches_prefix
                                                                   _stringappend_271_ >>= fun w__424 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 match w__424 with
                                                                 | Some
                                                                   (pred,(existT _ _stringappend_272_ _)) =>
                                                                    let _stringappend_273_ :=
                                                                      string_drop _stringappend_271_
                                                                        (build_ex _stringappend_272_) in
                                                                    sep_matches_prefix
                                                                      _stringappend_273_ >>= fun w__425 : option ((unit * {n : Z & ArithFact (n >=
                                                                      0)})) =>
                                                                    match w__425 with
                                                                    | Some
                                                                      (tt,(existT _ _stringappend_274_ _)) =>
                                                                       let _stringappend_275_ :=
                                                                         string_drop
                                                                           _stringappend_273_
                                                                           (build_ex _stringappend_274_) in
                                                                       fence_bits_matches_prefix
                                                                         _stringappend_275_ >>= fun w__426 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                         0)})) =>
                                                                       returnm ((if ((match w__426 with
                                                                                      | Some
                                                                                        (succ,(existT _ _stringappend_276_ _)) =>
                                                                                         match (string_drop
                                                                                                  _stringappend_275_
                                                                                                  (build_ex _stringappend_276_)) with
                                                                                         | s_ =>
                                                                                            true
                                                                                         end
                                                                                      | None =>
                                                                                         false
                                                                                      end)) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)
                                                                    | None =>
                                                                       returnm (false  : bool)
                                                                    end >>= fun w__427 : bool =>
                                                                    returnm ((if (w__427) then true
                                                                              else false)
                                                                     : bool)
                                                                 | None => returnm (false  : bool)
                                                                 end >>= fun w__428 : bool =>
                                                                 returnm ((if (w__428) then true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__429 : bool =>
                                                              returnm ((if (w__429) then true
                                                                        else false)
                                                               : bool)) >>= fun w__430 : bool =>
                                                            (if (w__430) then
                                                               let _stringappend_269_ :=
                                                                 string_drop _stringappend_0_
                                                                   (build_ex (projT1 (string_length
                                                                                        "fence"))) in
                                                               (match (spc_matches_prefix
                                                                         _stringappend_269_) with
                                                                | Some
                                                                  (tt,(existT _ _stringappend_270_ _)) =>
                                                                   returnm (tt, build_ex _stringappend_270_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_270_ _) =>
                                                               let _stringappend_271_ :=
                                                                 string_drop _stringappend_269_
                                                                   (build_ex _stringappend_270_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_271_ >>= fun w__433 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               (match w__433 with
                                                                | Some
                                                                  (pred,(existT _ _stringappend_272_ _)) =>
                                                                   returnm (pred, build_ex _stringappend_272_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(pred, existT _ _stringappend_272_ _) =>
                                                               let _stringappend_273_ :=
                                                                 string_drop _stringappend_271_
                                                                   (build_ex _stringappend_272_) in
                                                               sep_matches_prefix _stringappend_273_ >>= fun w__436 : option ((unit * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               (match w__436 with
                                                                | Some
                                                                  (tt,(existT _ _stringappend_274_ _)) =>
                                                                   returnm (tt, build_ex _stringappend_274_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((unit * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(tt, existT _ _stringappend_274_ _) =>
                                                               let _stringappend_275_ :=
                                                                 string_drop _stringappend_273_
                                                                   (build_ex _stringappend_274_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_275_ >>= fun w__439 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               (match w__439 with
                                                                | Some
                                                                  (succ,(existT _ _stringappend_276_ _)) =>
                                                                   returnm (succ, build_ex _stringappend_276_)
                                                                | _ =>
                                                                   exit tt
                                                                    : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                     0)}))
                                                                end : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}))) >>= fun '(succ, existT _ _stringappend_276_ _) =>
                                                               returnm ((match (string_drop
                                                                                  _stringappend_275_
                                                                                  (build_ex _stringappend_276_)) with
                                                                         | s_ =>
                                                                            Some
                                                                              ((FENCE
                                                                                  (pred, succ), build_ex (projT1 (sub_nat
                                                                                                                    (build_ex (projT1 (string_length
                                                                                                                                         arg_)))
                                                                                                                    (build_ex (projT1 (string_length
                                                                                                                                         s_)))))))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_
                                                                            "fence.i")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (build_ex (projT1 (string_length
                                                                                                        "fence.i")))) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (build_ex (projT1 (string_length
                                                                                                       "fence.i")))) with
                                                                         | s_ =>
                                                                            Some
                                                                              ((FENCEI
                                                                                  (tt), build_ex (projT1 (sub_nat
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 arg_)))
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 s_)))))))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_ "ecall")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (build_ex (projT1 (string_length
                                                                                                        "ecall")))) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (build_ex (projT1 (string_length
                                                                                                       "ecall")))) with
                                                                         | s_ =>
                                                                            Some
                                                                              ((ECALL
                                                                                  (tt), build_ex (projT1 (sub_nat
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 arg_)))
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 s_)))))))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_ "mret")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (build_ex (projT1 (string_length
                                                                                                        "mret")))) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (build_ex (projT1 (string_length
                                                                                                       "mret")))) with
                                                                         | s_ =>
                                                                            Some
                                                                              ((MRET
                                                                                  (tt), build_ex (projT1 (sub_nat
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 arg_)))
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 s_)))))))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_ "sret")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (build_ex (projT1 (string_length
                                                                                                        "sret")))) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (build_ex (projT1 (string_length
                                                                                                       "sret")))) with
                                                                         | s_ =>
                                                                            Some
                                                                              ((SRET
                                                                                  (tt), build_ex (projT1 (sub_nat
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 arg_)))
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 s_)))))))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_
                                                                            "ebreak")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (build_ex (projT1 (string_length
                                                                                                        "ebreak")))) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (build_ex (projT1 (string_length
                                                                                                       "ebreak")))) with
                                                                         | s_ =>
                                                                            Some
                                                                              ((EBREAK
                                                                                  (tt), build_ex (projT1 (sub_nat
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 arg_)))
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 s_)))))))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_ "wfi")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (build_ex (projT1 (string_length
                                                                                                        "wfi")))) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (build_ex (projT1 (string_length
                                                                                                       "wfi")))) with
                                                                         | s_ =>
                                                                            Some
                                                                              ((WFI
                                                                                  (tt), build_ex (projT1 (sub_nat
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 arg_)))
                                                                                                            (build_ex (projT1 (string_length
                                                                                                                                 s_)))))))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else
                                                               and_boolM
                                                                 (returnm ((string_startswith
                                                                              _stringappend_0_
                                                                              "sfence.vma")
                                                                   : bool))
                                                                 (let _stringappend_284_ :=
                                                                   string_drop _stringappend_0_
                                                                     (build_ex (projT1 (string_length
                                                                                          "sfence.vma"))) in
                                                                 match (spc_matches_prefix
                                                                          _stringappend_284_) with
                                                                 | Some
                                                                   (tt,(existT _ _stringappend_285_ _)) =>
                                                                    let _stringappend_286_ :=
                                                                      string_drop _stringappend_284_
                                                                        (build_ex _stringappend_285_) in
                                                                    match (reg_name_matches_prefix
                                                                             _stringappend_286_) with
                                                                    | Some
                                                                      (rs1,(existT _ _stringappend_287_ _)) =>
                                                                       let _stringappend_288_ :=
                                                                         string_drop
                                                                           _stringappend_286_
                                                                           (build_ex _stringappend_287_) in
                                                                       sep_matches_prefix
                                                                         _stringappend_288_ >>= fun w__442 : option ((unit * {n : Z & ArithFact (n >=
                                                                         0)})) =>
                                                                       returnm ((if ((match w__442 with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_289_ _)) =>
                                                                                         let _stringappend_290_ :=
                                                                                           string_drop
                                                                                             _stringappend_288_
                                                                                             (build_ex _stringappend_289_) in
                                                                                         if ((match (reg_name_matches_prefix
                                                                                                       _stringappend_290_) with
                                                                                              | Some
                                                                                                (rs2,(existT _ _stringappend_291_ _)) =>
                                                                                                 match (string_drop
                                                                                                          _stringappend_290_
                                                                                                          (build_ex _stringappend_291_)) with
                                                                                                 | s_ =>
                                                                                                    true
                                                                                                 end
                                                                                              | None =>
                                                                                                 false
                                                                                              end))
                                                                                         then
                                                                                           true
                                                                                         else false
                                                                                      | None =>
                                                                                         false
                                                                                      end)) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)
                                                                    | None =>
                                                                       returnm (false  : bool)
                                                                    end >>= fun w__443 : bool =>
                                                                    returnm ((if (w__443) then true
                                                                              else false)
                                                                     : bool)
                                                                 | None => returnm (false  : bool)
                                                                 end >>= fun w__444 : bool =>
                                                                 returnm ((if (w__444) then true
                                                                           else false)
                                                                  : bool)) >>= fun w__445 : bool =>
                                                               (if (w__445) then
                                                                  let _stringappend_284_ :=
                                                                    string_drop _stringappend_0_
                                                                      (build_ex (projT1 (string_length
                                                                                           "sfence.vma"))) in
                                                                  (match (spc_matches_prefix
                                                                            _stringappend_284_) with
                                                                   | Some
                                                                     (tt,(existT _ _stringappend_285_ _)) =>
                                                                      returnm (tt, build_ex _stringappend_285_)
                                                                   | _ =>
                                                                      exit tt
                                                                       : M ((unit * {n : Z & ArithFact (n >=
                                                                        0)}))
                                                                   end : M ((unit * {n : Z & ArithFact (n >=
                                                                    0)}))) >>= fun '(tt, existT _ _stringappend_285_ _) =>
                                                                  let _stringappend_286_ :=
                                                                    string_drop _stringappend_284_
                                                                      (build_ex _stringappend_285_) in
                                                                  (match (reg_name_matches_prefix
                                                                            _stringappend_286_) with
                                                                   | Some
                                                                     (rs1,(existT _ _stringappend_287_ _)) =>
                                                                      returnm (rs1, build_ex _stringappend_287_)
                                                                   | _ =>
                                                                      exit tt
                                                                       : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                        0)}))
                                                                   end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                    0)}))) >>= fun '(rs1, existT _ _stringappend_287_ _) =>
                                                                  let _stringappend_288_ :=
                                                                    string_drop _stringappend_286_
                                                                      (build_ex _stringappend_287_) in
                                                                  sep_matches_prefix
                                                                    _stringappend_288_ >>= fun w__450 : option ((unit * {n : Z & ArithFact (n >=
                                                                    0)})) =>
                                                                  (match w__450 with
                                                                   | Some
                                                                     (tt,(existT _ _stringappend_289_ _)) =>
                                                                      returnm (tt, build_ex _stringappend_289_)
                                                                   | _ =>
                                                                      exit tt
                                                                       : M ((unit * {n : Z & ArithFact (n >=
                                                                        0)}))
                                                                   end : M ((unit * {n : Z & ArithFact (n >=
                                                                    0)}))) >>= fun '(tt, existT _ _stringappend_289_ _) =>
                                                                  let _stringappend_290_ :=
                                                                    string_drop _stringappend_288_
                                                                      (build_ex _stringappend_289_) in
                                                                  (match (reg_name_matches_prefix
                                                                            _stringappend_290_) with
                                                                   | Some
                                                                     (rs2,(existT _ _stringappend_291_ _)) =>
                                                                      returnm (rs2, build_ex _stringappend_291_)
                                                                   | _ =>
                                                                      exit tt
                                                                       : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                        0)}))
                                                                   end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                    0)}))) >>= fun '(rs2, existT _ _stringappend_291_ _) =>
                                                                  returnm ((match (string_drop
                                                                                     _stringappend_290_
                                                                                     (build_ex _stringappend_291_)) with
                                                                            | s_ =>
                                                                               Some
                                                                                 ((SFENCE_VMA
                                                                                     (rs1, rs2), build_ex (projT1 (sub_nat
                                                                                                                     (build_ex (projT1 (string_length
                                                                                                                                          arg_)))
                                                                                                                     (build_ex (projT1 (string_length
                                                                                                                                          s_)))))))
                                                                            end)
                                                                   : option ((ast * {n : Z & ArithFact (n >=
                                                                    0)})))
                                                                else
                                                                  and_boolM
                                                                    (returnm ((string_startswith
                                                                                 _stringappend_0_
                                                                                 "lr.")
                                                                      : bool))
                                                                    (let _stringappend_293_ :=
                                                                      string_drop _stringappend_0_
                                                                        (build_ex (projT1 (string_length
                                                                                             "lr."))) in
                                                                    match (maybe_aq_matches_prefix
                                                                             _stringappend_293_) with
                                                                    | Some
                                                                      (aq,(existT _ _stringappend_294_ _)) =>
                                                                       let _stringappend_295_ :=
                                                                         string_drop
                                                                           _stringappend_293_
                                                                           (build_ex _stringappend_294_) in
                                                                       match (maybe_rl_matches_prefix
                                                                                _stringappend_295_) with
                                                                       | Some
                                                                         (rl,(existT _ _stringappend_296_ _)) =>
                                                                          let _stringappend_297_ :=
                                                                            string_drop
                                                                              _stringappend_295_
                                                                              (build_ex _stringappend_296_) in
                                                                          match (size_mnemonic_matches_prefix
                                                                                   _stringappend_297_) with
                                                                          | Some
                                                                            (size,(existT _ _stringappend_298_ _)) =>
                                                                             let _stringappend_299_ :=
                                                                               string_drop
                                                                                 _stringappend_297_
                                                                                 (build_ex _stringappend_298_) in
                                                                             match (spc_matches_prefix
                                                                                      _stringappend_299_) with
                                                                             | Some
                                                                               (tt,(existT _ _stringappend_300_ _)) =>
                                                                                let _stringappend_301_ :=
                                                                                  string_drop
                                                                                    _stringappend_299_
                                                                                    (build_ex _stringappend_300_) in
                                                                                match (reg_name_matches_prefix
                                                                                         _stringappend_301_) with
                                                                                | Some
                                                                                  (rd,(existT _ _stringappend_302_ _)) =>
                                                                                   let _stringappend_303_ :=
                                                                                     string_drop
                                                                                       _stringappend_301_
                                                                                       (build_ex _stringappend_302_) in
                                                                                   sep_matches_prefix
                                                                                     _stringappend_303_ >>= fun w__455 : option ((unit * {n : Z & ArithFact (n >=
                                                                                     0)})) =>
                                                                                   returnm ((if ((match w__455 with
                                                                                                  | Some
                                                                                                    (tt,(existT _ _stringappend_304_ _)) =>
                                                                                                     let _stringappend_305_ :=
                                                                                                       string_drop
                                                                                                         _stringappend_303_
                                                                                                         (build_ex _stringappend_304_) in
                                                                                                     if
                                                                                                       ((match (reg_name_matches_prefix
                                                                                                                  _stringappend_305_) with
                                                                                                         | Some
                                                                                                           (rs1,(existT _ _stringappend_306_ _)) =>
                                                                                                            match (string_drop
                                                                                                                     _stringappend_305_
                                                                                                                     (build_ex _stringappend_306_)) with
                                                                                                            | s_ =>
                                                                                                               true
                                                                                                            end
                                                                                                         | None =>
                                                                                                            false
                                                                                                         end))
                                                                                                     then
                                                                                                       true
                                                                                                     else
                                                                                                       false
                                                                                                  | None =>
                                                                                                     false
                                                                                                  end))
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false)
                                                                                    : bool)
                                                                                | None =>
                                                                                   returnm (false
                                                                                    : bool)
                                                                                end >>= fun w__456 : bool =>
                                                                                returnm ((if (w__456)
                                                                                          then
                                                                                            true
                                                                                          else false)
                                                                                 : bool)
                                                                             | None =>
                                                                                returnm (false
                                                                                 : bool)
                                                                             end >>= fun w__457 : bool =>
                                                                             returnm ((if (w__457)
                                                                                       then
                                                                                         true
                                                                                       else false)
                                                                              : bool)
                                                                          | None =>
                                                                             returnm (false  : bool)
                                                                          end >>= fun w__458 : bool =>
                                                                          returnm ((if (w__458) then
                                                                                      true
                                                                                    else false)
                                                                           : bool)
                                                                       | None =>
                                                                          returnm (false  : bool)
                                                                       end >>= fun w__459 : bool =>
                                                                       returnm ((if (w__459) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)
                                                                    | None =>
                                                                       returnm (false  : bool)
                                                                    end >>= fun w__460 : bool =>
                                                                    returnm ((if (w__460) then true
                                                                              else false)
                                                                     : bool)) >>= fun w__461 : bool =>
                                                                  (if (w__461) then
                                                                     let _stringappend_293_ :=
                                                                       string_drop _stringappend_0_
                                                                         (build_ex (projT1 (string_length
                                                                                              "lr."))) in
                                                                     (match (maybe_aq_matches_prefix
                                                                               _stringappend_293_) with
                                                                      | Some
                                                                        (aq,(existT _ _stringappend_294_ _)) =>
                                                                         returnm (aq, build_ex _stringappend_294_)
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((bool * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end : M ((bool * {n : Z & ArithFact (n >=
                                                                       0)}))) >>= fun '(aq, existT _ _stringappend_294_ _) =>
                                                                     let _stringappend_295_ :=
                                                                       string_drop
                                                                         _stringappend_293_
                                                                         (build_ex _stringappend_294_) in
                                                                     (match (maybe_rl_matches_prefix
                                                                               _stringappend_295_) with
                                                                      | Some
                                                                        (rl,(existT _ _stringappend_296_ _)) =>
                                                                         returnm (rl, build_ex _stringappend_296_)
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((bool * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end : M ((bool * {n : Z & ArithFact (n >=
                                                                       0)}))) >>= fun '(rl, existT _ _stringappend_296_ _) =>
                                                                     let _stringappend_297_ :=
                                                                       string_drop
                                                                         _stringappend_295_
                                                                         (build_ex _stringappend_296_) in
                                                                     (match (size_mnemonic_matches_prefix
                                                                               _stringappend_297_) with
                                                                      | Some
                                                                        (size,(existT _ _stringappend_298_ _)) =>
                                                                         returnm (size, build_ex _stringappend_298_)
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((word_width * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end : M ((word_width * {n : Z & ArithFact (n >=
                                                                       0)}))) >>= fun '(size, existT _ _stringappend_298_ _) =>
                                                                     let _stringappend_299_ :=
                                                                       string_drop
                                                                         _stringappend_297_
                                                                         (build_ex _stringappend_298_) in
                                                                     (match (spc_matches_prefix
                                                                               _stringappend_299_) with
                                                                      | Some
                                                                        (tt,(existT _ _stringappend_300_ _)) =>
                                                                         returnm (tt, build_ex _stringappend_300_)
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end : M ((unit * {n : Z & ArithFact (n >=
                                                                       0)}))) >>= fun '(tt, existT _ _stringappend_300_ _) =>
                                                                     let _stringappend_301_ :=
                                                                       string_drop
                                                                         _stringappend_299_
                                                                         (build_ex _stringappend_300_) in
                                                                     (match (reg_name_matches_prefix
                                                                               _stringappend_301_) with
                                                                      | Some
                                                                        (rd,(existT _ _stringappend_302_ _)) =>
                                                                         returnm (rd, build_ex _stringappend_302_)
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                       0)}))) >>= fun '(rd, existT _ _stringappend_302_ _) =>
                                                                     let _stringappend_303_ :=
                                                                       string_drop
                                                                         _stringappend_301_
                                                                         (build_ex _stringappend_302_) in
                                                                     sep_matches_prefix
                                                                       _stringappend_303_ >>= fun w__472 : option ((unit * {n : Z & ArithFact (n >=
                                                                       0)})) =>
                                                                     (match w__472 with
                                                                      | Some
                                                                        (tt,(existT _ _stringappend_304_ _)) =>
                                                                         returnm (tt, build_ex _stringappend_304_)
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end : M ((unit * {n : Z & ArithFact (n >=
                                                                       0)}))) >>= fun '(tt, existT _ _stringappend_304_ _) =>
                                                                     let _stringappend_305_ :=
                                                                       string_drop
                                                                         _stringappend_303_
                                                                         (build_ex _stringappend_304_) in
                                                                     (match (reg_name_matches_prefix
                                                                               _stringappend_305_) with
                                                                      | Some
                                                                        (rs1,(existT _ _stringappend_306_ _)) =>
                                                                         returnm (rs1, build_ex _stringappend_306_)
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                       0)}))) >>= fun '(rs1, existT _ _stringappend_306_ _) =>
                                                                     returnm ((match (string_drop
                                                                                        _stringappend_305_
                                                                                        (build_ex _stringappend_306_)) with
                                                                               | s_ =>
                                                                                  Some
                                                                                    ((LOADRES
                                                                                        (aq, rl, rs1,
                                                                                        size, rd), build_ex (projT1 (sub_nat
                                                                                                                       (build_ex (projT1 (string_length
                                                                                                                                            arg_)))
                                                                                                                       (build_ex (projT1 (string_length
                                                                                                                                            s_)))))))
                                                                               end)
                                                                      : option ((ast * {n : Z & ArithFact (n >=
                                                                       0)})))
                                                                   else
                                                                     and_boolM
                                                                       (returnm ((string_startswith
                                                                                    _stringappend_0_
                                                                                    "sc.")
                                                                         : bool))
                                                                       (let _stringappend_308_ :=
                                                                         string_drop
                                                                           _stringappend_0_
                                                                           (build_ex (projT1 (string_length
                                                                                                "sc."))) in
                                                                       match (maybe_aq_matches_prefix
                                                                                _stringappend_308_) with
                                                                       | Some
                                                                         (aq,(existT _ _stringappend_309_ _)) =>
                                                                          let _stringappend_310_ :=
                                                                            string_drop
                                                                              _stringappend_308_
                                                                              (build_ex _stringappend_309_) in
                                                                          match (maybe_rl_matches_prefix
                                                                                   _stringappend_310_) with
                                                                          | Some
                                                                            (rl,(existT _ _stringappend_311_ _)) =>
                                                                             let _stringappend_312_ :=
                                                                               string_drop
                                                                                 _stringappend_310_
                                                                                 (build_ex _stringappend_311_) in
                                                                             match (size_mnemonic_matches_prefix
                                                                                      _stringappend_312_) with
                                                                             | Some
                                                                               (size,(existT _ _stringappend_313_ _)) =>
                                                                                let _stringappend_314_ :=
                                                                                  string_drop
                                                                                    _stringappend_312_
                                                                                    (build_ex _stringappend_313_) in
                                                                                match (spc_matches_prefix
                                                                                         _stringappend_314_) with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_315_ _)) =>
                                                                                   let _stringappend_316_ :=
                                                                                     string_drop
                                                                                       _stringappend_314_
                                                                                       (build_ex _stringappend_315_) in
                                                                                   match (reg_name_matches_prefix
                                                                                            _stringappend_316_) with
                                                                                   | Some
                                                                                     (rd,(existT _ _stringappend_317_ _)) =>
                                                                                      let _stringappend_318_ :=
                                                                                        string_drop
                                                                                          _stringappend_316_
                                                                                          (build_ex _stringappend_317_) in
                                                                                      sep_matches_prefix
                                                                                        _stringappend_318_ >>= fun w__477 : option ((unit * {n : Z & ArithFact (n >=
                                                                                        0)})) =>
                                                                                      match w__477 with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_319_ _)) =>
                                                                                         let _stringappend_320_ :=
                                                                                           string_drop
                                                                                             _stringappend_318_
                                                                                             (build_ex _stringappend_319_) in
                                                                                         match (reg_name_matches_prefix
                                                                                                  _stringappend_320_) with
                                                                                         | Some
                                                                                           (rs1,(existT _ _stringappend_321_ _)) =>
                                                                                            let _stringappend_322_ :=
                                                                                              string_drop
                                                                                                _stringappend_320_
                                                                                                (build_ex _stringappend_321_) in
                                                                                            sep_matches_prefix
                                                                                              _stringappend_322_ >>= fun w__478 : option ((unit * {n : Z & ArithFact (n >=
                                                                                              0)})) =>
                                                                                            returnm ((if
                                                                                                        ((match w__478 with
                                                                                                          | Some
                                                                                                            (tt,(existT _ _stringappend_323_ _)) =>
                                                                                                             let _stringappend_324_ :=
                                                                                                               string_drop
                                                                                                                 _stringappend_322_
                                                                                                                 (build_ex _stringappend_323_) in
                                                                                                             if
                                                                                                               ((match (reg_name_matches_prefix
                                                                                                                          _stringappend_324_) with
                                                                                                                 | Some
                                                                                                                   (rs2,(existT _ _stringappend_325_ _)) =>
                                                                                                                    match (string_drop
                                                                                                                             _stringappend_324_
                                                                                                                             (build_ex _stringappend_325_)) with
                                                                                                                    | s_ =>
                                                                                                                       true
                                                                                                                    end
                                                                                                                 | None =>
                                                                                                                    false
                                                                                                                 end))
                                                                                                             then
                                                                                                               true
                                                                                                             else
                                                                                                               false
                                                                                                          | None =>
                                                                                                             false
                                                                                                          end))
                                                                                                      then
                                                                                                        true
                                                                                                      else
                                                                                                        false)
                                                                                             : bool)
                                                                                         | None =>
                                                                                            returnm (false
                                                                                             : bool)
                                                                                         end >>= fun w__479 : bool =>
                                                                                         returnm ((if
                                                                                                     (w__479)
                                                                                                   then
                                                                                                     true
                                                                                                   else
                                                                                                     false)
                                                                                          : bool)
                                                                                      | None =>
                                                                                         returnm (false
                                                                                          : bool)
                                                                                      end >>= fun w__480 : bool =>
                                                                                      returnm ((if (w__480)
                                                                                                then
                                                                                                  true
                                                                                                else
                                                                                                  false)
                                                                                       : bool)
                                                                                   | None =>
                                                                                      returnm (false
                                                                                       : bool)
                                                                                   end >>= fun w__481 : bool =>
                                                                                   returnm ((if (w__481)
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false)
                                                                                    : bool)
                                                                                | None =>
                                                                                   returnm (false
                                                                                    : bool)
                                                                                end >>= fun w__482 : bool =>
                                                                                returnm ((if (w__482)
                                                                                          then
                                                                                            true
                                                                                          else false)
                                                                                 : bool)
                                                                             | None =>
                                                                                returnm (false
                                                                                 : bool)
                                                                             end >>= fun w__483 : bool =>
                                                                             returnm ((if (w__483)
                                                                                       then
                                                                                         true
                                                                                       else false)
                                                                              : bool)
                                                                          | None =>
                                                                             returnm (false  : bool)
                                                                          end >>= fun w__484 : bool =>
                                                                          returnm ((if (w__484) then
                                                                                      true
                                                                                    else false)
                                                                           : bool)
                                                                       | None =>
                                                                          returnm (false  : bool)
                                                                       end >>= fun w__485 : bool =>
                                                                       returnm ((if (w__485) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)) >>= fun w__486 : bool =>
                                                                     (if (w__486) then
                                                                        let _stringappend_308_ :=
                                                                          string_drop
                                                                            _stringappend_0_
                                                                            (build_ex (projT1 (string_length
                                                                                                 "sc."))) in
                                                                        (match (maybe_aq_matches_prefix
                                                                                  _stringappend_308_) with
                                                                         | Some
                                                                           (aq,(existT _ _stringappend_309_ _)) =>
                                                                            returnm (aq, build_ex _stringappend_309_)
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((bool * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end : M ((bool * {n : Z & ArithFact (n >=
                                                                          0)}))) >>= fun '(aq, existT _ _stringappend_309_ _) =>
                                                                        let _stringappend_310_ :=
                                                                          string_drop
                                                                            _stringappend_308_
                                                                            (build_ex _stringappend_309_) in
                                                                        (match (maybe_rl_matches_prefix
                                                                                  _stringappend_310_) with
                                                                         | Some
                                                                           (rl,(existT _ _stringappend_311_ _)) =>
                                                                            returnm (rl, build_ex _stringappend_311_)
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((bool * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end : M ((bool * {n : Z & ArithFact (n >=
                                                                          0)}))) >>= fun '(rl, existT _ _stringappend_311_ _) =>
                                                                        let _stringappend_312_ :=
                                                                          string_drop
                                                                            _stringappend_310_
                                                                            (build_ex _stringappend_311_) in
                                                                        (match (size_mnemonic_matches_prefix
                                                                                  _stringappend_312_) with
                                                                         | Some
                                                                           (size,(existT _ _stringappend_313_ _)) =>
                                                                            returnm (size, build_ex _stringappend_313_)
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((word_width * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end : M ((word_width * {n : Z & ArithFact (n >=
                                                                          0)}))) >>= fun '(size, existT _ _stringappend_313_ _) =>
                                                                        let _stringappend_314_ :=
                                                                          string_drop
                                                                            _stringappend_312_
                                                                            (build_ex _stringappend_313_) in
                                                                        (match (spc_matches_prefix
                                                                                  _stringappend_314_) with
                                                                         | Some
                                                                           (tt,(existT _ _stringappend_315_ _)) =>
                                                                            returnm (tt, build_ex _stringappend_315_)
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end : M ((unit * {n : Z & ArithFact (n >=
                                                                          0)}))) >>= fun '(tt, existT _ _stringappend_315_ _) =>
                                                                        let _stringappend_316_ :=
                                                                          string_drop
                                                                            _stringappend_314_
                                                                            (build_ex _stringappend_315_) in
                                                                        (match (reg_name_matches_prefix
                                                                                  _stringappend_316_) with
                                                                         | Some
                                                                           (rd,(existT _ _stringappend_317_ _)) =>
                                                                            returnm (rd, build_ex _stringappend_317_)
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}))) >>= fun '(rd, existT _ _stringappend_317_ _) =>
                                                                        let _stringappend_318_ :=
                                                                          string_drop
                                                                            _stringappend_316_
                                                                            (build_ex _stringappend_317_) in
                                                                        sep_matches_prefix
                                                                          _stringappend_318_ >>= fun w__497 : option ((unit * {n : Z & ArithFact (n >=
                                                                          0)})) =>
                                                                        (match w__497 with
                                                                         | Some
                                                                           (tt,(existT _ _stringappend_319_ _)) =>
                                                                            returnm (tt, build_ex _stringappend_319_)
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end : M ((unit * {n : Z & ArithFact (n >=
                                                                          0)}))) >>= fun '(tt, existT _ _stringappend_319_ _) =>
                                                                        let _stringappend_320_ :=
                                                                          string_drop
                                                                            _stringappend_318_
                                                                            (build_ex _stringappend_319_) in
                                                                        (match (reg_name_matches_prefix
                                                                                  _stringappend_320_) with
                                                                         | Some
                                                                           (rs1,(existT _ _stringappend_321_ _)) =>
                                                                            returnm (rs1, build_ex _stringappend_321_)
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}))) >>= fun '(rs1, existT _ _stringappend_321_ _) =>
                                                                        let _stringappend_322_ :=
                                                                          string_drop
                                                                            _stringappend_320_
                                                                            (build_ex _stringappend_321_) in
                                                                        sep_matches_prefix
                                                                          _stringappend_322_ >>= fun w__502 : option ((unit * {n : Z & ArithFact (n >=
                                                                          0)})) =>
                                                                        (match w__502 with
                                                                         | Some
                                                                           (tt,(existT _ _stringappend_323_ _)) =>
                                                                            returnm (tt, build_ex _stringappend_323_)
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end : M ((unit * {n : Z & ArithFact (n >=
                                                                          0)}))) >>= fun '(tt, existT _ _stringappend_323_ _) =>
                                                                        let _stringappend_324_ :=
                                                                          string_drop
                                                                            _stringappend_322_
                                                                            (build_ex _stringappend_323_) in
                                                                        (match (reg_name_matches_prefix
                                                                                  _stringappend_324_) with
                                                                         | Some
                                                                           (rs2,(existT _ _stringappend_325_ _)) =>
                                                                            returnm (rs2, build_ex _stringappend_325_)
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}))) >>= fun '(rs2, existT _ _stringappend_325_ _) =>
                                                                        returnm ((match (string_drop
                                                                                           _stringappend_324_
                                                                                           (build_ex _stringappend_325_)) with
                                                                                  | s_ =>
                                                                                     Some
                                                                                       ((STORECON
                                                                                           (aq, rl,
                                                                                           rs2, rs1,
                                                                                           size, rd), build_ex (projT1 (sub_nat
                                                                                                                          (build_ex (projT1 (string_length
                                                                                                                                               arg_)))
                                                                                                                          (build_ex (projT1 (string_length
                                                                                                                                               s_)))))))
                                                                                  end)
                                                                         : option ((ast * {n : Z & ArithFact (n >=
                                                                          0)})))
                                                                      else
                                                                        match (amo_mnemonic_matches_prefix
                                                                                 _stringappend_0_) with
                                                                        | Some
                                                                          (op,(existT _ _stringappend_327_ _)) =>
                                                                           let _stringappend_328_ :=
                                                                             string_drop
                                                                               _stringappend_0_
                                                                               (build_ex _stringappend_327_) in
                                                                           and_boolM
                                                                             (returnm ((string_startswith
                                                                                          _stringappend_328_
                                                                                          ".")
                                                                               : bool))
                                                                             (let _stringappend_329_ :=
                                                                               string_drop
                                                                                 _stringappend_328_
                                                                                 (build_ex (projT1 (string_length
                                                                                                      "."))) in
                                                                             match (size_mnemonic_matches_prefix
                                                                                      _stringappend_329_) with
                                                                             | Some
                                                                               (width,(existT _ _stringappend_330_ _)) =>
                                                                                let _stringappend_331_ :=
                                                                                  string_drop
                                                                                    _stringappend_329_
                                                                                    (build_ex _stringappend_330_) in
                                                                                match (maybe_aq_matches_prefix
                                                                                         _stringappend_331_) with
                                                                                | Some
                                                                                  (aq,(existT _ _stringappend_332_ _)) =>
                                                                                   let _stringappend_333_ :=
                                                                                     string_drop
                                                                                       _stringappend_331_
                                                                                       (build_ex _stringappend_332_) in
                                                                                   match (maybe_rl_matches_prefix
                                                                                            _stringappend_333_) with
                                                                                   | Some
                                                                                     (rl,(existT _ _stringappend_334_ _)) =>
                                                                                      let _stringappend_335_ :=
                                                                                        string_drop
                                                                                          _stringappend_333_
                                                                                          (build_ex _stringappend_334_) in
                                                                                      match (spc_matches_prefix
                                                                                               _stringappend_335_) with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_336_ _)) =>
                                                                                         let _stringappend_337_ :=
                                                                                           string_drop
                                                                                             _stringappend_335_
                                                                                             (build_ex _stringappend_336_) in
                                                                                         match (reg_name_matches_prefix
                                                                                                  _stringappend_337_) with
                                                                                         | Some
                                                                                           (rd,(existT _ _stringappend_338_ _)) =>
                                                                                            let _stringappend_339_ :=
                                                                                              string_drop
                                                                                                _stringappend_337_
                                                                                                (build_ex _stringappend_338_) in
                                                                                            sep_matches_prefix
                                                                                              _stringappend_339_ >>= fun w__507 : option ((unit * {n : Z & ArithFact (n >=
                                                                                              0)})) =>
                                                                                            match w__507 with
                                                                                            | Some
                                                                                              (tt,(existT _ _stringappend_340_ _)) =>
                                                                                               let _stringappend_341_ :=
                                                                                                 string_drop
                                                                                                   _stringappend_339_
                                                                                                   (build_ex _stringappend_340_) in
                                                                                               match (reg_name_matches_prefix
                                                                                                        _stringappend_341_) with
                                                                                               | Some
                                                                                                 (rs1,(existT _ _stringappend_342_ _)) =>
                                                                                                  let _stringappend_343_ :=
                                                                                                    string_drop
                                                                                                      _stringappend_341_
                                                                                                      (build_ex _stringappend_342_) in
                                                                                                  sep_matches_prefix
                                                                                                    _stringappend_343_ >>= fun w__508 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                    0)})) =>
                                                                                                  returnm ((if
                                                                                                              ((match w__508 with
                                                                                                                | Some
                                                                                                                  (tt,(existT _ _stringappend_344_ _)) =>
                                                                                                                   let _stringappend_345_ :=
                                                                                                                     string_drop
                                                                                                                       _stringappend_343_
                                                                                                                       (build_ex _stringappend_344_) in
                                                                                                                   if
                                                                                                                     ((match (reg_name_matches_prefix
                                                                                                                                _stringappend_345_) with
                                                                                                                       | Some
                                                                                                                         (rs2,(existT _ _stringappend_346_ _)) =>
                                                                                                                          match (string_drop
                                                                                                                                   _stringappend_345_
                                                                                                                                   (build_ex _stringappend_346_)) with
                                                                                                                          | s_ =>
                                                                                                                             true
                                                                                                                          end
                                                                                                                       | None =>
                                                                                                                          false
                                                                                                                       end))
                                                                                                                   then
                                                                                                                     true
                                                                                                                   else
                                                                                                                     false
                                                                                                                | None =>
                                                                                                                   false
                                                                                                                end))
                                                                                                            then
                                                                                                              true
                                                                                                            else
                                                                                                              false)
                                                                                                   : bool)
                                                                                               | None =>
                                                                                                  returnm (false
                                                                                                   : bool)
                                                                                               end >>= fun w__509 : bool =>
                                                                                               returnm ((if
                                                                                                           (w__509)
                                                                                                         then
                                                                                                           true
                                                                                                         else
                                                                                                           false)
                                                                                                : bool)
                                                                                            | None =>
                                                                                               returnm (false
                                                                                                : bool)
                                                                                            end >>= fun w__510 : bool =>
                                                                                            returnm ((if
                                                                                                        (w__510)
                                                                                                      then
                                                                                                        true
                                                                                                      else
                                                                                                        false)
                                                                                             : bool)
                                                                                         | None =>
                                                                                            returnm (false
                                                                                             : bool)
                                                                                         end >>= fun w__511 : bool =>
                                                                                         returnm ((if
                                                                                                     (w__511)
                                                                                                   then
                                                                                                     true
                                                                                                   else
                                                                                                     false)
                                                                                          : bool)
                                                                                      | None =>
                                                                                         returnm (false
                                                                                          : bool)
                                                                                      end >>= fun w__512 : bool =>
                                                                                      returnm ((if (w__512)
                                                                                                then
                                                                                                  true
                                                                                                else
                                                                                                  false)
                                                                                       : bool)
                                                                                   | None =>
                                                                                      returnm (false
                                                                                       : bool)
                                                                                   end >>= fun w__513 : bool =>
                                                                                   returnm ((if (w__513)
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false)
                                                                                    : bool)
                                                                                | None =>
                                                                                   returnm (false
                                                                                    : bool)
                                                                                end >>= fun w__514 : bool =>
                                                                                returnm ((if (w__514)
                                                                                          then
                                                                                            true
                                                                                          else false)
                                                                                 : bool)
                                                                             | None =>
                                                                                returnm (false
                                                                                 : bool)
                                                                             end >>= fun w__515 : bool =>
                                                                             returnm ((if (w__515)
                                                                                       then
                                                                                         true
                                                                                       else false)
                                                                              : bool)) >>= fun w__516 : bool =>
                                                                           returnm ((if (w__516)
                                                                                     then
                                                                                       true
                                                                                     else false)
                                                                            : bool)
                                                                        | None =>
                                                                           returnm (false  : bool)
                                                                        end >>= fun w__517 : bool =>
                                                                        (if (w__517) then
                                                                           (match (amo_mnemonic_matches_prefix
                                                                                     _stringappend_0_) with
                                                                            | Some
                                                                              (op,(existT _ _stringappend_327_ _)) =>
                                                                               returnm (op, build_ex _stringappend_327_)
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((amoop * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end : M ((amoop * {n : Z & ArithFact (n >=
                                                                             0)}))) >>= fun '(op, existT _ _stringappend_327_ _) =>
                                                                           let _stringappend_328_ :=
                                                                             string_drop
                                                                               _stringappend_0_
                                                                               (build_ex _stringappend_327_) in
                                                                           let _stringappend_329_ :=
                                                                             string_drop
                                                                               _stringappend_328_
                                                                               (build_ex (projT1 (string_length
                                                                                                    "."))) in
                                                                           (match (size_mnemonic_matches_prefix
                                                                                     _stringappend_329_) with
                                                                            | Some
                                                                              (width,(existT _ _stringappend_330_ _)) =>
                                                                               returnm (width, build_ex _stringappend_330_)
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((word_width * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end : M ((word_width * {n : Z & ArithFact (n >=
                                                                             0)}))) >>= fun '(width, existT _ _stringappend_330_ _) =>
                                                                           let _stringappend_331_ :=
                                                                             string_drop
                                                                               _stringappend_329_
                                                                               (build_ex _stringappend_330_) in
                                                                           (match (maybe_aq_matches_prefix
                                                                                     _stringappend_331_) with
                                                                            | Some
                                                                              (aq,(existT _ _stringappend_332_ _)) =>
                                                                               returnm (aq, build_ex _stringappend_332_)
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((bool * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end : M ((bool * {n : Z & ArithFact (n >=
                                                                             0)}))) >>= fun '(aq, existT _ _stringappend_332_ _) =>
                                                                           let _stringappend_333_ :=
                                                                             string_drop
                                                                               _stringappend_331_
                                                                               (build_ex _stringappend_332_) in
                                                                           (match (maybe_rl_matches_prefix
                                                                                     _stringappend_333_) with
                                                                            | Some
                                                                              (rl,(existT _ _stringappend_334_ _)) =>
                                                                               returnm (rl, build_ex _stringappend_334_)
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((bool * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end : M ((bool * {n : Z & ArithFact (n >=
                                                                             0)}))) >>= fun '(rl, existT _ _stringappend_334_ _) =>
                                                                           let _stringappend_335_ :=
                                                                             string_drop
                                                                               _stringappend_333_
                                                                               (build_ex _stringappend_334_) in
                                                                           (match (spc_matches_prefix
                                                                                     _stringappend_335_) with
                                                                            | Some
                                                                              (tt,(existT _ _stringappend_336_ _)) =>
                                                                               returnm (tt, build_ex _stringappend_336_)
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end : M ((unit * {n : Z & ArithFact (n >=
                                                                             0)}))) >>= fun '(tt, existT _ _stringappend_336_ _) =>
                                                                           let _stringappend_337_ :=
                                                                             string_drop
                                                                               _stringappend_335_
                                                                               (build_ex _stringappend_336_) in
                                                                           (match (reg_name_matches_prefix
                                                                                     _stringappend_337_) with
                                                                            | Some
                                                                              (rd,(existT _ _stringappend_338_ _)) =>
                                                                               returnm (rd, build_ex _stringappend_338_)
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}))) >>= fun '(rd, existT _ _stringappend_338_ _) =>
                                                                           let _stringappend_339_ :=
                                                                             string_drop
                                                                               _stringappend_337_
                                                                               (build_ex _stringappend_338_) in
                                                                           sep_matches_prefix
                                                                             _stringappend_339_ >>= fun w__530 : option ((unit * {n : Z & ArithFact (n >=
                                                                             0)})) =>
                                                                           (match w__530 with
                                                                            | Some
                                                                              (tt,(existT _ _stringappend_340_ _)) =>
                                                                               returnm (tt, build_ex _stringappend_340_)
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end : M ((unit * {n : Z & ArithFact (n >=
                                                                             0)}))) >>= fun '(tt, existT _ _stringappend_340_ _) =>
                                                                           let _stringappend_341_ :=
                                                                             string_drop
                                                                               _stringappend_339_
                                                                               (build_ex _stringappend_340_) in
                                                                           (match (reg_name_matches_prefix
                                                                                     _stringappend_341_) with
                                                                            | Some
                                                                              (rs1,(existT _ _stringappend_342_ _)) =>
                                                                               returnm (rs1, build_ex _stringappend_342_)
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}))) >>= fun '(rs1, existT _ _stringappend_342_ _) =>
                                                                           let _stringappend_343_ :=
                                                                             string_drop
                                                                               _stringappend_341_
                                                                               (build_ex _stringappend_342_) in
                                                                           sep_matches_prefix
                                                                             _stringappend_343_ >>= fun w__535 : option ((unit * {n : Z & ArithFact (n >=
                                                                             0)})) =>
                                                                           (match w__535 with
                                                                            | Some
                                                                              (tt,(existT _ _stringappend_344_ _)) =>
                                                                               returnm (tt, build_ex _stringappend_344_)
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end : M ((unit * {n : Z & ArithFact (n >=
                                                                             0)}))) >>= fun '(tt, existT _ _stringappend_344_ _) =>
                                                                           let _stringappend_345_ :=
                                                                             string_drop
                                                                               _stringappend_343_
                                                                               (build_ex _stringappend_344_) in
                                                                           (match (reg_name_matches_prefix
                                                                                     _stringappend_345_) with
                                                                            | Some
                                                                              (rs2,(existT _ _stringappend_346_ _)) =>
                                                                               returnm (rs2, build_ex _stringappend_346_)
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}))) >>= fun '(rs2, existT _ _stringappend_346_ _) =>
                                                                           returnm ((match (string_drop
                                                                                              _stringappend_345_
                                                                                              (build_ex _stringappend_346_)) with
                                                                                     | s_ =>
                                                                                        Some
                                                                                          ((AMO
                                                                                              (op,
                                                                                              aq, rl,
                                                                                              rs2,
                                                                                              rs1,
                                                                                              width,
                                                                                              rd), build_ex (projT1 (sub_nat
                                                                                                                       (build_ex (projT1 (string_length
                                                                                                                                            arg_)))
                                                                                                                       (build_ex (projT1 (string_length
                                                                                                                                            s_)))))))
                                                                                     end)
                                                                            : option ((ast * {n : Z & ArithFact (n >=
                                                                             0)})))
                                                                         else
                                                                           match (csr_mnemonic_matches_prefix
                                                                                    _stringappend_0_) with
                                                                           | Some
                                                                             (op,(existT _ _stringappend_348_ _)) =>
                                                                              let _stringappend_349_ :=
                                                                                string_drop
                                                                                  _stringappend_0_
                                                                                  (build_ex _stringappend_348_) in
                                                                              and_boolM
                                                                                (returnm ((string_startswith
                                                                                             _stringappend_349_
                                                                                             "i")
                                                                                  : bool))
                                                                                (let _stringappend_350_ :=
                                                                                  string_drop
                                                                                    _stringappend_349_
                                                                                    (build_ex (projT1 (string_length
                                                                                                         "i"))) in
                                                                                match (spc_matches_prefix
                                                                                         _stringappend_350_) with
                                                                                | Some
                                                                                  (tt,(existT _ _stringappend_351_ _)) =>
                                                                                   let _stringappend_352_ :=
                                                                                     string_drop
                                                                                       _stringappend_350_
                                                                                       (build_ex _stringappend_351_) in
                                                                                   match (reg_name_matches_prefix
                                                                                            _stringappend_352_) with
                                                                                   | Some
                                                                                     (rd,(existT _ _stringappend_353_ _)) =>
                                                                                      let _stringappend_354_ :=
                                                                                        string_drop
                                                                                          _stringappend_352_
                                                                                          (build_ex _stringappend_353_) in
                                                                                      sep_matches_prefix
                                                                                        _stringappend_354_ >>= fun w__540 : option ((unit * {n : Z & ArithFact (n >=
                                                                                        0)})) =>
                                                                                      match w__540 with
                                                                                      | Some
                                                                                        (tt,(existT _ _stringappend_355_ _)) =>
                                                                                         let _stringappend_356_ :=
                                                                                           string_drop
                                                                                             _stringappend_354_
                                                                                             (build_ex _stringappend_355_) in
                                                                                         match (hex_bits_5_matches_prefix
                                                                                                  _stringappend_356_) with
                                                                                         | Some
                                                                                           (rs1,(existT _ _stringappend_357_ _)) =>
                                                                                            let _stringappend_358_ :=
                                                                                              string_drop
                                                                                                _stringappend_356_
                                                                                                (build_ex _stringappend_357_) in
                                                                                            sep_matches_prefix
                                                                                              _stringappend_358_ >>= fun w__541 : option ((unit * {n : Z & ArithFact (n >=
                                                                                              0)})) =>
                                                                                            returnm ((if
                                                                                                        ((match w__541 with
                                                                                                          | Some
                                                                                                            (tt,(existT _ _stringappend_359_ _)) =>
                                                                                                             let _stringappend_360_ :=
                                                                                                               string_drop
                                                                                                                 _stringappend_358_
                                                                                                                 (build_ex _stringappend_359_) in
                                                                                                             if
                                                                                                               ((match (csr_name_map_matches_prefix
                                                                                                                          _stringappend_360_) with
                                                                                                                 | Some
                                                                                                                   (csr,(existT _ _stringappend_361_ _)) =>
                                                                                                                    match (string_drop
                                                                                                                             _stringappend_360_
                                                                                                                             (build_ex _stringappend_361_)) with
                                                                                                                    | s_ =>
                                                                                                                       true
                                                                                                                    end
                                                                                                                 | None =>
                                                                                                                    false
                                                                                                                 end))
                                                                                                             then
                                                                                                               true
                                                                                                             else
                                                                                                               false
                                                                                                          | None =>
                                                                                                             false
                                                                                                          end))
                                                                                                      then
                                                                                                        true
                                                                                                      else
                                                                                                        false)
                                                                                             : bool)
                                                                                         | None =>
                                                                                            returnm (false
                                                                                             : bool)
                                                                                         end >>= fun w__542 : bool =>
                                                                                         returnm ((if
                                                                                                     (w__542)
                                                                                                   then
                                                                                                     true
                                                                                                   else
                                                                                                     false)
                                                                                          : bool)
                                                                                      | None =>
                                                                                         returnm (false
                                                                                          : bool)
                                                                                      end >>= fun w__543 : bool =>
                                                                                      returnm ((if (w__543)
                                                                                                then
                                                                                                  true
                                                                                                else
                                                                                                  false)
                                                                                       : bool)
                                                                                   | None =>
                                                                                      returnm (false
                                                                                       : bool)
                                                                                   end >>= fun w__544 : bool =>
                                                                                   returnm ((if (w__544)
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false)
                                                                                    : bool)
                                                                                | None =>
                                                                                   returnm (false
                                                                                    : bool)
                                                                                end >>= fun w__545 : bool =>
                                                                                returnm ((if (w__545)
                                                                                          then
                                                                                            true
                                                                                          else false)
                                                                                 : bool)) >>= fun w__546 : bool =>
                                                                              returnm ((if (w__546)
                                                                                        then
                                                                                          true
                                                                                        else false)
                                                                               : bool)
                                                                           | None =>
                                                                              returnm (false
                                                                               : bool)
                                                                           end >>= fun w__547 : bool =>
                                                                           (if (w__547) then
                                                                              (match (csr_mnemonic_matches_prefix
                                                                                        _stringappend_0_) with
                                                                               | Some
                                                                                 (op,(existT _ _stringappend_348_ _)) =>
                                                                                  returnm (op, build_ex _stringappend_348_)
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((csrop * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end : M ((csrop * {n : Z & ArithFact (n >=
                                                                                0)}))) >>= fun '(op, existT _ _stringappend_348_ _) =>
                                                                              let _stringappend_349_ :=
                                                                                string_drop
                                                                                  _stringappend_0_
                                                                                  (build_ex _stringappend_348_) in
                                                                              let _stringappend_350_ :=
                                                                                string_drop
                                                                                  _stringappend_349_
                                                                                  (build_ex (projT1 (string_length
                                                                                                       "i"))) in
                                                                              (match (spc_matches_prefix
                                                                                        _stringappend_350_) with
                                                                               | Some
                                                                                 (tt,(existT _ _stringappend_351_ _)) =>
                                                                                  returnm (tt, build_ex _stringappend_351_)
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end : M ((unit * {n : Z & ArithFact (n >=
                                                                                0)}))) >>= fun '(tt, existT _ _stringappend_351_ _) =>
                                                                              let _stringappend_352_ :=
                                                                                string_drop
                                                                                  _stringappend_350_
                                                                                  (build_ex _stringappend_351_) in
                                                                              (match (reg_name_matches_prefix
                                                                                        _stringappend_352_) with
                                                                               | Some
                                                                                 (rd,(existT _ _stringappend_353_ _)) =>
                                                                                  returnm (rd, build_ex _stringappend_353_)
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}))) >>= fun '(rd, existT _ _stringappend_353_ _) =>
                                                                              let _stringappend_354_ :=
                                                                                string_drop
                                                                                  _stringappend_352_
                                                                                  (build_ex _stringappend_353_) in
                                                                              sep_matches_prefix
                                                                                _stringappend_354_ >>= fun w__554 : option ((unit * {n : Z & ArithFact (n >=
                                                                                0)})) =>
                                                                              (match w__554 with
                                                                               | Some
                                                                                 (tt,(existT _ _stringappend_355_ _)) =>
                                                                                  returnm (tt, build_ex _stringappend_355_)
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end : M ((unit * {n : Z & ArithFact (n >=
                                                                                0)}))) >>= fun '(tt, existT _ _stringappend_355_ _) =>
                                                                              let _stringappend_356_ :=
                                                                                string_drop
                                                                                  _stringappend_354_
                                                                                  (build_ex _stringappend_355_) in
                                                                              (match (hex_bits_5_matches_prefix
                                                                                        _stringappend_356_) with
                                                                               | Some
                                                                                 (rs1,(existT _ _stringappend_357_ _)) =>
                                                                                  returnm (rs1, build_ex _stringappend_357_)
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}))) >>= fun '(rs1, existT _ _stringappend_357_ _) =>
                                                                              let _stringappend_358_ :=
                                                                                string_drop
                                                                                  _stringappend_356_
                                                                                  (build_ex _stringappend_357_) in
                                                                              sep_matches_prefix
                                                                                _stringappend_358_ >>= fun w__559 : option ((unit * {n : Z & ArithFact (n >=
                                                                                0)})) =>
                                                                              (match w__559 with
                                                                               | Some
                                                                                 (tt,(existT _ _stringappend_359_ _)) =>
                                                                                  returnm (tt, build_ex _stringappend_359_)
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end : M ((unit * {n : Z & ArithFact (n >=
                                                                                0)}))) >>= fun '(tt, existT _ _stringappend_359_ _) =>
                                                                              let _stringappend_360_ :=
                                                                                string_drop
                                                                                  _stringappend_358_
                                                                                  (build_ex _stringappend_359_) in
                                                                              (match (csr_name_map_matches_prefix
                                                                                        _stringappend_360_) with
                                                                               | Some
                                                                                 (csr,(existT _ _stringappend_361_ _)) =>
                                                                                  returnm (csr, build_ex _stringappend_361_)
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                0)}))) >>= fun '(csr, existT _ _stringappend_361_ _) =>
                                                                              returnm ((match (string_drop
                                                                                                 _stringappend_360_
                                                                                                 (build_ex _stringappend_361_)) with
                                                                                        | s_ =>
                                                                                           Some
                                                                                             ((CSR
                                                                                                 (csr,
                                                                                                 rs1,
                                                                                                 rd,
                                                                                                 true,
                                                                                                 op), build_ex (projT1 (sub_nat
                                                                                                                          (build_ex (projT1 (string_length
                                                                                                                                               arg_)))
                                                                                                                          (build_ex (projT1 (string_length
                                                                                                                                               s_)))))))
                                                                                        end)
                                                                               : option ((ast * {n : Z & ArithFact (n >=
                                                                                0)})))
                                                                            else
                                                                              match (csr_mnemonic_matches_prefix
                                                                                       _stringappend_0_) with
                                                                              | Some
                                                                                (op,(existT _ _stringappend_363_ _)) =>
                                                                                 let _stringappend_364_ :=
                                                                                   string_drop
                                                                                     _stringappend_0_
                                                                                     (build_ex _stringappend_363_) in
                                                                                 match (spc_matches_prefix
                                                                                          _stringappend_364_) with
                                                                                 | Some
                                                                                   (tt,(existT _ _stringappend_365_ _)) =>
                                                                                    let _stringappend_366_ :=
                                                                                      string_drop
                                                                                        _stringappend_364_
                                                                                        (build_ex _stringappend_365_) in
                                                                                    match (reg_name_matches_prefix
                                                                                             _stringappend_366_) with
                                                                                    | Some
                                                                                      (rd,(existT _ _stringappend_367_ _)) =>
                                                                                       let _stringappend_368_ :=
                                                                                         string_drop
                                                                                           _stringappend_366_
                                                                                           (build_ex _stringappend_367_) in
                                                                                       sep_matches_prefix
                                                                                         _stringappend_368_ >>= fun w__564 : option ((unit * {n : Z & ArithFact (n >=
                                                                                         0)})) =>
                                                                                       match w__564 with
                                                                                       | Some
                                                                                         (tt,(existT _ _stringappend_369_ _)) =>
                                                                                          let _stringappend_370_ :=
                                                                                            string_drop
                                                                                              _stringappend_368_
                                                                                              (build_ex _stringappend_369_) in
                                                                                          match (reg_name_matches_prefix
                                                                                                   _stringappend_370_) with
                                                                                          | Some
                                                                                            (rs1,(existT _ _stringappend_371_ _)) =>
                                                                                             let _stringappend_372_ :=
                                                                                               string_drop
                                                                                                 _stringappend_370_
                                                                                                 (build_ex _stringappend_371_) in
                                                                                             sep_matches_prefix
                                                                                               _stringappend_372_ >>= fun w__565 : option ((unit * {n : Z & ArithFact (n >=
                                                                                               0)})) =>
                                                                                             returnm ((if
                                                                                                         ((match w__565 with
                                                                                                           | Some
                                                                                                             (tt,(existT _ _stringappend_373_ _)) =>
                                                                                                              let _stringappend_374_ :=
                                                                                                                string_drop
                                                                                                                  _stringappend_372_
                                                                                                                  (build_ex _stringappend_373_) in
                                                                                                              if
                                                                                                                ((match (csr_name_map_matches_prefix
                                                                                                                           _stringappend_374_) with
                                                                                                                  | Some
                                                                                                                    (csr,(existT _ _stringappend_375_ _)) =>
                                                                                                                     match (string_drop
                                                                                                                              _stringappend_374_
                                                                                                                              (build_ex _stringappend_375_)) with
                                                                                                                     | s_ =>
                                                                                                                        true
                                                                                                                     end
                                                                                                                  | None =>
                                                                                                                     false
                                                                                                                  end))
                                                                                                              then
                                                                                                                true
                                                                                                              else
                                                                                                                false
                                                                                                           | None =>
                                                                                                              false
                                                                                                           end))
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__566 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__566)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__567 : bool =>
                                                                                       returnm ((if (w__567)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__568 : bool =>
                                                                                    returnm ((if (w__568)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__569 : bool =>
                                                                                 returnm ((if (w__569)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)
                                                                              | None =>
                                                                                 returnm (false
                                                                                  : bool)
                                                                              end >>= fun w__570 : bool =>
                                                                              (if (w__570) then
                                                                                 (match (csr_mnemonic_matches_prefix
                                                                                           _stringappend_0_) with
                                                                                  | Some
                                                                                    (op,(existT _ _stringappend_363_ _)) =>
                                                                                     returnm (op, build_ex _stringappend_363_)
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((csrop * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end : M ((csrop * {n : Z & ArithFact (n >=
                                                                                   0)}))) >>= fun '(op, existT _ _stringappend_363_ _) =>
                                                                                 let _stringappend_364_ :=
                                                                                   string_drop
                                                                                     _stringappend_0_
                                                                                     (build_ex _stringappend_363_) in
                                                                                 (match (spc_matches_prefix
                                                                                           _stringappend_364_) with
                                                                                  | Some
                                                                                    (tt,(existT _ _stringappend_365_ _)) =>
                                                                                     returnm (tt, build_ex _stringappend_365_)
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end : M ((unit * {n : Z & ArithFact (n >=
                                                                                   0)}))) >>= fun '(tt, existT _ _stringappend_365_ _) =>
                                                                                 let _stringappend_366_ :=
                                                                                   string_drop
                                                                                     _stringappend_364_
                                                                                     (build_ex _stringappend_365_) in
                                                                                 (match (reg_name_matches_prefix
                                                                                           _stringappend_366_) with
                                                                                  | Some
                                                                                    (rd,(existT _ _stringappend_367_ _)) =>
                                                                                     returnm (rd, build_ex _stringappend_367_)
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}))) >>= fun '(rd, existT _ _stringappend_367_ _) =>
                                                                                 let _stringappend_368_ :=
                                                                                   string_drop
                                                                                     _stringappend_366_
                                                                                     (build_ex _stringappend_367_) in
                                                                                 sep_matches_prefix
                                                                                   _stringappend_368_ >>= fun w__577 : option ((unit * {n : Z & ArithFact (n >=
                                                                                   0)})) =>
                                                                                 (match w__577 with
                                                                                  | Some
                                                                                    (tt,(existT _ _stringappend_369_ _)) =>
                                                                                     returnm (tt, build_ex _stringappend_369_)
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end : M ((unit * {n : Z & ArithFact (n >=
                                                                                   0)}))) >>= fun '(tt, existT _ _stringappend_369_ _) =>
                                                                                 let _stringappend_370_ :=
                                                                                   string_drop
                                                                                     _stringappend_368_
                                                                                     (build_ex _stringappend_369_) in
                                                                                 (match (reg_name_matches_prefix
                                                                                           _stringappend_370_) with
                                                                                  | Some
                                                                                    (rs1,(existT _ _stringappend_371_ _)) =>
                                                                                     returnm (rs1, build_ex _stringappend_371_)
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}))) >>= fun '(rs1, existT _ _stringappend_371_ _) =>
                                                                                 let _stringappend_372_ :=
                                                                                   string_drop
                                                                                     _stringappend_370_
                                                                                     (build_ex _stringappend_371_) in
                                                                                 sep_matches_prefix
                                                                                   _stringappend_372_ >>= fun w__582 : option ((unit * {n : Z & ArithFact (n >=
                                                                                   0)})) =>
                                                                                 (match w__582 with
                                                                                  | Some
                                                                                    (tt,(existT _ _stringappend_373_ _)) =>
                                                                                     returnm (tt, build_ex _stringappend_373_)
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end : M ((unit * {n : Z & ArithFact (n >=
                                                                                   0)}))) >>= fun '(tt, existT _ _stringappend_373_ _) =>
                                                                                 let _stringappend_374_ :=
                                                                                   string_drop
                                                                                     _stringappend_372_
                                                                                     (build_ex _stringappend_373_) in
                                                                                 (match (csr_name_map_matches_prefix
                                                                                           _stringappend_374_) with
                                                                                  | Some
                                                                                    (csr,(existT _ _stringappend_375_ _)) =>
                                                                                     returnm (csr, build_ex _stringappend_375_)
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                   0)}))) >>= fun '(csr, existT _ _stringappend_375_ _) =>
                                                                                 returnm ((match (string_drop
                                                                                                    _stringappend_374_
                                                                                                    (build_ex _stringappend_375_)) with
                                                                                           | s_ =>
                                                                                              Some
                                                                                                ((CSR
                                                                                                    (csr,
                                                                                                    rs1,
                                                                                                    rd,
                                                                                                    false,
                                                                                                    op), build_ex (projT1 (sub_nat
                                                                                                                             (build_ex (projT1 (string_length
                                                                                                                                                  arg_)))
                                                                                                                             (build_ex (projT1 (string_length
                                                                                                                                                  s_)))))))
                                                                                           end)
                                                                                  : option ((ast * {n : Z & ArithFact (n >=
                                                                                   0)})))
                                                                               else if ((andb
                                                                                           (string_startswith
                                                                                              _stringappend_0_
                                                                                              "illegal")
                                                                                           (let _stringappend_377_ :=
                                                                                             string_drop
                                                                                               _stringappend_0_
                                                                                               (build_ex (projT1 (string_length
                                                                                                                    "illegal"))) in
                                                                                           if ((match (spc_matches_prefix
                                                                                                         _stringappend_377_) with
                                                                                                | Some
                                                                                                  (tt,(existT _ _stringappend_378_ _)) =>
                                                                                                   let _stringappend_379_ :=
                                                                                                     string_drop
                                                                                                       _stringappend_377_
                                                                                                       (build_ex _stringappend_378_) in
                                                                                                   if
                                                                                                     ((match (hex_bits_32_matches_prefix
                                                                                                                _stringappend_379_) with
                                                                                                       | Some
                                                                                                         (s,(existT _ _stringappend_380_ _)) =>
                                                                                                          match (string_drop
                                                                                                                   _stringappend_379_
                                                                                                                   (build_ex _stringappend_380_)) with
                                                                                                          | s_ =>
                                                                                                             true
                                                                                                          end
                                                                                                       | None =>
                                                                                                          false
                                                                                                       end))
                                                                                                   then
                                                                                                     true
                                                                                                   else
                                                                                                     false
                                                                                                | None =>
                                                                                                   false
                                                                                                end))
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)))
                                                                               then
                                                                                 let _stringappend_377_ :=
                                                                                   string_drop
                                                                                     _stringappend_0_
                                                                                     (build_ex (projT1 (string_length
                                                                                                          "illegal"))) in
                                                                                 (match (spc_matches_prefix
                                                                                           _stringappend_377_) with
                                                                                  | Some
                                                                                    (tt,(existT _ _stringappend_378_ _)) =>
                                                                                     returnm (tt, build_ex _stringappend_378_)
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end : M ((unit * {n : Z & ArithFact (n >=
                                                                                   0)}))) >>= fun '(tt, existT _ _stringappend_378_ _) =>
                                                                                 let _stringappend_379_ :=
                                                                                   string_drop
                                                                                     _stringappend_377_
                                                                                     (build_ex _stringappend_378_) in
                                                                                 (match (hex_bits_32_matches_prefix
                                                                                           _stringappend_379_) with
                                                                                  | Some
                                                                                    (s,(existT _ _stringappend_380_ _)) =>
                                                                                     returnm (s, build_ex _stringappend_380_)
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((mword 32 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end : M ((mword 32 * {n : Z & ArithFact (n >=
                                                                                   0)}))) >>= fun '(s, existT _ _stringappend_380_ _) =>
                                                                                 returnm ((match (string_drop
                                                                                                    _stringappend_379_
                                                                                                    (build_ex _stringappend_380_)) with
                                                                                           | s_ =>
                                                                                              Some
                                                                                                ((ILLEGAL
                                                                                                    (s), build_ex (projT1 (sub_nat
                                                                                                                             (build_ex (projT1 (string_length
                                                                                                                                                  arg_)))
                                                                                                                             (build_ex (projT1 (string_length
                                                                                                                                                  s_)))))))
                                                                                           end)
                                                                                  : option ((ast * {n : Z & ArithFact (n >=
                                                                                   0)})))
                                                                               else
                                                                                 returnm (None
                                                                                  : option ((ast * {n : Z & ArithFact (n >=
                                                                                   0)}))))
                                                                               : M (option ((ast * {n : Z & ArithFact (n >=
                                                                                0)}))))
                                                                            : M (option ((ast * {n : Z & ArithFact (n >=
                                                                             0)}))))
                                                                         : M (option ((ast * {n : Z & ArithFact (n >=
                                                                          0)}))))
                                                                      : M (option ((ast * {n : Z & ArithFact (n >=
                                                                       0)}))))
                                                                   : M (option ((ast * {n : Z & ArithFact (n >=
                                                                    0)}))))
                                                                : M (option ((ast * {n : Z & ArithFact (n >=
                                                                 0)}))))
                                                             : M (option ((ast * {n : Z & ArithFact (n >=
                                                              0)}))))
                                                          : M (option ((ast * {n : Z & ArithFact (n >=
                                                           0)}))))
                                                       : M (option ((ast * {n : Z & ArithFact (n >=
                                                        0)}))))
                                                    : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                                 : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                              : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                           : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                        : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                     : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                  : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                               : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                            : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                         : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                      : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                   : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
             : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
          : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
       : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
    : M (option ((ast * {n : Z & ArithFact (n >= 0)}))).
*)
Definition encdec_forwards (arg_ : ast) 
: M (mword 32) :=
   (match arg_ with
    | UTYPE (imm,rd,op) =>
       returnm ((concat_vec (imm  : mword 20) (concat_vec (rd  : mword 5) (encdec_uop_forwards op)))
        : mword (20 + 12))
    | RISCV_JAL (v__172,rd) =>
       let imm_19 : bits 1 := subrange_vec_dec v__172 20 20 in
       let imm_8 : bits 1 := subrange_vec_dec v__172 11 11 in
       let imm_7_0 : bits 8 := subrange_vec_dec v__172 19 12 in
       let imm_19 : bits 1 := subrange_vec_dec v__172 20 20 in
       let imm_18_13 : bits 6 := subrange_vec_dec v__172 10 5 in
       let imm_12_9 : bits 4 := subrange_vec_dec v__172 4 1 in
       returnm ((concat_vec (imm_19  : bits 1)
                   (concat_vec (imm_18_13  : bits 6)
                      (concat_vec (imm_12_9  : bits 4)
                         (concat_vec (imm_8  : bits 1)
                            (concat_vec (imm_7_0  : bits 8)
                               (concat_vec (rd  : mword 5)
                                  (vec_of_bits [B1;B1;B0;B1;B1;B1;B1]  : mword 7)))))))
        : mword 32)
    | RISCV_JALR (imm,rs1,rd) =>
       returnm ((concat_vec (imm  : mword 12)
                   (concat_vec (rs1  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                         (concat_vec (rd  : mword 5) (vec_of_bits [B1;B1;B0;B0;B1;B1;B1]  : mword 7)))))
        : mword (12 + 20))
    | BTYPE (v__174,rs2,rs1,op) =>
       let imm7_6 : bits 1 := subrange_vec_dec v__174 12 12 in
       let imm7_6 : bits 1 := subrange_vec_dec v__174 12 12 in
       let imm7_5_0 : bits 6 := subrange_vec_dec v__174 10 5 in
       let imm5_4_1 : bits 4 := subrange_vec_dec v__174 4 1 in
       let imm5_0 : bits 1 := subrange_vec_dec v__174 11 11 in
       returnm ((concat_vec (imm7_6  : bits 1)
                   (concat_vec (imm7_5_0  : bits 6)
                      (concat_vec (rs2  : mword 5)
                         (concat_vec (rs1  : mword 5)
                            (concat_vec (encdec_bop_forwards op)
                               (concat_vec (imm5_4_1  : bits 4)
                                  (concat_vec (imm5_0  : bits 1)
                                     (vec_of_bits [B1;B1;B0;B0;B0;B1;B1]  : mword 7))))))))
        : mword 32)
    | ITYPE (imm,rs1,rd,op) =>
       returnm ((concat_vec (imm  : mword 12)
                   (concat_vec (rs1  : mword 5)
                      (concat_vec (encdec_iop_forwards op)
                         (concat_vec (rd  : mword 5) (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7)))))
        : mword (12 + 20))
    | SHIFTIOP (shamt,rs1,rd,RISCV_SLLI) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6)
                   (concat_vec (shamt  : mword 6)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (6 + 26))
    | SHIFTIOP (shamt,rs1,rd,RISCV_SRLI) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6)
                   (concat_vec (shamt  : mword 6)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (6 + 26))
    | SHIFTIOP (shamt,rs1,rd,RISCV_SRAI) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0]  : mword 6)
                   (concat_vec (shamt  : mword 6)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (6 + 26))
    | RTYPE (rs2,rs1,rd,RISCV_ADD) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPE (rs2,rs1,rd,RISCV_SUB) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPE (rs2,rs1,rd,RISCV_SLL) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPE (rs2,rs1,rd,RISCV_SLT) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B1;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPE (rs2,rs1,rd,RISCV_SLTU) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B1;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPE (rs2,rs1,rd,RISCV_XOR) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPE (rs2,rs1,rd,RISCV_SRL) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPE (rs2,rs1,rd,RISCV_SRA) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPE (rs2,rs1,rd,RISCV_OR) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B1;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPE (rs2,rs1,rd,RISCV_AND) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B1;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | LOAD (imm,rs1,rd,is_unsigned,size,false,false) =>
       returnm ((concat_vec (imm  : mword 12)
                   (concat_vec (rs1  : mword 5)
                      (concat_vec (bool_bits_forwards is_unsigned)
                         (concat_vec (size_bits_forwards size)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B0;B0;B0;B1;B1]  : mword 7))))))
        : mword (12 + 20))
    | STORE (v__176,rs2,rs1,size,false,false) =>
       let imm7 : bits 7 := subrange_vec_dec v__176 11 5 in
       let imm7 : bits 7 := subrange_vec_dec v__176 11 5 in
       let imm5 : bits 5 := subrange_vec_dec v__176 4 0 in
       returnm ((concat_vec (imm7  : bits 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0]  : mword 1)
                            (concat_vec (size_bits_forwards size)
                               (concat_vec (imm5  : bits 5)
                                  (vec_of_bits [B0;B1;B0;B0;B0;B1;B1]  : mword 7)))))))
        : mword 32)
    | ADDIW (imm,rs1,rd) =>
       returnm ((concat_vec (imm  : mword 12)
                   (concat_vec (rs1  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                         (concat_vec (rd  : mword 5) (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7)))))
        : mword (12 + 20))
    | SHIFTW (shamt,rs1,rd,RISCV_SLLI) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | SHIFTW (shamt,rs1,rd,RISCV_SRLI) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | SHIFTW (shamt,rs1,rd,RISCV_SRAI) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPEW (rs2,rs1,rd,RISCV_ADDW) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPEW (rs2,rs1,rd,RISCV_SUBW) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPEW (rs2,rs1,rd,RISCV_SLLW) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPEW (rs2,rs1,rd,RISCV_SRLW) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | RTYPEW (rs2,rs1,rd,RISCV_SRAW) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | SHIFTIWOP (shamt,rs1,rd,RISCV_SLLIW) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | SHIFTIWOP (shamt,rs1,rd,RISCV_SRLIW) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | SHIFTIWOP (shamt,rs1,rd,RISCV_SRAIW) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | MUL (rs2,rs1,rd,high,signed1,signed2) =>
       encdec_mul_op_forwards high signed1 signed2 >>= fun w__0 : mword 3 =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (w__0  : bits 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | DIV (rs2,rs1,rd,s) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0]  : mword 2)
                            (concat_vec (bool_not_bits_forwards s)
                               (concat_vec (rd  : mword 5)
                                  (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))))))
        : mword (7 + 25))
    | REM (rs2,rs1,rd,s) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B1]  : mword 2)
                            (concat_vec (bool_not_bits_forwards s)
                               (concat_vec (rd  : mword 5)
                                  (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))))))
        : mword (7 + 25))
    | MULW (rs2,rs1,rd) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | DIVW (rs2,rs1,rd,s) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0]  : mword 2)
                            (concat_vec (bool_not_bits_forwards s)
                               (concat_vec (rd  : mword 5)
                                  (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))))))
        : mword (7 + 25))
    | REMW (rs2,rs1,rd,s) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B1]  : mword 2)
                            (concat_vec (bool_not_bits_forwards s)
                               (concat_vec (rd  : mword 5)
                                  (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))))))
        : mword (7 + 25))
    | FENCE (pred,succ) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0]  : mword 4)
                   (concat_vec (pred  : mword 4)
                      (concat_vec (succ  : mword 4)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                               (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                                  (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  : mword 7)))))))
        : mword (4 + 28))
    | FENCEI (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  : mword 7)))))
        : mword (12 + 20))
    | ECALL (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7)))))
        : mword (12 + 20))
    | MRET (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B1;B1;B0;B0;B0]  : mword 7)
                   (concat_vec (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                               (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | SRET (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B1;B0;B0;B0]  : mword 7)
                   (concat_vec (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                               (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | EBREAK (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7)))))
        : mword (12 + 20))
    | WFI (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7)))))
        : mword (12 + 20))
    | SFENCE_VMA (rs1,rs2) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B1;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                               (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (7 + 25))
    | LOADRES (aq,rl,rs1,size,rd) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5)
                   (concat_vec (bool_bits_forwards aq)
                      (concat_vec (bool_bits_forwards rl)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (concat_vec (rs1  : mword 5)
                               (concat_vec (vec_of_bits [B0]  : mword 1)
                                  (concat_vec (size_bits_forwards size)
                                     (concat_vec (rd  : mword 5)
                                        (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))))))))
        : mword (5 + 27))
    | STORECON (aq,rl,rs2,rs1,size,rd) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B1;B1]  : mword 5)
                   (concat_vec (bool_bits_forwards aq)
                      (concat_vec (bool_bits_forwards rl)
                         (concat_vec (rs2  : mword 5)
                            (concat_vec (rs1  : mword 5)
                               (concat_vec (vec_of_bits [B0]  : mword 1)
                                  (concat_vec (size_bits_forwards size)
                                     (concat_vec (rd  : mword 5)
                                        (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))))))))
        : mword (5 + 27))
    | AMO (op,aq,rl,rs2,rs1,size,rd) =>
       returnm ((concat_vec (encdec_amoop_forwards op)
                   (concat_vec (bool_bits_forwards aq)
                      (concat_vec (bool_bits_forwards rl)
                         (concat_vec (rs2  : mword 5)
                            (concat_vec (rs1  : mword 5)
                               (concat_vec (vec_of_bits [B0]  : mword 1)
                                  (concat_vec (size_bits_forwards size)
                                     (concat_vec (rd  : mword 5)
                                        (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))))))))
        : mword (5 + 27))
    | CSR (csr,rs1,rd,is_imm,op) =>
       returnm ((concat_vec (csr  : mword 12)
                   (concat_vec (rs1  : mword 5)
                      (concat_vec (bool_bits_forwards is_imm)
                         (concat_vec (encdec_csrop_forwards op)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword (12 + 20))
    | STOP_FETCHING (tt) =>
       returnm ((concat_vec
                   (vec_of_bits [B1;B1;B1;B1;B1;B0;B1;B0;B1;B1;B0;B1;B1;B1;B1;B0]  : mword 16)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8)
                      (concat_vec (vec_of_bits [B0]  : mword 1)
                         (concat_vec (vec_of_bits [B0;B0]  : mword 2)
                            (concat_vec (vec_of_bits [B0;B1;B0]  : mword 3)
                               (vec_of_bits [B1;B1]  : mword 2))))))
        : mword (16 + 16))
    | THREAD_START (tt) =>
       returnm ((concat_vec
                   (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1;B1;B1;B0]  : mword 16)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8)
                      (concat_vec (vec_of_bits [B0]  : mword 1)
                         (concat_vec (vec_of_bits [B0;B0]  : mword 2)
                            (concat_vec (vec_of_bits [B0;B1;B0]  : mword 3)
                               (vec_of_bits [B1;B1]  : mword 2))))))
        : mword (16 + 16))
    | ILLEGAL (s) => returnm (s  : mword 32)
    | _ => exit tt  : M (mword 32)
    end)
    : M (mword 32).

Definition encdec_backwards (arg_ : mword 32) 
: ast :=
   let v__177 := arg_ in
   if ((let _mappingpatterns_23_ := subrange_vec_dec v__177 6 0 in
     andb (encdec_uop_backwards_matches _mappingpatterns_23_)
       (if ((encdec_uop_backwards_matches _mappingpatterns_23_)) then
          let op := encdec_uop_backwards _mappingpatterns_23_ in
          true
        else false))) then
     let imm : mword 20 := subrange_vec_dec v__177 31 12 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let imm : mword 20 := subrange_vec_dec v__177 31 12 in
     let _mappingpatterns_23_ := subrange_vec_dec v__177 6 0 in
     let op := encdec_uop_backwards _mappingpatterns_23_ in
     UTYPE
       (imm, rd, op)
   else if ((eq_vec (subrange_vec_dec v__177 6 0) (vec_of_bits [B1;B1;B0;B1;B1;B1;B1]  : mword 7)))
   then
     let imm_19 : bits 1 := subrange_vec_dec v__177 31 31 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let imm_8 : bits 1 := subrange_vec_dec v__177 20 20 in
     let imm_7_0 : bits 8 := subrange_vec_dec v__177 19 12 in
     let imm_19 : bits 1 := subrange_vec_dec v__177 31 31 in
     let imm_18_13 : bits 6 := subrange_vec_dec v__177 30 25 in
     let imm_12_9 : bits 4 := subrange_vec_dec v__177 24 21 in
     RISCV_JAL
       (concat_vec (imm_19  : bits 1)
          (concat_vec (imm_7_0  : bits 8)
             (concat_vec (imm_8  : bits 1)
                (concat_vec (imm_18_13  : bits 6)
                   (concat_vec (imm_12_9  : bits 4) (vec_of_bits [B0]  : mword 1))))), rd)
   else if ((andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__177 6 0) (vec_of_bits [B1;B1;B0;B0;B1;B1;B1]  : mword 7))))
   then
     let imm : mword 12 := subrange_vec_dec v__177 31 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let imm : mword 12 := subrange_vec_dec v__177 31 20 in
     RISCV_JALR
       (imm, rs1, rd)
   else if ((andb
               (let _mappingpatterns_24_ := subrange_vec_dec v__177 14 12 in
               andb (encdec_bop_backwards_matches _mappingpatterns_24_)
                 (if ((encdec_bop_backwards_matches _mappingpatterns_24_)) then
                    let op := encdec_bop_backwards _mappingpatterns_24_ in
                    true
                  else false))
               (eq_vec (subrange_vec_dec v__177 6 0) (vec_of_bits [B1;B1;B0;B0;B0;B1;B1]  : mword 7))))
   then
     let imm7_6 : bits 1 := subrange_vec_dec v__177 31 31 in
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let imm7_6 : bits 1 := subrange_vec_dec v__177 31 31 in
     let imm7_5_0 : bits 6 := subrange_vec_dec v__177 30 25 in
     let imm5_4_1 : bits 4 := subrange_vec_dec v__177 11 8 in
     let imm5_0 : bits 1 := subrange_vec_dec v__177 7 7 in
     let _mappingpatterns_24_ := subrange_vec_dec v__177 14 12 in
     let op := encdec_bop_backwards _mappingpatterns_24_ in
     BTYPE
       (concat_vec (imm7_6  : bits 1)
          (concat_vec (imm5_0  : bits 1)
             (concat_vec (imm7_5_0  : bits 6)
                (concat_vec (imm5_4_1  : bits 4) (vec_of_bits [B0]  : mword 1)))), rs2, rs1, op)
   else if ((andb
               (let _mappingpatterns_25_ := subrange_vec_dec v__177 14 12 in
               andb (encdec_iop_backwards_matches _mappingpatterns_25_)
                 (if ((encdec_iop_backwards_matches _mappingpatterns_25_)) then
                    let op := encdec_iop_backwards _mappingpatterns_25_ in
                    true
                  else false))
               (eq_vec (subrange_vec_dec v__177 6 0) (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))
   then
     let imm : mword 12 := subrange_vec_dec v__177 31 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let imm : mword 12 := subrange_vec_dec v__177 31 20 in
     let _mappingpatterns_25_ := subrange_vec_dec v__177 14 12 in
     let op := encdec_iop_backwards _mappingpatterns_25_ in
     ITYPE
       (imm, rs1, rd, op)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 26) (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))) then
     let shamt : mword 6 := subrange_vec_dec v__177 25 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     SHIFTIOP
       (shamt, rs1, rd, RISCV_SLLI)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 26) (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))) then
     let shamt : mword 6 := subrange_vec_dec v__177 25 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     SHIFTIOP
       (shamt, rs1, rd, RISCV_SRLI)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 26) (vec_of_bits [B0;B1;B0;B0;B0;B0]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))) then
     let shamt : mword 6 := subrange_vec_dec v__177 25 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     SHIFTIOP
       (shamt, rs1, rd, RISCV_SRAI)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPE
       (rs2, rs1, rd, RISCV_ADD)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPE
       (rs2, rs1, rd, RISCV_SUB)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPE
       (rs2, rs1, rd, RISCV_SLL)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B1;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPE
       (rs2, rs1, rd, RISCV_SLT)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B1;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPE
       (rs2, rs1, rd, RISCV_SLTU)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPE
       (rs2, rs1, rd, RISCV_XOR)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPE
       (rs2, rs1, rd, RISCV_SRL)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPE
       (rs2, rs1, rd, RISCV_SRA)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B1;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPE
       (rs2, rs1, rd, RISCV_OR)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B1;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPE
       (rs2, rs1, rd, RISCV_AND)
   else if ((andb
               (let _mappingpatterns_27_ := subrange_vec_dec v__177 13 12 in
               let _mappingpatterns_26_ := subrange_vec_dec v__177 14 14 in
               andb (size_bits_backwards_matches _mappingpatterns_27_)
                 (if ((size_bits_backwards_matches _mappingpatterns_27_)) then
                    let size := size_bits_backwards _mappingpatterns_27_ in
                    andb (bool_bits_backwards_matches _mappingpatterns_26_)
                      (if ((bool_bits_backwards_matches _mappingpatterns_26_)) then
                         let is_unsigned := bool_bits_backwards _mappingpatterns_26_ in
                         true
                       else false)
                  else false))
               (eq_vec (subrange_vec_dec v__177 6 0) (vec_of_bits [B0;B0;B0;B0;B0;B1;B1]  : mword 7))))
   then
     let imm : mword 12 := subrange_vec_dec v__177 31 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let imm : mword 12 := subrange_vec_dec v__177 31 20 in
     let _mappingpatterns_27_ := subrange_vec_dec v__177 13 12 in
     let _mappingpatterns_26_ := subrange_vec_dec v__177 14 14 in
     let size := size_bits_backwards _mappingpatterns_27_ in
     let is_unsigned := bool_bits_backwards _mappingpatterns_26_ in
     LOAD
       (imm, rs1, rd, is_unsigned, size, false, false)
   else if ((andb
               (let _mappingpatterns_28_ := subrange_vec_dec v__177 13 12 in
               andb (size_bits_backwards_matches _mappingpatterns_28_)
                 (if ((size_bits_backwards_matches _mappingpatterns_28_)) then
                    let size := size_bits_backwards _mappingpatterns_28_ in
                    true
                  else false))
               (andb (eq_vec (subrange_vec_dec v__177 14 14) (vec_of_bits [B0]  : mword 1))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B0;B0;B0;B1;B1]  : mword 7))))) then
     let imm7 : bits 7 := subrange_vec_dec v__177 31 25 in
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let imm7 : bits 7 := subrange_vec_dec v__177 31 25 in
     let imm5 : bits 5 := subrange_vec_dec v__177 11 7 in
     let _mappingpatterns_28_ := subrange_vec_dec v__177 13 12 in
     let size := size_bits_backwards _mappingpatterns_28_ in
     STORE
       (concat_vec (imm7  : bits 7) (imm5  : bits 5), rs2, rs1, size, false, false)
   else if ((andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__177 6 0) (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))
   then
     let imm : mword 12 := subrange_vec_dec v__177 31 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let imm : mword 12 := subrange_vec_dec v__177 31 20 in
     ADDIW
       (imm, rs1, rd)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     let shamt : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     SHIFTW
       (shamt, rs1, rd, RISCV_SLLI)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     let shamt : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     SHIFTW
       (shamt, rs1, rd, RISCV_SRLI)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     let shamt : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     SHIFTW
       (shamt, rs1, rd, RISCV_SRAI)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPEW
       (rs2, rs1, rd, RISCV_ADDW)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPEW
       (rs2, rs1, rd, RISCV_SUBW)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPEW
       (rs2, rs1, rd, RISCV_SLLW)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPEW
       (rs2, rs1, rd, RISCV_SRLW)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     RTYPEW
       (rs2, rs1, rd, RISCV_SRAW)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     let shamt : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     SHIFTIWOP
       (shamt, rs1, rd, RISCV_SLLIW)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     let shamt : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     SHIFTIWOP
       (shamt, rs1, rd, RISCV_SRLIW)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     let shamt : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     SHIFTIWOP
       (shamt, rs1, rd, RISCV_SRAIW)
   else if ((andb
               (let _mappingpatterns_29_ : bits 3 := subrange_vec_dec v__177 14 12 in
               andb (encdec_mul_op_backwards_matches _mappingpatterns_29_)
                 (if ((encdec_mul_op_backwards_matches _mappingpatterns_29_)) then
                    let '(high, signed1, signed2) := encdec_mul_op_backwards _mappingpatterns_29_ in
                    true
                  else false))
               (andb
                  (eq_vec (subrange_vec_dec v__177 31 25)
                     (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let _mappingpatterns_29_ : bits 3 := subrange_vec_dec v__177 14 12 in
     let '(high, signed1, signed2) := encdec_mul_op_backwards _mappingpatterns_29_ in
     MUL
       (rs2, rs1, rd, high, signed1, signed2)
   else if ((andb
               (let _mappingpatterns_30_ := subrange_vec_dec v__177 12 12 in
               andb (bool_not_bits_backwards_matches _mappingpatterns_30_)
                 (if ((bool_not_bits_backwards_matches _mappingpatterns_30_)) then
                    let s := bool_not_bits_backwards _mappingpatterns_30_ in
                    true
                  else false))
               (andb
                  (eq_vec (subrange_vec_dec v__177 31 25)
                     (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
                  (andb (eq_vec (subrange_vec_dec v__177 14 13) (vec_of_bits [B1;B0]  : mword 2))
                     (eq_vec (subrange_vec_dec v__177 6 0)
                        (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let _mappingpatterns_30_ := subrange_vec_dec v__177 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_30_ in
     DIV
       (rs2, rs1, rd, s)
   else if ((andb
               (let _mappingpatterns_31_ := subrange_vec_dec v__177 12 12 in
               andb (bool_not_bits_backwards_matches _mappingpatterns_31_)
                 (if ((bool_not_bits_backwards_matches _mappingpatterns_31_)) then
                    let s := bool_not_bits_backwards _mappingpatterns_31_ in
                    true
                  else false))
               (andb
                  (eq_vec (subrange_vec_dec v__177 31 25)
                     (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
                  (andb (eq_vec (subrange_vec_dec v__177 14 13) (vec_of_bits [B1;B1]  : mword 2))
                     (eq_vec (subrange_vec_dec v__177 6 0)
                        (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let _mappingpatterns_31_ := subrange_vec_dec v__177 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_31_ in
     REM
       (rs2, rs1, rd, s)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__177 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     MULW
       (rs2, rs1, rd)
   else if ((andb
               (let _mappingpatterns_32_ := subrange_vec_dec v__177 12 12 in
               andb (bool_not_bits_backwards_matches _mappingpatterns_32_)
                 (if ((bool_not_bits_backwards_matches _mappingpatterns_32_)) then
                    let s := bool_not_bits_backwards _mappingpatterns_32_ in
                    true
                  else false))
               (andb
                  (eq_vec (subrange_vec_dec v__177 31 25)
                     (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
                  (andb (eq_vec (subrange_vec_dec v__177 14 13) (vec_of_bits [B1;B0]  : mword 2))
                     (eq_vec (subrange_vec_dec v__177 6 0)
                        (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let _mappingpatterns_32_ := subrange_vec_dec v__177 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_32_ in
     DIVW
       (rs2, rs1, rd, s)
   else if ((andb
               (let _mappingpatterns_33_ := subrange_vec_dec v__177 12 12 in
               andb (bool_not_bits_backwards_matches _mappingpatterns_33_)
                 (if ((bool_not_bits_backwards_matches _mappingpatterns_33_)) then
                    let s := bool_not_bits_backwards _mappingpatterns_33_ in
                    true
                  else false))
               (andb
                  (eq_vec (subrange_vec_dec v__177 31 25)
                     (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
                  (andb (eq_vec (subrange_vec_dec v__177 14 13) (vec_of_bits [B1;B1]  : mword 2))
                     (eq_vec (subrange_vec_dec v__177 6 0)
                        (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let _mappingpatterns_33_ := subrange_vec_dec v__177 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_33_ in
     REMW
       (rs2, rs1, rd, s)
   else if ((andb (eq_vec (subrange_vec_dec v__177 31 28) (vec_of_bits [B0;B0;B0;B0]  : mword 4))
               (eq_vec (subrange_vec_dec v__177 19 0)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]
                    : mword 20)))) then
     let succ : mword 4 := subrange_vec_dec v__177 23 20 in
     let pred : mword 4 := subrange_vec_dec v__177 27 24 in
     FENCE
       (pred, succ)
   else if ((eq_vec v__177
               (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;
                             B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]
                 : mword 32))) then
     FENCEI
       (tt)
   else if ((eq_vec v__177
               (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]
                 : mword 32))) then
     ECALL
       (tt)
   else if ((eq_vec v__177
               (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]
                 : mword 32))) then
     MRET
       (tt)
   else if ((eq_vec v__177
               (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]
                 : mword 32))) then
     SRET
       (tt)
   else if ((eq_vec v__177
               (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]
                 : mword 32))) then
     EBREAK
       (tt)
   else if ((eq_vec v__177
               (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]
                 : mword 32))) then
     WFI
       (tt)
   else if ((andb
               (eq_vec (subrange_vec_dec v__177 31 25)
                  (vec_of_bits [B0;B0;B0;B1;B0;B0;B1]  : mword 7))
               (eq_vec (subrange_vec_dec v__177 14 0)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]  : mword 15)))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     SFENCE_VMA
       (rs1, rs2)
   else if sumbool_of_bool ((andb
                               (let _mappingpatterns_36_ := subrange_vec_dec v__177 13 12 in
                               let _mappingpatterns_35_ := subrange_vec_dec v__177 25 25 in
                               let _mappingpatterns_34_ := subrange_vec_dec v__177 26 26 in
                               andb (size_bits_backwards_matches _mappingpatterns_36_)
                                 (if ((size_bits_backwards_matches _mappingpatterns_36_)) then
                                    let size := size_bits_backwards _mappingpatterns_36_ in
                                    andb (bool_bits_backwards_matches _mappingpatterns_35_)
                                      (if ((bool_bits_backwards_matches _mappingpatterns_35_)) then
                                         let rl := bool_bits_backwards _mappingpatterns_35_ in
                                         andb (bool_bits_backwards_matches _mappingpatterns_34_)
                                           (if ((bool_bits_backwards_matches _mappingpatterns_34_))
                                            then
                                              let aq := bool_bits_backwards _mappingpatterns_34_ in
                                              true
                                            else false)
                                       else false)
                                  else false))
                               (andb
                                  (Z.eqb
                                     (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                   (subrange_vec_dec v__177 31 27))))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                                     (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                   (vec_of_bits [B0;B0;B0;B1;B0]
                                                                     : mword 5))))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                                  (andb
                                     (Z.eqb
                                        (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                      (subrange_vec_dec v__177 24 20))))
                                         : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                                        (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                      (vec_of_bits [B0;B0;B0;B0;B0]
                                                                        : mword 5))))
                                         : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                                     (andb
                                        (eq_vec (subrange_vec_dec v__177 14 14)
                                           (vec_of_bits [B0]  : mword 1))
                                        (eq_vec (subrange_vec_dec v__177 6 0)
                                           (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))))))
   then
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let _mappingpatterns_36_ := subrange_vec_dec v__177 13 12 in
     let _mappingpatterns_35_ := subrange_vec_dec v__177 25 25 in
     let _mappingpatterns_34_ := subrange_vec_dec v__177 26 26 in
     let size := size_bits_backwards _mappingpatterns_36_ in
     let rl := bool_bits_backwards _mappingpatterns_35_ in
     let aq := bool_bits_backwards _mappingpatterns_34_ in
     LOADRES
       (aq, rl, rs1, size, rd)
   else if sumbool_of_bool ((andb
                               (let _mappingpatterns_39_ := subrange_vec_dec v__177 13 12 in
                               let _mappingpatterns_38_ := subrange_vec_dec v__177 25 25 in
                               let _mappingpatterns_37_ := subrange_vec_dec v__177 26 26 in
                               andb (size_bits_backwards_matches _mappingpatterns_39_)
                                 (if ((size_bits_backwards_matches _mappingpatterns_39_)) then
                                    let size := size_bits_backwards _mappingpatterns_39_ in
                                    andb (bool_bits_backwards_matches _mappingpatterns_38_)
                                      (if ((bool_bits_backwards_matches _mappingpatterns_38_)) then
                                         let rl := bool_bits_backwards _mappingpatterns_38_ in
                                         andb (bool_bits_backwards_matches _mappingpatterns_37_)
                                           (if ((bool_bits_backwards_matches _mappingpatterns_37_))
                                            then
                                              let aq := bool_bits_backwards _mappingpatterns_37_ in
                                              true
                                            else false)
                                       else false)
                                  else false))
                               (andb
                                  (Z.eqb
                                     (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                   (subrange_vec_dec v__177 31 27))))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                                     (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                   (vec_of_bits [B0;B0;B0;B1;B1]
                                                                     : mword 5))))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                                  (andb
                                     (eq_vec (subrange_vec_dec v__177 14 14)
                                        (vec_of_bits [B0]  : mword 1))
                                     (eq_vec (subrange_vec_dec v__177 6 0)
                                        (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))))) then
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let _mappingpatterns_39_ := subrange_vec_dec v__177 13 12 in
     let _mappingpatterns_38_ := subrange_vec_dec v__177 25 25 in
     let _mappingpatterns_37_ := subrange_vec_dec v__177 26 26 in
     let size := size_bits_backwards _mappingpatterns_39_ in
     let rl := bool_bits_backwards _mappingpatterns_38_ in
     let aq := bool_bits_backwards _mappingpatterns_37_ in
     STORECON
       (aq, rl, rs2, rs1, size, rd)
   else if ((andb
               (let _mappingpatterns_40_ := subrange_vec_dec v__177 31 27 in
               let _mappingpatterns_43_ := subrange_vec_dec v__177 13 12 in
               let _mappingpatterns_42_ := subrange_vec_dec v__177 25 25 in
               let _mappingpatterns_41_ := subrange_vec_dec v__177 26 26 in
               let _mappingpatterns_40_ := subrange_vec_dec v__177 31 27 in
               andb (size_bits_backwards_matches _mappingpatterns_43_)
                 (if ((size_bits_backwards_matches _mappingpatterns_43_)) then
                    let size := size_bits_backwards _mappingpatterns_43_ in
                    andb (bool_bits_backwards_matches _mappingpatterns_42_)
                      (if ((bool_bits_backwards_matches _mappingpatterns_42_)) then
                         let rl := bool_bits_backwards _mappingpatterns_42_ in
                         andb (bool_bits_backwards_matches _mappingpatterns_41_)
                           (if ((bool_bits_backwards_matches _mappingpatterns_41_)) then
                              let aq := bool_bits_backwards _mappingpatterns_41_ in
                              andb (encdec_amoop_backwards_matches _mappingpatterns_40_)
                                (if ((encdec_amoop_backwards_matches _mappingpatterns_40_)) then
                                   let op := encdec_amoop_backwards _mappingpatterns_40_ in
                                   true
                                 else false)
                            else false)
                       else false)
                  else false))
               (andb (eq_vec (subrange_vec_dec v__177 14 14) (vec_of_bits [B0]  : mword 1))
                  (eq_vec (subrange_vec_dec v__177 6 0)
                     (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7))))) then
     let _mappingpatterns_40_ := subrange_vec_dec v__177 31 27 in
     let rs2 : mword 5 := subrange_vec_dec v__177 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let _mappingpatterns_43_ := subrange_vec_dec v__177 13 12 in
     let _mappingpatterns_42_ := subrange_vec_dec v__177 25 25 in
     let _mappingpatterns_41_ := subrange_vec_dec v__177 26 26 in
     let _mappingpatterns_40_ := subrange_vec_dec v__177 31 27 in
     let size := size_bits_backwards _mappingpatterns_43_ in
     let rl := bool_bits_backwards _mappingpatterns_42_ in
     let aq := bool_bits_backwards _mappingpatterns_41_ in
     let op := encdec_amoop_backwards _mappingpatterns_40_ in
     AMO
       (op, aq, rl, rs2, rs1, size, rd)
   else if ((andb
               (let _mappingpatterns_45_ := subrange_vec_dec v__177 13 12 in
               let _mappingpatterns_44_ := subrange_vec_dec v__177 14 14 in
               andb (encdec_csrop_backwards_matches _mappingpatterns_45_)
                 (if ((encdec_csrop_backwards_matches _mappingpatterns_45_)) then
                    let op := encdec_csrop_backwards _mappingpatterns_45_ in
                    andb (bool_bits_backwards_matches _mappingpatterns_44_)
                      (if ((bool_bits_backwards_matches _mappingpatterns_44_)) then
                         let is_imm := bool_bits_backwards _mappingpatterns_44_ in
                         true
                       else false)
                  else false))
               (eq_vec (subrange_vec_dec v__177 6 0) (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))))
   then
     let csr : mword 12 := subrange_vec_dec v__177 31 20 in
     let rs1 : mword 5 := subrange_vec_dec v__177 19 15 in
     let rd : mword 5 := subrange_vec_dec v__177 11 7 in
     let csr : mword 12 := subrange_vec_dec v__177 31 20 in
     let _mappingpatterns_45_ := subrange_vec_dec v__177 13 12 in
     let _mappingpatterns_44_ := subrange_vec_dec v__177 14 14 in
     let op := encdec_csrop_backwards _mappingpatterns_45_ in
     let is_imm := bool_bits_backwards _mappingpatterns_44_ in
     CSR
       (csr, rs1, rd, is_imm, op)
   else if ((eq_vec v__177
               (vec_of_bits [B1;B1;B1;B1;B1;B0;B1;B0;B1;B1;B0;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B1]
                 : mword 32))) then
     STOP_FETCHING
       (tt)
   else if ((eq_vec v__177
               (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B1]
                 : mword 32))) then
     THREAD_START
       (tt)
   else ILLEGAL (v__177).

Definition encdec_forwards_matches (arg_ : ast) 
: bool :=
   match arg_ with
   | UTYPE (imm,rd,op) => true
   | RISCV_JAL (v__391,rd) =>
      if ((eq_vec (subrange_vec_dec v__391 0 0) (vec_of_bits [B0]  : mword 1))) then true
      else
        let g__13 := RISCV_JAL (v__391, rd) in
        false
   | RISCV_JALR (imm,rs1,rd) => true
   | BTYPE (v__393,rs2,rs1,op) =>
      if ((eq_vec (subrange_vec_dec v__393 0 0) (vec_of_bits [B0]  : mword 1))) then true
      else
        let g__13 := BTYPE (v__393, rs2, rs1, op) in
        false
   | ITYPE (imm,rs1,rd,op) => true
   | SHIFTIOP (shamt,rs1,rd,RISCV_SLLI) => true
   | SHIFTIOP (shamt,rs1,rd,RISCV_SRLI) => true
   | SHIFTIOP (shamt,rs1,rd,RISCV_SRAI) => true
   | RTYPE (rs2,rs1,rd,RISCV_ADD) => true
   | RTYPE (rs2,rs1,rd,RISCV_SUB) => true
   | RTYPE (rs2,rs1,rd,RISCV_SLL) => true
   | RTYPE (rs2,rs1,rd,RISCV_SLT) => true
   | RTYPE (rs2,rs1,rd,RISCV_SLTU) => true
   | RTYPE (rs2,rs1,rd,RISCV_XOR) => true
   | RTYPE (rs2,rs1,rd,RISCV_SRL) => true
   | RTYPE (rs2,rs1,rd,RISCV_SRA) => true
   | RTYPE (rs2,rs1,rd,RISCV_OR) => true
   | RTYPE (rs2,rs1,rd,RISCV_AND) => true
   | LOAD (imm,rs1,rd,is_unsigned,size,false,false) => true
   | STORE (v__395,rs2,rs1,size,false,false) => true
   | ADDIW (imm,rs1,rd) => true
   | SHIFTW (shamt,rs1,rd,RISCV_SLLI) => true
   | SHIFTW (shamt,rs1,rd,RISCV_SRLI) => true
   | SHIFTW (shamt,rs1,rd,RISCV_SRAI) => true
   | RTYPEW (rs2,rs1,rd,RISCV_ADDW) => true
   | RTYPEW (rs2,rs1,rd,RISCV_SUBW) => true
   | RTYPEW (rs2,rs1,rd,RISCV_SLLW) => true
   | RTYPEW (rs2,rs1,rd,RISCV_SRLW) => true
   | RTYPEW (rs2,rs1,rd,RISCV_SRAW) => true
   | SHIFTIWOP (shamt,rs1,rd,RISCV_SLLIW) => true
   | SHIFTIWOP (shamt,rs1,rd,RISCV_SRLIW) => true
   | SHIFTIWOP (shamt,rs1,rd,RISCV_SRAIW) => true
   | MUL (rs2,rs1,rd,high,signed1,signed2) => true
   | DIV (rs2,rs1,rd,s) => true
   | REM (rs2,rs1,rd,s) => true
   | MULW (rs2,rs1,rd) => true
   | DIVW (rs2,rs1,rd,s) => true
   | REMW (rs2,rs1,rd,s) => true
   | FENCE (pred,succ) => true
   | FENCEI (tt) => true
   | ECALL (tt) => true
   | MRET (tt) => true
   | SRET (tt) => true
   | EBREAK (tt) => true
   | WFI (tt) => true
   | SFENCE_VMA (rs1,rs2) => true
   | LOADRES (aq,rl,rs1,size,rd) => true
   | STORECON (aq,rl,rs2,rs1,size,rd) => true
   | AMO (op,aq,rl,rs2,rs1,size,rd) => true
   | CSR (csr,rs1,rd,is_imm,op) => true
   | STOP_FETCHING (tt) => true
   | THREAD_START (tt) => true
   | ILLEGAL (s) => true
   | g__13 => false
   end.

Definition encdec_backwards_matches (arg_ : mword 32) 
: bool :=
   let v__396 := arg_ in
   if ((let _mappingpatterns_0_ := subrange_vec_dec v__396 6 0 in
     andb (encdec_uop_backwards_matches _mappingpatterns_0_)
       (if ((encdec_uop_backwards_matches _mappingpatterns_0_)) then
          let op := encdec_uop_backwards _mappingpatterns_0_ in
          true
        else false))) then
     let _mappingpatterns_0_ := subrange_vec_dec v__396 6 0 in
     let op := encdec_uop_backwards _mappingpatterns_0_ in
     true
   else if ((eq_vec (subrange_vec_dec v__396 6 0) (vec_of_bits [B1;B1;B0;B1;B1;B1;B1]  : mword 7)))
   then
     true
   else if ((andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__396 6 0) (vec_of_bits [B1;B1;B0;B0;B1;B1;B1]  : mword 7))))
   then
     true
   else if ((andb
               (let _mappingpatterns_1_ := subrange_vec_dec v__396 14 12 in
               andb (encdec_bop_backwards_matches _mappingpatterns_1_)
                 (if ((encdec_bop_backwards_matches _mappingpatterns_1_)) then
                    let op := encdec_bop_backwards _mappingpatterns_1_ in
                    true
                  else false))
               (eq_vec (subrange_vec_dec v__396 6 0) (vec_of_bits [B1;B1;B0;B0;B0;B1;B1]  : mword 7))))
   then
     let _mappingpatterns_1_ := subrange_vec_dec v__396 14 12 in
     let op := encdec_bop_backwards _mappingpatterns_1_ in
     true
   else if ((andb
               (let _mappingpatterns_2_ := subrange_vec_dec v__396 14 12 in
               andb (encdec_iop_backwards_matches _mappingpatterns_2_)
                 (if ((encdec_iop_backwards_matches _mappingpatterns_2_)) then
                    let op := encdec_iop_backwards _mappingpatterns_2_ in
                    true
                  else false))
               (eq_vec (subrange_vec_dec v__396 6 0) (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))
   then
     let _mappingpatterns_2_ := subrange_vec_dec v__396 14 12 in
     let op := encdec_iop_backwards _mappingpatterns_2_ in
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 26) (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 26) (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 26) (vec_of_bits [B0;B1;B0;B0;B0;B0]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B1;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B1;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B1;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B1;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (let _mappingpatterns_4_ := subrange_vec_dec v__396 13 12 in
               let _mappingpatterns_3_ := subrange_vec_dec v__396 14 14 in
               andb (size_bits_backwards_matches _mappingpatterns_4_)
                 (if ((size_bits_backwards_matches _mappingpatterns_4_)) then
                    let size := size_bits_backwards _mappingpatterns_4_ in
                    andb (bool_bits_backwards_matches _mappingpatterns_3_)
                      (if ((bool_bits_backwards_matches _mappingpatterns_3_)) then
                         let is_unsigned := bool_bits_backwards _mappingpatterns_3_ in
                         true
                       else false)
                  else false))
               (eq_vec (subrange_vec_dec v__396 6 0) (vec_of_bits [B0;B0;B0;B0;B0;B1;B1]  : mword 7))))
   then
     let _mappingpatterns_4_ := subrange_vec_dec v__396 13 12 in
     let _mappingpatterns_3_ := subrange_vec_dec v__396 14 14 in
     let size := size_bits_backwards _mappingpatterns_4_ in
     let is_unsigned := bool_bits_backwards _mappingpatterns_3_ in
     true
   else if ((andb
               (let _mappingpatterns_5_ := subrange_vec_dec v__396 13 12 in
               andb (size_bits_backwards_matches _mappingpatterns_5_)
                 (if ((size_bits_backwards_matches _mappingpatterns_5_)) then
                    let size := size_bits_backwards _mappingpatterns_5_ in
                    true
                  else false))
               (andb (eq_vec (subrange_vec_dec v__396 14 14) (vec_of_bits [B0]  : mword 1))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B0;B0;B0;B1;B1]  : mword 7))))) then
     let _mappingpatterns_5_ := subrange_vec_dec v__396 13 12 in
     let size := size_bits_backwards _mappingpatterns_5_ in
     true
   else if ((andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__396 6 0) (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))
   then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B1;B0;B1]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (let _mappingpatterns_6_ : bits 3 := subrange_vec_dec v__396 14 12 in
               andb (encdec_mul_op_backwards_matches _mappingpatterns_6_)
                 (if ((encdec_mul_op_backwards_matches _mappingpatterns_6_)) then
                    let '(high, signed1, signed2) := encdec_mul_op_backwards _mappingpatterns_6_ in
                    true
                  else false))
               (andb
                  (eq_vec (subrange_vec_dec v__396 31 25)
                     (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))) then
     let _mappingpatterns_6_ : bits 3 := subrange_vec_dec v__396 14 12 in
     let '(high, signed1, signed2) := encdec_mul_op_backwards _mappingpatterns_6_ in
     true
   else if ((andb
               (let _mappingpatterns_7_ := subrange_vec_dec v__396 12 12 in
               andb (bool_not_bits_backwards_matches _mappingpatterns_7_)
                 (if ((bool_not_bits_backwards_matches _mappingpatterns_7_)) then
                    let s := bool_not_bits_backwards _mappingpatterns_7_ in
                    true
                  else false))
               (andb
                  (eq_vec (subrange_vec_dec v__396 31 25)
                     (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
                  (andb (eq_vec (subrange_vec_dec v__396 14 13) (vec_of_bits [B1;B0]  : mword 2))
                     (eq_vec (subrange_vec_dec v__396 6 0)
                        (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))))) then
     let _mappingpatterns_7_ := subrange_vec_dec v__396 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_7_ in
     true
   else if ((andb
               (let _mappingpatterns_8_ := subrange_vec_dec v__396 12 12 in
               andb (bool_not_bits_backwards_matches _mappingpatterns_8_)
                 (if ((bool_not_bits_backwards_matches _mappingpatterns_8_)) then
                    let s := bool_not_bits_backwards _mappingpatterns_8_ in
                    true
                  else false))
               (andb
                  (eq_vec (subrange_vec_dec v__396 31 25)
                     (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
                  (andb (eq_vec (subrange_vec_dec v__396 14 13) (vec_of_bits [B1;B1]  : mword 2))
                     (eq_vec (subrange_vec_dec v__396 6 0)
                        (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))))) then
     let _mappingpatterns_8_ := subrange_vec_dec v__396 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_8_ in
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
               (andb (eq_vec (subrange_vec_dec v__396 14 12) (vec_of_bits [B0;B0;B0]  : mword 3))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))) then
     true
   else if ((andb
               (let _mappingpatterns_9_ := subrange_vec_dec v__396 12 12 in
               andb (bool_not_bits_backwards_matches _mappingpatterns_9_)
                 (if ((bool_not_bits_backwards_matches _mappingpatterns_9_)) then
                    let s := bool_not_bits_backwards _mappingpatterns_9_ in
                    true
                  else false))
               (andb
                  (eq_vec (subrange_vec_dec v__396 31 25)
                     (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
                  (andb (eq_vec (subrange_vec_dec v__396 14 13) (vec_of_bits [B1;B0]  : mword 2))
                     (eq_vec (subrange_vec_dec v__396 6 0)
                        (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))))) then
     let _mappingpatterns_9_ := subrange_vec_dec v__396 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_9_ in
     true
   else if ((andb
               (let _mappingpatterns_10_ := subrange_vec_dec v__396 12 12 in
               andb (bool_not_bits_backwards_matches _mappingpatterns_10_)
                 (if ((bool_not_bits_backwards_matches _mappingpatterns_10_)) then
                    let s := bool_not_bits_backwards _mappingpatterns_10_ in
                    true
                  else false))
               (andb
                  (eq_vec (subrange_vec_dec v__396 31 25)
                     (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7))
                  (andb (eq_vec (subrange_vec_dec v__396 14 13) (vec_of_bits [B1;B1]  : mword 2))
                     (eq_vec (subrange_vec_dec v__396 6 0)
                        (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))))) then
     let _mappingpatterns_10_ := subrange_vec_dec v__396 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_10_ in
     true
   else if ((andb (eq_vec (subrange_vec_dec v__396 31 28) (vec_of_bits [B0;B0;B0;B0]  : mword 4))
               (eq_vec (subrange_vec_dec v__396 19 0)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]
                    : mword 20)))) then
     true
   else if ((eq_vec v__396
               (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;
                             B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]
                 : mword 32))) then
     true
   else if ((eq_vec v__396
               (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]
                 : mword 32))) then
     true
   else if ((eq_vec v__396
               (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]
                 : mword 32))) then
     true
   else if ((eq_vec v__396
               (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]
                 : mword 32))) then
     true
   else if ((eq_vec v__396
               (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]
                 : mword 32))) then
     true
   else if ((eq_vec v__396
               (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]
                 : mword 32))) then
     true
   else if ((andb
               (eq_vec (subrange_vec_dec v__396 31 25)
                  (vec_of_bits [B0;B0;B0;B1;B0;B0;B1]  : mword 7))
               (eq_vec (subrange_vec_dec v__396 14 0)
                  (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B0;B0;B1;B1]  : mword 15)))) then
     true
   else if sumbool_of_bool ((andb
                               (let _mappingpatterns_13_ := subrange_vec_dec v__396 13 12 in
                               let _mappingpatterns_12_ := subrange_vec_dec v__396 25 25 in
                               let _mappingpatterns_11_ := subrange_vec_dec v__396 26 26 in
                               andb (size_bits_backwards_matches _mappingpatterns_13_)
                                 (if ((size_bits_backwards_matches _mappingpatterns_13_)) then
                                    let size := size_bits_backwards _mappingpatterns_13_ in
                                    andb (bool_bits_backwards_matches _mappingpatterns_12_)
                                      (if ((bool_bits_backwards_matches _mappingpatterns_12_)) then
                                         let rl := bool_bits_backwards _mappingpatterns_12_ in
                                         andb (bool_bits_backwards_matches _mappingpatterns_11_)
                                           (if ((bool_bits_backwards_matches _mappingpatterns_11_))
                                            then
                                              let aq := bool_bits_backwards _mappingpatterns_11_ in
                                              true
                                            else false)
                                       else false)
                                  else false))
                               (andb
                                  (Z.eqb
                                     (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                   (subrange_vec_dec v__396 31 27))))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                                     (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                   (vec_of_bits [B0;B0;B0;B1;B0]
                                                                     : mword 5))))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                                  (andb
                                     (Z.eqb
                                        (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                      (subrange_vec_dec v__396 24 20))))
                                         : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                                        (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                      (vec_of_bits [B0;B0;B0;B0;B0]
                                                                        : mword 5))))
                                         : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                                     (andb
                                        (eq_vec (subrange_vec_dec v__396 14 14)
                                           (vec_of_bits [B0]  : mword 1))
                                        (eq_vec (subrange_vec_dec v__396 6 0)
                                           (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))))))
   then
     let _mappingpatterns_13_ := subrange_vec_dec v__396 13 12 in
     let _mappingpatterns_12_ := subrange_vec_dec v__396 25 25 in
     let _mappingpatterns_11_ := subrange_vec_dec v__396 26 26 in
     let size := size_bits_backwards _mappingpatterns_13_ in
     let rl := bool_bits_backwards _mappingpatterns_12_ in
     let aq := bool_bits_backwards _mappingpatterns_11_ in
     true
   else if sumbool_of_bool ((andb
                               (let _mappingpatterns_16_ := subrange_vec_dec v__396 13 12 in
                               let _mappingpatterns_15_ := subrange_vec_dec v__396 25 25 in
                               let _mappingpatterns_14_ := subrange_vec_dec v__396 26 26 in
                               andb (size_bits_backwards_matches _mappingpatterns_16_)
                                 (if ((size_bits_backwards_matches _mappingpatterns_16_)) then
                                    let size := size_bits_backwards _mappingpatterns_16_ in
                                    andb (bool_bits_backwards_matches _mappingpatterns_15_)
                                      (if ((bool_bits_backwards_matches _mappingpatterns_15_)) then
                                         let rl := bool_bits_backwards _mappingpatterns_15_ in
                                         andb (bool_bits_backwards_matches _mappingpatterns_14_)
                                           (if ((bool_bits_backwards_matches _mappingpatterns_14_))
                                            then
                                              let aq := bool_bits_backwards _mappingpatterns_14_ in
                                              true
                                            else false)
                                       else false)
                                  else false))
                               (andb
                                  (Z.eqb
                                     (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                   (subrange_vec_dec v__396 31 27))))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                                     (projT1 ((build_ex (projT1 (regbits_to_regno
                                                                   (vec_of_bits [B0;B0;B0;B1;B1]
                                                                     : mword 5))))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                                  (andb
                                     (eq_vec (subrange_vec_dec v__396 14 14)
                                        (vec_of_bits [B0]  : mword 1))
                                     (eq_vec (subrange_vec_dec v__396 6 0)
                                        (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))))) then
     let _mappingpatterns_16_ := subrange_vec_dec v__396 13 12 in
     let _mappingpatterns_15_ := subrange_vec_dec v__396 25 25 in
     let _mappingpatterns_14_ := subrange_vec_dec v__396 26 26 in
     let size := size_bits_backwards _mappingpatterns_16_ in
     let rl := bool_bits_backwards _mappingpatterns_15_ in
     let aq := bool_bits_backwards _mappingpatterns_14_ in
     true
   else if ((andb
               (let _mappingpatterns_17_ := subrange_vec_dec v__396 31 27 in
               let _mappingpatterns_20_ := subrange_vec_dec v__396 13 12 in
               let _mappingpatterns_19_ := subrange_vec_dec v__396 25 25 in
               let _mappingpatterns_18_ := subrange_vec_dec v__396 26 26 in
               let _mappingpatterns_17_ := subrange_vec_dec v__396 31 27 in
               andb (size_bits_backwards_matches _mappingpatterns_20_)
                 (if ((size_bits_backwards_matches _mappingpatterns_20_)) then
                    let size := size_bits_backwards _mappingpatterns_20_ in
                    andb (bool_bits_backwards_matches _mappingpatterns_19_)
                      (if ((bool_bits_backwards_matches _mappingpatterns_19_)) then
                         let rl := bool_bits_backwards _mappingpatterns_19_ in
                         andb (bool_bits_backwards_matches _mappingpatterns_18_)
                           (if ((bool_bits_backwards_matches _mappingpatterns_18_)) then
                              let aq := bool_bits_backwards _mappingpatterns_18_ in
                              andb (encdec_amoop_backwards_matches _mappingpatterns_17_)
                                (if ((encdec_amoop_backwards_matches _mappingpatterns_17_)) then
                                   let op := encdec_amoop_backwards _mappingpatterns_17_ in
                                   true
                                 else false)
                            else false)
                       else false)
                  else false))
               (andb (eq_vec (subrange_vec_dec v__396 14 14) (vec_of_bits [B0]  : mword 1))
                  (eq_vec (subrange_vec_dec v__396 6 0)
                     (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7))))) then
     let _mappingpatterns_17_ := subrange_vec_dec v__396 31 27 in
     let _mappingpatterns_20_ := subrange_vec_dec v__396 13 12 in
     let _mappingpatterns_19_ := subrange_vec_dec v__396 25 25 in
     let _mappingpatterns_18_ := subrange_vec_dec v__396 26 26 in
     let _mappingpatterns_17_ := subrange_vec_dec v__396 31 27 in
     let size := size_bits_backwards _mappingpatterns_20_ in
     let rl := bool_bits_backwards _mappingpatterns_19_ in
     let aq := bool_bits_backwards _mappingpatterns_18_ in
     let op := encdec_amoop_backwards _mappingpatterns_17_ in
     true
   else if ((andb
               (let _mappingpatterns_22_ := subrange_vec_dec v__396 13 12 in
               let _mappingpatterns_21_ := subrange_vec_dec v__396 14 14 in
               andb (encdec_csrop_backwards_matches _mappingpatterns_22_)
                 (if ((encdec_csrop_backwards_matches _mappingpatterns_22_)) then
                    let op := encdec_csrop_backwards _mappingpatterns_22_ in
                    andb (bool_bits_backwards_matches _mappingpatterns_21_)
                      (if ((bool_bits_backwards_matches _mappingpatterns_21_)) then
                         let is_imm := bool_bits_backwards _mappingpatterns_21_ in
                         true
                       else false)
                  else false))
               (eq_vec (subrange_vec_dec v__396 6 0) (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))))
   then
     let _mappingpatterns_22_ := subrange_vec_dec v__396 13 12 in
     let _mappingpatterns_21_ := subrange_vec_dec v__396 14 14 in
     let op := encdec_csrop_backwards _mappingpatterns_22_ in
     let is_imm := bool_bits_backwards _mappingpatterns_21_ in
     true
   else if ((eq_vec v__396
               (vec_of_bits [B1;B1;B1;B1;B1;B0;B1;B0;B1;B1;B0;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B1]
                 : mword 32))) then
     true
   else if ((eq_vec v__396
               (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B1]
                 : mword 32))) then
     true
   else true.

Definition print_insn (merge_var : ast) 
: M (string) :=
   match merge_var with
   | NOP (tt) => returnm ("nop"  : string)
   | C_ADDI4SPN (rdc,nzimm) =>
      returnm ((String.append "c.addi4spn "
                  (String.append ((reg_name_abi (creg2reg_bits rdc))  : string)
                     (String.append ", " (string_of_bits nzimm))))
       : string)
   | C_LW (uimm,rsc,rdc) =>
      returnm ((String.append "c.lw   "
                  (String.append ((reg_name_abi (creg2reg_bits rdc))  : string)
                     (String.append ", "
                        (String.append ((reg_name_abi (creg2reg_bits rsc))  : string)
                           (String.append ", " (string_of_bits uimm))))))
       : string)
   | C_LD (uimm,rsc,rdc) =>
      returnm ((String.append "c.ld   "
                  (String.append ((reg_name_abi (creg2reg_bits rdc))  : string)
                     (String.append ", "
                        (String.append ((reg_name_abi (creg2reg_bits rsc))  : string)
                           (String.append ", " (string_of_bits uimm))))))
       : string)
   | C_SW (uimm,rsc1,rsc2) =>
      returnm ((String.append "c.sw   "
                  (String.append ((reg_name_abi (creg2reg_bits rsc1))  : string)
                     (String.append ", "
                        (String.append ((reg_name_abi (creg2reg_bits rsc2))  : string)
                           (String.append ", " (string_of_bits uimm))))))
       : string)
   | C_SD (uimm,rsc1,rsc2) =>
      returnm ((String.append "c.sd   "
                  (String.append ((reg_name_abi (creg2reg_bits rsc1))  : string)
                     (String.append ", "
                        (String.append ((reg_name_abi (creg2reg_bits rsc2))  : string)
                           (String.append ", " (string_of_bits uimm))))))
       : string)
   | C_ADDI (nzi,rsd) =>
      returnm ((String.append "c.addi   "
                  (String.append ((reg_name_abi rsd)  : string)
                     (String.append ", " (string_of_bits nzi))))
       : string)
   | C_JAL (imm) => returnm ((String.append "c.jal   " (string_of_bits imm))  : string)
   | C_ADDIW (imm,rsd) =>
      returnm ((String.append "c.addiw "
                  (String.append ((reg_name_abi rsd)  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_LI (imm,rd) =>
      returnm ((String.append "c.li  "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_ADDI16SP (imm) => returnm ((String.append "c.addi16sp  " (string_of_bits imm))  : string)
   | C_LUI (imm,rd) =>
      returnm ((String.append "c.lui  "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_SRLI (shamt,rsd) =>
      returnm ((String.append "c.srli  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " (string_of_bits shamt))))
       : string)
   | C_SRAI (shamt,rsd) =>
      returnm ((String.append "c.srai  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " (string_of_bits shamt))))
       : string)
   | C_ANDI (imm,rsd) =>
      returnm ((String.append "c.andi  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_SUB (rsd,rs2) =>
      returnm ((String.append "c.sub  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_XOR (rsd,rs2) =>
      returnm ((String.append "c.xor  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_OR (rsd,rs2) =>
      returnm ((String.append "c.or   "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_AND (rsd,rs2) =>
      returnm ((String.append "c.and  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_SUBW (rsd,rs2) =>
      returnm ((String.append "c.subw "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_ADDW (rsd,rs2) =>
      returnm ((String.append "c.addw "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_J (imm) => returnm ((String.append "c.j    " (string_of_bits imm))  : string)
   | C_BEQZ (imm,rs) =>
      returnm ((String.append "c.beqz "
                  (String.append ((reg_name_abi (creg2reg_bits rs))  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_BNEZ (imm,rs) =>
      returnm ((String.append "c.bnez "
                  (String.append ((reg_name_abi (creg2reg_bits rs))  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_SLLI (shamt,rsd) =>
      returnm ((String.append "c.slli "
                  (String.append ((reg_name_abi rsd)  : string)
                     (String.append ", " (string_of_bits shamt))))
       : string)
   | C_LWSP (uimm,rd) =>
      returnm ((String.append "c.lwsp "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits uimm))))
       : string)
   | C_LDSP (uimm,rd) =>
      returnm ((String.append "c.ldsp "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits uimm))))
       : string)
   | C_SWSP (uimm,rd) =>
      returnm ((String.append "c.swsp "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits uimm))))
       : string)
   | C_SDSP (uimm,rd) =>
      returnm ((String.append "c.sdsp "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits uimm))))
       : string)
   | C_JR (rs1) => returnm ((String.append "c.jr  " ((reg_name_abi rs1)  : string))  : string)
   | C_JALR (rs1) => returnm ((String.append "c.jalr  " ((reg_name_abi rs1)  : string))  : string)
   | C_MV (rd,rs2) =>
      returnm ((String.append "c.mv  "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " ((reg_name_abi rs2)  : string))))
       : string)
   | C_ADD (rsd,rs2) =>
      returnm ((String.append "c.add  "
                  (String.append ((reg_name_abi rsd)  : string)
                     (String.append ", " ((reg_name_abi rs2)  : string))))
       : string)
   | STOP_FETCHING (tt) => returnm ("stop_fetching"  : string)
   | THREAD_START (tt) => returnm ("thread_start"  : string)
   | ILLEGAL (s) => returnm ((String.append "illegal " (string_of_bits s))  : string)
   | C_ILLEGAL (tt) => returnm ("c.illegal"  : string)
   | insn => (assembly_forwards insn)  : M (string)
   end.

Definition decode (bv : mword 32)  : option ast := Some (encdec_backwards bv).

Definition isRVC (h : mword 16) 
: bool :=
   negb (eq_vec (subrange_vec_dec h 1 0) (vec_of_bits [B1;B1]  : mword 2)).

Definition fetch '(tt : unit) 
: M (FetchResult) :=
   or_boolM
     ((read_reg PC_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
      cast_unit_vec (access_vec_dec w__0 0) >>= fun w__1 : mword 1 =>
      returnm ((neq_vec (w__1  : mword 1) (vec_of_bits [B0]  : mword 1))
       : bool))
     ((and_boolM
         ((read_reg PC_ref  : M (mword 64)) >>= fun w__2 : xlenbits =>
          cast_unit_vec (access_vec_dec w__2 1) >>= fun w__3 : mword 1 =>
          returnm ((neq_vec (w__3  : mword 1) (vec_of_bits [B0]  : mword 1))
           : bool)) (haveRVC tt >>= fun w__4 : bool => returnm ((negb w__4)  : bool)))
      : M (bool)) >>= fun w__6 : bool =>
   (if (w__6) then
      (read_reg PC_ref  : M (mword 64)) >>= fun w__7 : xlenbits =>
      returnm ((F_Error
                  (E_Fetch_Addr_Align, w__7))
       : FetchResult )
    else
      (read_reg PC_ref  : M (mword 64)) >>= fun w__8 : xlenbits =>
      translateAddr w__8 Execute Instruction >>= fun w__9 : TR_Result =>
      (match w__9 with
       | TR_Failure (e) =>
          (read_reg PC_ref  : M (mword 64)) >>= fun w__10 : xlenbits =>
          returnm ((F_Error
                      (e, w__10))
           : FetchResult )
       | TR_Address (ppclo) =>
          checked_mem_read Instruction ppclo 2 >>= fun w__11 : MemoryOpResult (mword (8 * 2)) =>
          (match w__11 with
           | MemException (e) =>
              (read_reg PC_ref  : M (mword 64)) >>= fun w__12 : xlenbits =>
              returnm ((F_Error
                          (E_Fetch_Access_Fault, w__12))
               : FetchResult )
           | MemValue (ilo) =>
              (if ((isRVC ilo)) then returnm ((F_RVC (ilo))  : FetchResult )
               else
                 (read_reg PC_ref  : M (mword 64)) >>= fun w__13 : xlenbits =>
                 let PChi : xlenbits := add_vec_int w__13 2 in
                 translateAddr PChi Execute Instruction >>= fun w__14 : TR_Result =>
                 (match w__14 with
                  | TR_Failure (e) => returnm ((F_Error (e, PChi))  : FetchResult )
                  | TR_Address (ppchi) =>
                     checked_mem_read Instruction ppchi 2 >>= fun w__15 : MemoryOpResult (mword (8 * 2)) =>
                     returnm ((match w__15 with
                               | MemException (e) => F_Error (E_Fetch_Access_Fault, PChi)
                               | MemValue (ihi) => F_Base (concat_vec ihi ilo)
                               end)
                      : FetchResult)
                  end)
                  : M (FetchResult))
               : M (FetchResult)
           end)
           : M (FetchResult)
       end)
       : M (FetchResult))
    : M (FetchResult).

Definition step (step_no : Z) 
: M ((bool * bool)) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   read_reg mip_ref >>= fun w__1 : Minterrupts =>
   read_reg mie_ref >>= fun w__2 : Minterrupts =>
   read_reg mideleg_ref >>= fun w__3 : Minterrupts =>
   curInterrupt w__0 w__1 w__2 w__3 >>= fun w__4 : option ((InterruptType * Privilege)) =>
   (match w__4 with
    | Some (intr,priv) =>
       let '_ :=
         (print_bits "Handling interrupt: " ((interruptType_to_bits intr)  : mword 4))
          : unit in
       handle_interrupt intr priv >> returnm (false, false)
    | None =>
       fetch tt >>= fun w__5 : FetchResult =>
       (match w__5 with
        | F_Error (e,addr) => handle_mem_exception addr e >> returnm (false, false)
        | F_RVC (h) =>
           (match (decodeCompressed h) with
            | None =>
               read_reg cur_privilege_ref >>= fun w__6 : Privilege =>
               (read_reg PC_ref  : M (mword 64)) >>= fun w__7 : xlenbits =>
               let '_ :=
                 (print_endline
                    (String.append "["
                       (String.append (string_of_int step_no)
                          (String.append "] ["
                             (String.append ((privLevel_to_str w__6)  : string)
                                (String.append "]: "
                                   (String.append (string_of_bits w__7)
                                      (String.append " ("
                                         (String.append (string_of_bits h) ") <no-decode>")))))))))
                  : unit in
               handle_decode_exception (EXTZ 64 h) >> returnm (false, true)
            | Some (ast) =>
               read_reg cur_privilege_ref >>= fun w__8 : Privilege =>
               (read_reg PC_ref  : M (mword 64)) >>= fun w__9 : xlenbits =>
               print_insn ast >>= fun w__10 : string =>
               let '_ :=
                 (print_endline
                    (String.append "["
                       (String.append (string_of_int step_no)
                          (String.append "] ["
                             (String.append ((privLevel_to_str w__8)  : string)
                                (String.append "]: "
                                   (String.append (string_of_bits w__9)
                                      (String.append " ("
                                         (String.append (string_of_bits h)
                                            (String.append ") " (w__10  : string)))))))))))
                  : unit in
               (read_reg PC_ref  : M (mword 64)) >>= fun w__11 : xlenbits =>
               write_reg nextPC_ref (add_vec_int w__11 2) >>
               execute ast >>= fun w__12 : bool => returnm (w__12, true)
            end)
            : M ((bool * bool))
        | F_Base (w) =>
           (match (decode w) with
            | None =>
               read_reg cur_privilege_ref >>= fun w__14 : Privilege =>
               (read_reg PC_ref  : M (mword 64)) >>= fun w__15 : xlenbits =>
               let '_ :=
                 (print_endline
                    (String.append "["
                       (String.append (string_of_int step_no)
                          (String.append "] ["
                             (String.append ((privLevel_to_str w__14)  : string)
                                (String.append "]: "
                                   (String.append (string_of_bits w__15)
                                      (String.append " ("
                                         (String.append (string_of_bits w) ") <no-decode>")))))))))
                  : unit in
               handle_decode_exception (EXTZ 64 w) >> returnm (false, true)
            | Some (ast) =>
               read_reg cur_privilege_ref >>= fun w__16 : Privilege =>
               (read_reg PC_ref  : M (mword 64)) >>= fun w__17 : xlenbits =>
               print_insn ast >>= fun w__18 : string =>
               let '_ :=
                 (print_endline
                    (String.append "["
                       (String.append (string_of_int step_no)
                          (String.append "] ["
                             (String.append ((privLevel_to_str w__16)  : string)
                                (String.append "]: "
                                   (String.append (string_of_bits w__17)
                                      (String.append " ("
                                         (String.append (string_of_bits w)
                                            (String.append ") " (w__18  : string)))))))))))
                  : unit in
               (read_reg PC_ref  : M (mword 64)) >>= fun w__19 : xlenbits =>
               write_reg nextPC_ref (add_vec_int w__19 4) >>
               execute ast >>= fun w__20 : bool => returnm (w__20, true)
            end)
            : M ((bool * bool))
        end)
        : M ((bool * bool))
    end)
    : M ((bool * bool)).
(*
Definition loop '(tt : unit) 
: M (unit) :=
   let insns_per_tick := plat_insns_per_tick tt in
   let i : Z := 0 in
   let step_no : Z := 0 in
   (whileM (i, step_no)
     (fun varstup => let '(i, step_no) := varstup in
       read_reg htif_done_ref >>= fun w__0 : bool => returnm ((negb w__0)  : bool))
     (fun varstup => let '(i, step_no) := varstup in
       write_reg minstret_written_ref false >>
       step step_no >>= fun '(retired, stepped) =>
       (read_reg nextPC_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
       write_reg PC_ref w__1 >>
       (if (retired) then (retire_instruction tt)  : M (unit)
        else returnm (tt  : unit)) >>
       let step_no : Z :=
         if (stepped) then
           projT1 (add_range
                     (build_ex (projT1 ((build_ex (projT1 (ex_int step_no)))
                      : {n : Z & ArithFact (True)}))) (build_ex 1))
         else step_no in
       read_reg htif_done_ref >>= fun w__2 : bool =>
       (if (w__2) then
          (read_reg htif_exit_code_ref  : M (mword 64)) >>= fun w__3 : xlenbits =>
          let 'exit_val := projT1 (uint w__3) in
          returnm (let '_ :=
            (if sumbool_of_bool ((Z.eqb exit_val 0)) then print_endline "SUCCESS"
             else print_int "FAILURE: " exit_val)
             : unit in
          i)
        else
          let i :=
            projT1 ((build_ex (projT1 (add_range
                                         (build_ex (projT1 ((build_ex (projT1 (ex_int i)))
                                          : {n : Z & ArithFact (True)}))) (build_ex 1))))
             : {arg0_ex46277_n : Z & {rangevar : Z & ArithFact ((arg0_ex46277_n + 1) <= rangevar /\
              rangevar <= (arg0_ex46277_n + 1))}}) in
          (if sumbool_of_bool ((Z.eqb
                                  (projT1 ((build_ex (projT1 (ex_int projT1i)))
                                   : {n : Z & ArithFact (True)})) insns_per_tick)) then
             tick_clock tt >> tick_platform tt >> returnm 0
           else returnm projT1i)
           : M (Z)) >>= fun i : Z =>
       returnm (i, step_no))) >>= fun '(i, step_no) =>
   returnm (tt
    : unit).
*)
Definition read_kind_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 11)} 
: read_kind :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Read_plain
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Read_reserve
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then Read_acquire
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then Read_exclusive
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then Read_exclusive_acquire
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then Read_stream
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then Read_RISCV_acquire
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then Read_RISCV_strong_acquire
   else if sumbool_of_bool ((Z.eqb p0_ 8)) then Read_RISCV_reserved
   else if sumbool_of_bool ((Z.eqb p0_ 9)) then Read_RISCV_reserved_acquire
   else if sumbool_of_bool ((Z.eqb p0_ 10)) then Read_RISCV_reserved_strong_acquire
   else Read_X86_locked.

Definition num_of_read_kind (arg_ : read_kind) 
: {e : Z & ArithFact (0 <= e /\ e <= 11)} :=
   build_ex(match arg_ with
            | Read_plain => 0
            | Read_reserve => 1
            | Read_acquire => 2
            | Read_exclusive => 3
            | Read_exclusive_acquire => 4
            | Read_stream => 5
            | Read_RISCV_acquire => 6
            | Read_RISCV_strong_acquire => 7
            | Read_RISCV_reserved => 8
            | Read_RISCV_reserved_acquire => 9
            | Read_RISCV_reserved_strong_acquire => 10
            | Read_X86_locked => 11
            end).

Definition write_kind_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 10)} 
: write_kind :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Write_plain
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Write_conditional
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then Write_release
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then Write_exclusive
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then Write_exclusive_release
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then Write_RISCV_release
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then Write_RISCV_strong_release
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then Write_RISCV_conditional
   else if sumbool_of_bool ((Z.eqb p0_ 8)) then Write_RISCV_conditional_release
   else if sumbool_of_bool ((Z.eqb p0_ 9)) then Write_RISCV_conditional_strong_release
   else Write_X86_locked.

Definition num_of_write_kind (arg_ : write_kind) 
: {e : Z & ArithFact (0 <= e /\ e <= 10)} :=
   build_ex(match arg_ with
            | Write_plain => 0
            | Write_conditional => 1
            | Write_release => 2
            | Write_exclusive => 3
            | Write_exclusive_release => 4
            | Write_RISCV_release => 5
            | Write_RISCV_strong_release => 6
            | Write_RISCV_conditional => 7
            | Write_RISCV_conditional_release => 8
            | Write_RISCV_conditional_strong_release => 9
            | Write_X86_locked => 10
            end).

Definition barrier_kind_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 22)} 
: barrier_kind :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Barrier_Sync
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Barrier_LwSync
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then Barrier_Eieio
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then Barrier_Isync
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then Barrier_DMB
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then Barrier_DMB_ST
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then Barrier_DMB_LD
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then Barrier_DSB
   else if sumbool_of_bool ((Z.eqb p0_ 8)) then Barrier_DSB_ST
   else if sumbool_of_bool ((Z.eqb p0_ 9)) then Barrier_DSB_LD
   else if sumbool_of_bool ((Z.eqb p0_ 10)) then Barrier_ISB
   else if sumbool_of_bool ((Z.eqb p0_ 11)) then Barrier_MIPS_SYNC
   else if sumbool_of_bool ((Z.eqb p0_ 12)) then Barrier_RISCV_rw_rw
   else if sumbool_of_bool ((Z.eqb p0_ 13)) then Barrier_RISCV_r_rw
   else if sumbool_of_bool ((Z.eqb p0_ 14)) then Barrier_RISCV_r_r
   else if sumbool_of_bool ((Z.eqb p0_ 15)) then Barrier_RISCV_rw_w
   else if sumbool_of_bool ((Z.eqb p0_ 16)) then Barrier_RISCV_w_w
   else if sumbool_of_bool ((Z.eqb p0_ 17)) then Barrier_RISCV_w_rw
   else if sumbool_of_bool ((Z.eqb p0_ 18)) then Barrier_RISCV_rw_r
   else if sumbool_of_bool ((Z.eqb p0_ 19)) then Barrier_RISCV_r_w
   else if sumbool_of_bool ((Z.eqb p0_ 20)) then Barrier_RISCV_w_r
   else if sumbool_of_bool ((Z.eqb p0_ 21)) then Barrier_RISCV_i
   else Barrier_x86_MFENCE.

Definition num_of_barrier_kind (arg_ : barrier_kind) 
: {e : Z & ArithFact (0 <= e /\ e <= 22)} :=
   build_ex(match arg_ with
            | Barrier_Sync => 0
            | Barrier_LwSync => 1
            | Barrier_Eieio => 2
            | Barrier_Isync => 3
            | Barrier_DMB => 4
            | Barrier_DMB_ST => 5
            | Barrier_DMB_LD => 6
            | Barrier_DSB => 7
            | Barrier_DSB_ST => 8
            | Barrier_DSB_LD => 9
            | Barrier_ISB => 10
            | Barrier_MIPS_SYNC => 11
            | Barrier_RISCV_rw_rw => 12
            | Barrier_RISCV_r_rw => 13
            | Barrier_RISCV_r_r => 14
            | Barrier_RISCV_rw_w => 15
            | Barrier_RISCV_w_w => 16
            | Barrier_RISCV_w_rw => 17
            | Barrier_RISCV_rw_r => 18
            | Barrier_RISCV_r_w => 19
            | Barrier_RISCV_w_r => 20
            | Barrier_RISCV_i => 21
            | Barrier_x86_MFENCE => 22
            end).

Definition trans_kind_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: trans_kind :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Transaction_start
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Transaction_commit
   else Transaction_abort.

Definition num_of_trans_kind (arg_ : trans_kind) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   build_ex(match arg_ with
            | Transaction_start => 0
            | Transaction_commit => 1
            | Transaction_abort => 2
            end).

Definition GPRstr : vec string 32 :=
vec_of_list_len ["x31";"x30";"x29";"x28";"x27";"x26";"x25";"x24";"x23";"x22";"x21";"x20";"x19";"x18";"x17";"x16";"x15";"x14";"x13";"x12";"x11";
                 "x10";"x9";"x8";"x7";"x6";"x5";"x4";"x3";"x2";"x1";"x0"].
Hint Unfold GPRstr : sail.
Definition CIA_fp := RFull ("CIA").
Hint Unfold CIA_fp : sail.
Definition NIA_fp := RFull ("NIA").
Hint Unfold NIA_fp : sail.
Definition initial_analysis (instr : ast) 
: M ((list regfp * list regfp * list regfp * list niafp * diafp * instruction_kind)) :=
   let iR := []  : regfps in
   let oR := []  : regfps in
   let aR := []  : regfps in
   let ik := (IK_simple (tt))  : instruction_kind in
   let Nias := [NIAFP_successor (tt)]  : niafps in
   let Dia := (DIAFP_none (tt))  : diafp in
   match instr with
   | EBREAK (tt) => returnm (Nias, aR, iR, ik, oR)
   | UTYPE (imm,rd,op) =>
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | RISCV_JAL (imm,rd) =>
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      let offset : bits 64 := EXTS 64 imm in
      (read_reg PC_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
      let Nias : niafps := [NIAFP_concrete_address (add_vec w__0 offset)] in
      let ik : instruction_kind := IK_branch (tt) in
      returnm (Nias, aR, iR, ik, oR)
   | RISCV_JALR (imm,rs,rd) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      let offset : bits 64 := EXTS 64 imm in
      let Nias : niafps := [NIAFP_indirect_address (tt)] in
      let ik : instruction_kind := IK_branch (tt) in
      returnm (Nias, aR, iR, ik, oR)
   | BTYPE (imm,rs2,rs1,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let ik := (IK_branch (tt))  : instruction_kind  in
      let offset : bits 64 := EXTS 64 imm in
      (read_reg PC_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
      let Nias : niafps := [NIAFP_concrete_address (add_vec w__1 offset);NIAFP_successor (tt)] in
      returnm (Nias, aR, iR, ik, oR)
   | ITYPE (imm,rs,rd,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | SHIFTIOP (imm,rs,rd,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | RTYPE (rs2,rs1,rd,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | CSR (csr,rs1,rd,is_imm,op) =>
      let isWrite : bool :=
        match op with
        | CSRRW => true
        | _ =>
           if (is_imm) then neq_range (build_ex (projT1 (uint rs1))) (build_ex 0)
           else neq_range (build_ex (projT1 (uint rs1))) (build_ex 0)
        end in
      let iR : regfps := (RFull (csr_name csr)) :: iR in
      let iR : regfps :=
        if ((negb is_imm)) then
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR
        else iR in
      let oR : regfps := if (isWrite) then (RFull (csr_name csr)) :: oR else oR in
      let oR : regfps :=
        (RFull
           (vec_access_dec GPRstr
              (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
               : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
          oR in
      returnm (Nias, aR, iR, ik, oR)
   | LOAD (imm,rs,rd,unsign,width,aq,rl) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      let aR := iR  : regfps in
      match (aq, rl) with
      | (false, false) => returnm ((IK_mem_read (Read_plain))  : instruction_kind )
      | (true, false) => returnm ((IK_mem_read (Read_RISCV_acquire))  : instruction_kind )
      | (true, true) => returnm ((IK_mem_read (Read_RISCV_strong_acquire))  : instruction_kind )
      | _ =>
         (internal_error "LOAD type not implemented in initial_analysis")  : M (instruction_kind)
      end >>= fun w__3 : instruction_kind =>
      let ik : instruction_kind := w__3 in
      returnm (Nias, aR, iR, ik, oR)
   | STORE (imm,rs2,rs1,width,aq,rl) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let aR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          aR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            aR in
      match (aq, rl) with
      | (false, false) => returnm ((IK_mem_write (Write_plain))  : instruction_kind )
      | (false, true) => returnm ((IK_mem_write (Write_RISCV_release))  : instruction_kind )
      | (true, true) => returnm ((IK_mem_write (Write_RISCV_strong_release))  : instruction_kind )
      | _ =>
         (internal_error "STORE type not implemented in initial_analysis")  : M (instruction_kind)
      end >>= fun w__5 : instruction_kind =>
      let ik : instruction_kind := w__5 in
      returnm (Nias, aR, iR, ik, oR)
   | ADDIW (imm,rs,rd) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | SHIFTW (imm,rs,rd,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | RTYPEW (rs2,rs1,rd,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | FENCE (pred,succ) =>
      match (pred, succ) with
      | (v__610, v__611) =>
         (if ((andb (eq_vec (subrange_vec_dec v__610 1 0) (vec_of_bits [B1;B1]  : mword 2))
                 (eq_vec (subrange_vec_dec v__611 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
            returnm ((IK_barrier
                        (Barrier_RISCV_rw_rw))
             : instruction_kind )
          else if ((andb (eq_vec (subrange_vec_dec v__610 1 0) (vec_of_bits [B1;B0]  : mword 2))
                      (eq_vec (subrange_vec_dec v__611 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
            returnm ((IK_barrier
                        (Barrier_RISCV_r_rw))
             : instruction_kind )
          else if ((andb (eq_vec (subrange_vec_dec v__610 1 0) (vec_of_bits [B1;B0]  : mword 2))
                      (eq_vec (subrange_vec_dec v__611 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
            returnm ((IK_barrier
                        (Barrier_RISCV_r_r))
             : instruction_kind )
          else if ((andb (eq_vec (subrange_vec_dec v__610 1 0) (vec_of_bits [B1;B1]  : mword 2))
                      (eq_vec (subrange_vec_dec v__611 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
            returnm ((IK_barrier
                        (Barrier_RISCV_rw_w))
             : instruction_kind )
          else if ((andb (eq_vec (subrange_vec_dec v__610 1 0) (vec_of_bits [B0;B1]  : mword 2))
                      (eq_vec (subrange_vec_dec v__611 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
            returnm ((IK_barrier
                        (Barrier_RISCV_w_w))
             : instruction_kind )
          else if ((andb (eq_vec (subrange_vec_dec v__610 1 0) (vec_of_bits [B0;B1]  : mword 2))
                      (eq_vec (subrange_vec_dec v__611 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
            returnm ((IK_barrier
                        (Barrier_RISCV_w_rw))
             : instruction_kind )
          else if ((andb (eq_vec (subrange_vec_dec v__610 1 0) (vec_of_bits [B1;B1]  : mword 2))
                      (eq_vec (subrange_vec_dec v__611 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
            returnm ((IK_barrier
                        (Barrier_RISCV_rw_r))
             : instruction_kind )
          else if ((andb (eq_vec (subrange_vec_dec v__610 1 0) (vec_of_bits [B1;B0]  : mword 2))
                      (eq_vec (subrange_vec_dec v__611 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
            returnm ((IK_barrier
                        (Barrier_RISCV_r_w))
             : instruction_kind )
          else if ((andb (eq_vec (subrange_vec_dec v__610 1 0) (vec_of_bits [B0;B1]  : mword 2))
                      (eq_vec (subrange_vec_dec v__611 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
            returnm ((IK_barrier
                        (Barrier_RISCV_w_r))
             : instruction_kind )
          else if ((andb (eq_vec (subrange_vec_dec v__610 1 0) (vec_of_bits [B0;B0]  : mword 2))
                      (eq_vec (subrange_vec_dec v__611 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
            returnm ((IK_simple
                        (tt))
             : instruction_kind )
          else
            (internal_error "barrier type not implemented in initial_analysis")
             : M (instruction_kind))
          : M (instruction_kind)
      end >>= fun w__17 : instruction_kind =>
      let ik : instruction_kind := w__17 in
      returnm (Nias, aR, iR, ik, oR)
   | FENCEI (tt) =>
      let ik : instruction_kind := IK_simple (tt) in
      returnm (Nias, aR, iR, ik, oR)
   | LOADRES (aq,rl,rs1,width,rd) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      let aR := iR  : regfps in
      match (aq, rl) with
      | (false, false) => returnm ((IK_mem_read (Read_RISCV_reserved))  : instruction_kind )
      | (true, false) => returnm ((IK_mem_read (Read_RISCV_reserved_acquire))  : instruction_kind )
      | (true, true) =>
         returnm ((IK_mem_read (Read_RISCV_reserved_strong_acquire))  : instruction_kind )
      | (false, true) =>
         (internal_error "LOADRES type not implemented in initial_analysis")  : M (instruction_kind)
      end >>= fun w__19 : instruction_kind =>
      let ik : instruction_kind := w__19 in
      returnm (Nias, aR, iR, ik, oR)
   | STORECON (aq,rl,rs2,rs1,width,rd) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let aR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          aR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            aR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      match (aq, rl) with
      | (false, false) => returnm ((IK_mem_write (Write_RISCV_conditional))  : instruction_kind )
      | (false, true) =>
         returnm ((IK_mem_write (Write_RISCV_conditional_release))  : instruction_kind )
      | (true, true) =>
         returnm ((IK_mem_write (Write_RISCV_conditional_strong_release))  : instruction_kind )
      | (true, false) =>
         (internal_error "STORECON type not implemented in initial_analysis")
          : M (instruction_kind)
      end >>= fun w__21 : instruction_kind =>
      let ik : instruction_kind := w__21 in
      returnm (Nias, aR, iR, ik, oR)
   | AMO (op,aq,rl,rs2,rs1,width,rd) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs2)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let aR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          aR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rs1)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            aR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull
             (vec_access_dec GPRstr
                (projT1 ((build_ex (projT1 (regbits_to_regno rd)))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      let ik : instruction_kind :=
        match (aq, rl) with
        | (false, false) => IK_mem_rmw (Read_RISCV_reserved, Write_RISCV_conditional)
        | (false, true) => IK_mem_rmw (Read_RISCV_reserved, Write_RISCV_conditional_release)
        | (true, false) => IK_mem_rmw (Read_RISCV_reserved_acquire, Write_RISCV_conditional)
        | (true, true) => IK_mem_rmw (Read_RISCV_reserved_acquire, Write_RISCV_conditional_release)
        end in
      returnm (Nias, aR, iR, ik, oR)
   | _ => returnm (Nias, aR, iR, ik, oR)
   end >>= fun '(Nias, aR, iR, ik, oR) =>
   returnm (iR, oR, aR, Nias, Dia, ik).

Definition initial_regstate : regstate :=
{| tlb39 := None; 
   htif_exit_code :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   htif_done := false; 
   htif_tohost :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mtimecmp :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   tselect :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   stval :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   scause :=
     ({| Mcause_Mcause_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   sepc :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   sscratch :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   stvec :=
     ({| Mtvec_Mtvec_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   satp :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   sideleg :=
     ({| Sinterrupts_Sinterrupts_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   sedeleg :=
     ({| Sedeleg_Sedeleg_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   pmpcfg0 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   pmpaddr0 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mhartid :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   marchid :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mimpid :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mvendorid :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   minstret_written := false; 
   minstret :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mtime :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mcycle :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   scounteren :=
     ({| Counteren_Counteren_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
             : mword 32) |}); 
   mcounteren :=
     ({| Counteren_Counteren_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
             : mword 32) |}); 
   mscratch :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mtval :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mepc :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mcause :=
     ({| Mcause_Mcause_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   mtvec :=
     ({| Mtvec_Mtvec_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   medeleg :=
     ({| Medeleg_Medeleg_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   mideleg :=
     ({| Minterrupts_Minterrupts_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   mie :=
     ({| Minterrupts_Minterrupts_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   mip :=
     ({| Minterrupts_Minterrupts_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   mstatus :=
     ({| Mstatus_Mstatus_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   misa :=
     ({| Misa_Misa_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   cur_inst :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   cur_privilege := User; 
   x31 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x30 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x29 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x28 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x27 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x26 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x25 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x24 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x23 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x22 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x21 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x20 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x19 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x18 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x17 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x16 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x15 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x14 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x13 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x12 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x11 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x10 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x9 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x8 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x7 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x6 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x5 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x4 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x3 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x2 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x1 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   Xs :=
     (vec_of_list_len [(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0]
                         : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0]
                                       : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0]
                                                     : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0]
                                                                   : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0]
                                                                                 : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0]
                                                                                               : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0]
                                                                                                             : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0]
                                                                                                                           : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0]
                                                                                                                                         : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0]
                                                                                                                                                       : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0]
                                                                                                                                                                     : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                               B0]
                                                                                                                                                                                   : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                             B0]
                                                                                                                                                                                                 : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                           B0]
                                                                                                                                                                                                               : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                         B0]
                                                                                                                                                                                                                             : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                       B0]
                                                                                                                                                                                                                                           : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                     B0]
                                                                                                                                                                                                                                                         : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                   B0]
                                                                                                                                                                                                                                                                       : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                 B0]
                                                                                                                                                                                                                                                                                     : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                               B0]
                                                                                                                                                                                                                                                                                                   : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                                             B0]
                                                                                                                                                                                                                                                                                                                 : mword 64);
                       (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0]
                         : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0]
                                       : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0]
                                                     : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0]
                                                                   : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0]
                                                                                 : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0]
                                                                                               : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0]
                                                                                                             : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0]
                                                                                                                           : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0]
                                                                                                                                         : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0]
                                                                                                                                                       : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0]
                                                                                                                                                                     : mword 64)]); 
   nextPC :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   PC :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64) |}.
Hint Unfold initial_regstate : sail.

End Content.
